// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package falabella___middleware.middleware_insercion_0_8;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Middleware_Insercion Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.5.1.20180116_1512
 * @status 
 */
public class Middleware_Insercion implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ExcelImportacion != null) {

				this.setProperty("ExcelImportacion",
						ExcelImportacion.toString());

			}

			if (XMLOrigen != null) {

				this.setProperty("XMLOrigen", XMLOrigen.toString());

			}

			if (ExcelRechazados != null) {

				this.setProperty("ExcelRechazados", ExcelRechazados.toString());

			}

			if (XMLProductosCargados != null) {

				this.setProperty("XMLProductosCargados",
						XMLProductosCargados.toString());

			}

			if (ExcelExportacion != null) {

				this.setProperty("ExcelExportacion",
						ExcelExportacion.toString());

			}

			if (FTPusuario != null) {

				this.setProperty("FTPusuario", FTPusuario.toString());

			}

			if (FTPpass != null) {

				this.setProperty("FTPpass", FTPpass.toString());

			}

			if (FTPpuerto != null) {

				this.setProperty("FTPpuerto", FTPpuerto.toString());

			}

			if (FTPhost != null) {

				this.setProperty("FTPhost", FTPhost.toString());

			}

			if (XMLDDRegistrosCargados != null) {

				this.setProperty("XMLDDRegistrosCargados",
						XMLDDRegistrosCargados.toString());

			}

			if (XMLFlagFoto != null) {

				this.setProperty("XMLFlagFoto", XMLFlagFoto.toString());

			}

			if (BIZprocesoWorkflow != null) {

				this.setProperty("BIZprocesoWorkflow",
						BIZprocesoWorkflow.toString());

			}

			if (BIZhost != null) {

				this.setProperty("BIZhost", BIZhost.toString());

			}

			if (BIZprocesoDD != null) {

				this.setProperty("BIZprocesoDD", BIZprocesoDD.toString());

			}

			if (XMLProgramacion != null) {

				this.setProperty("XMLProgramacion", XMLProgramacion.toString());

			}

			if (XMLTempAgrupado != null) {

				this.setProperty("XMLTempAgrupado", XMLTempAgrupado.toString());

			}

			if (ExcelLog != null) {

				this.setProperty("ExcelLog", ExcelLog.toString());

			}

			if (ExcelLogCreados != null) {

				this.setProperty("ExcelLogCreados", ExcelLogCreados.toString());

			}

			if (ExcelLogFallidos != null) {

				this.setProperty("ExcelLogFallidos",
						ExcelLogFallidos.toString());

			}

			if (ExcelLogXML != null) {

				this.setProperty("ExcelLogXML", ExcelLogXML.toString());

			}

		}

		public String ExcelImportacion;

		public String getExcelImportacion() {
			return this.ExcelImportacion;
		}

		public String XMLOrigen;

		public String getXMLOrigen() {
			return this.XMLOrigen;
		}

		public String ExcelRechazados;

		public String getExcelRechazados() {
			return this.ExcelRechazados;
		}

		public String XMLProductosCargados;

		public String getXMLProductosCargados() {
			return this.XMLProductosCargados;
		}

		public String ExcelExportacion;

		public String getExcelExportacion() {
			return this.ExcelExportacion;
		}

		public String FTPusuario;

		public String getFTPusuario() {
			return this.FTPusuario;
		}

		public java.lang.String FTPpass;

		public java.lang.String getFTPpass() {
			return this.FTPpass;
		}

		public String FTPpuerto;

		public String getFTPpuerto() {
			return this.FTPpuerto;
		}

		public String FTPhost;

		public String getFTPhost() {
			return this.FTPhost;
		}

		public String XMLDDRegistrosCargados;

		public String getXMLDDRegistrosCargados() {
			return this.XMLDDRegistrosCargados;
		}

		public String XMLFlagFoto;

		public String getXMLFlagFoto() {
			return this.XMLFlagFoto;
		}

		public String BIZprocesoWorkflow;

		public String getBIZprocesoWorkflow() {
			return this.BIZprocesoWorkflow;
		}

		public String BIZhost;

		public String getBIZhost() {
			return this.BIZhost;
		}

		public String BIZprocesoDD;

		public String getBIZprocesoDD() {
			return this.BIZprocesoDD;
		}

		public String XMLProgramacion;

		public String getXMLProgramacion() {
			return this.XMLProgramacion;
		}

		public String XMLTempAgrupado;

		public String getXMLTempAgrupado() {
			return this.XMLTempAgrupado;
		}

		public String ExcelLog;

		public String getExcelLog() {
			return this.ExcelLog;
		}

		public String ExcelLogCreados;

		public String getExcelLogCreados() {
			return this.ExcelLogCreados;
		}

		public String ExcelLogFallidos;

		public String getExcelLogFallidos() {
			return this.ExcelLogFallidos;
		}

		public String ExcelLogXML;

		public String getExcelLogXML() {
			return this.ExcelLogXML;
		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.8";
	private final String jobName = "Middleware_Insercion";
	private final String projectName = "FALABELLA___MIDDLEWARE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Middleware_Insercion.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Middleware_Insercion.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tConvertType_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSOAP_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tConvertType_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedFileOutputXML_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplace_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractXMLField_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSOAP_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedFileOutputXML_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplace_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractXMLField_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSOAP_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedFileOutputXML_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplace_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractXMLField_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSOAP_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedFileOutputXML_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplace_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractXMLField_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSOAP_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSOAP_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSOAP_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_lookupOrigen_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_lookupFlagFoto_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWriteXMLField_1_Out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tWriteXMLField_1_In_error(exception, errorComponent, globalMap);

	}

	public void tWriteXMLField_1_In_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_1_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_1_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_1_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_4_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_4_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_4_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_6_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_6_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_6_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_5_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_5_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_5_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_7_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_7_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_7_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_2_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_2_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_2_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_3_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_3_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_3_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWriteXMLField_1_In_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public java.util.Date FECHA_CREACION_SKU;

		public java.util.Date getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public java.util.Date FECHA_CREACION;

		public java.util.Date getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String URLFotos;

		public String getURLFotos() {
			return this.URLFotos;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readDate(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readDate(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

					this.URLFotos = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

				// String

				writeString(this.URLFotos, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU="
					+ String.valueOf(FECHA_CREACION_SKU));
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + String.valueOf(FECHA_CREACION));
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",URLFotos=" + URLFotos);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public java.util.Date FECHA_CREACION_SKU;

		public java.util.Date getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public java.util.Date FECHA_CREACION;

		public java.util.Date getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String URLFotos;

		public String getURLFotos() {
			return this.URLFotos;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readDate(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readDate(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

					this.URLFotos = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

				// String

				writeString(this.URLFotos, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU="
					+ String.valueOf(FECHA_CREACION_SKU));
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + String.valueOf(FECHA_CREACION));
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",URLFotos=" + URLFotos);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public java.util.Date FECHA_CREACION_SKU;

		public java.util.Date getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public java.util.Date FECHA_CREACION;

		public java.util.Date getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String URLFotos;

		public String getURLFotos() {
			return this.URLFotos;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readDate(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readDate(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

					this.URLFotos = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

				// String

				writeString(this.URLFotos, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU="
					+ String.valueOf(FECHA_CREACION_SKU));
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + String.valueOf(FECHA_CREACION));
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",URLFotos=" + URLFotos);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row36Struct implements
			routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public java.util.Date FECHA_CREACION_SKU;

		public java.util.Date getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public java.util.Date FECHA_CREACION;

		public java.util.Date getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String URLFotos;

		public String getURLFotos() {
			return this.URLFotos;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readDate(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readDate(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

					this.URLFotos = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

				// String

				writeString(this.URLFotos, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU="
					+ String.valueOf(FECHA_CREACION_SKU));
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + String.valueOf(FECHA_CREACION));
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",URLFotos=" + URLFotos);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public java.util.Date FECHA_CREACION_SKU;

		public java.util.Date getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public java.util.Date FECHA_CREACION;

		public java.util.Date getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String URLFotos;

		public String getURLFotos() {
			return this.URLFotos;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readDate(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readDate(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

					this.URLFotos = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

				// String

				writeString(this.URLFotos, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU="
					+ String.valueOf(FECHA_CREACION_SKU));
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + String.valueOf(FECHA_CREACION));
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",URLFotos=" + URLFotos);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row38Struct implements
			routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public java.util.Date FECHA_CREACION_SKU;

		public java.util.Date getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public java.util.Date FECHA_CREACION;

		public java.util.Date getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String URLFotos;

		public String getURLFotos() {
			return this.URLFotos;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readDate(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readDate(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

					this.URLFotos = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

				// String

				writeString(this.URLFotos, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU="
					+ String.valueOf(FECHA_CREACION_SKU));
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + String.valueOf(FECHA_CREACION));
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",URLFotos=" + URLFotos);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public java.util.Date FECHA_CREACION_SKU;

		public java.util.Date getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public java.util.Date FECHA_CREACION;

		public java.util.Date getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String URLFotos;

		public String getURLFotos() {
			return this.URLFotos;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readDate(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readDate(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

					this.URLFotos = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

				// String

				writeString(this.URLFotos, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU="
					+ String.valueOf(FECHA_CREACION_SKU));
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + String.valueOf(FECHA_CREACION));
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",URLFotos=" + URLFotos);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public java.util.Date FECHA_CREACION_SKU;

		public java.util.Date getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public java.util.Date FECHA_CREACION;

		public java.util.Date getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String URLFotos;

		public String getURLFotos() {
			return this.URLFotos;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readDate(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readDate(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

					this.URLFotos = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

				// String

				writeString(this.URLFotos, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU="
					+ String.valueOf(FECHA_CREACION_SKU));
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + String.valueOf(FECHA_CREACION));
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",URLFotos=" + URLFotos);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public java.util.Date FECHA_CREACION_SKU;

		public java.util.Date getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public java.util.Date FECHA_CREACION;

		public java.util.Date getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String URLFotos;

		public String getURLFotos() {
			return this.URLFotos;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readDate(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readDate(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

					this.URLFotos = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

				// String

				writeString(this.URLFotos, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU="
					+ String.valueOf(FECHA_CREACION_SKU));
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + String.valueOf(FECHA_CREACION));
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",URLFotos=" + URLFotos);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class convertidoStruct implements
			routines.system.IPersistableRow<convertidoStruct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public java.util.Date FECHA_CREACION_SKU;

		public java.util.Date getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public java.util.Date FECHA_CREACION;

		public java.util.Date getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String URLFotos;

		public String getURLFotos() {
			return this.URLFotos;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readDate(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readDate(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

					this.URLFotos = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// java.util.Date

				writeDate(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

				// String

				writeString(this.URLFotos, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU="
					+ String.valueOf(FECHA_CREACION_SKU));
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + String.valueOf(FECHA_CREACION));
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",URLFotos=" + URLFotos);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(convertidoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public String FECHA_CREACION_SKU;

		public String getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public Boolean IS_MARKETPLACE;

		public Boolean getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public Boolean IS_VEV_VENTA_EN_VERDE;

		public Boolean getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public String FECHA_CREACION;

		public String getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readString(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_MARKETPLACE = null;
					} else {
						this.IS_MARKETPLACE = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.IS_VEV_VENTA_EN_VERDE = null;
					} else {
						this.IS_VEV_VENTA_EN_VERDE = dis.readBoolean();
					}

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readString(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// String

				writeString(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// Boolean

				if (this.IS_MARKETPLACE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_MARKETPLACE);
				}

				// Boolean

				if (this.IS_VEV_VENTA_EN_VERDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_VEV_VENTA_EN_VERDE);
				}

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// String

				writeString(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU=" + FECHA_CREACION_SKU);
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + String.valueOf(IS_MARKETPLACE));
			sb.append(",IS_VEV_VENTA_EN_VERDE="
					+ String.valueOf(IS_VEV_VENTA_EN_VERDE));
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + FECHA_CREACION);
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class aceptadosStruct implements
			routines.system.IPersistableRow<aceptadosStruct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public String FECHA_CREACION_SKU;

		public String getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public String IS_MARKETPLACE;

		public String getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public String IS_VEV_VENTA_EN_VERDE;

		public String getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public String FECHA_CREACION;

		public String getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readString(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					this.IS_MARKETPLACE = readString(dis);

					this.IS_VEV_VENTA_EN_VERDE = readString(dis);

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readString(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.ID_Origen = readInteger(dis);

					this.ID_FlagFoto = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// String

				writeString(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// String

				writeString(this.IS_MARKETPLACE, dos);

				// String

				writeString(this.IS_VEV_VENTA_EN_VERDE, dos);

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// String

				writeString(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// Integer

				writeInteger(this.ID_Origen, dos);

				// Integer

				writeInteger(this.ID_FlagFoto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU=" + FECHA_CREACION_SKU);
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + IS_MARKETPLACE);
			sb.append(",IS_VEV_VENTA_EN_VERDE=" + IS_VEV_VENTA_EN_VERDE);
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + FECHA_CREACION);
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(aceptadosStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rechazados2Struct implements
			routines.system.IPersistableRow<rechazados2Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public String FECHA_CREACION_SKU;

		public String getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public String IS_MARKETPLACE;

		public String getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public String IS_VEV_VENTA_EN_VERDE;

		public String getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public String FECHA_CREACION;

		public String getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readString(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					this.IS_MARKETPLACE = readString(dis);

					this.IS_VEV_VENTA_EN_VERDE = readString(dis);

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readString(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

					this.MensajeError = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// String

				writeString(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// String

				writeString(this.IS_MARKETPLACE, dos);

				// String

				writeString(this.IS_VEV_VENTA_EN_VERDE, dos);

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// String

				writeString(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

				// String

				writeString(this.MensajeError, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU=" + FECHA_CREACION_SKU);
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + IS_MARKETPLACE);
			sb.append(",IS_VEV_VENTA_EN_VERDE=" + IS_VEV_VENTA_EN_VERDE);
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + FECHA_CREACION);
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append(",MensajeError=" + MensajeError);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rechazados2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class excel1Struct implements
			routines.system.IPersistableRow<excel1Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public String FECHA_CREACION_SKU;

		public String getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public String IS_MARKETPLACE;

		public String getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public String IS_VEV_VENTA_EN_VERDE;

		public String getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public String FECHA_CREACION;

		public String getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readString(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					this.IS_MARKETPLACE = readString(dis);

					this.IS_VEV_VENTA_EN_VERDE = readString(dis);

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readString(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// String

				writeString(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// String

				writeString(this.IS_MARKETPLACE, dos);

				// String

				writeString(this.IS_VEV_VENTA_EN_VERDE, dos);

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// String

				writeString(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU=" + FECHA_CREACION_SKU);
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + IS_MARKETPLACE);
			sb.append(",IS_VEV_VENTA_EN_VERDE=" + IS_VEV_VENTA_EN_VERDE);
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + FECHA_CREACION);
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(excel1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_1Struct implements
			routines.system.IPersistableRow<after_tFileInputExcel_1Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String DESCRIPCION_LINEA;

		public String getDESCRIPCION_LINEA() {
			return this.DESCRIPCION_LINEA;
		}

		public String LINEA;

		public String getLINEA() {
			return this.LINEA;
		}

		public String DESCRIPCION_SUBLINEA;

		public String getDESCRIPCION_SUBLINEA() {
			return this.DESCRIPCION_SUBLINEA;
		}

		public String SUBLINEA;

		public String getSUBLINEA() {
			return this.SUBLINEA;
		}

		public String DESCRIPCION_CLASE;

		public String getDESCRIPCION_CLASE() {
			return this.DESCRIPCION_CLASE;
		}

		public String CLASE;

		public String getCLASE() {
			return this.CLASE;
		}

		public String DESCRIPCION_SUBCLASE;

		public String getDESCRIPCION_SUBCLASE() {
			return this.DESCRIPCION_SUBCLASE;
		}

		public String SUBCLASE;

		public String getSUBCLASE() {
			return this.SUBCLASE;
		}

		public String FECHA_CREACION_SKU;

		public String getFECHA_CREACION_SKU() {
			return this.FECHA_CREACION_SKU;
		}

		public String Modelo;

		public String getModelo() {
			return this.Modelo;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String MARCA;

		public String getMARCA() {
			return this.MARCA;
		}

		public String COLOR_GROUP;

		public String getCOLOR_GROUP() {
			return this.COLOR_GROUP;
		}

		public String TALLA;

		public String getTALLA() {
			return this.TALLA;
		}

		public String TEMPORADA;

		public String getTEMPORADA() {
			return this.TEMPORADA;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public String ESTILO;

		public String getESTILO() {
			return this.ESTILO;
		}

		public String ID_FAMILIA;

		public String getID_FAMILIA() {
			return this.ID_FAMILIA;
		}

		public String FLAG_FOTO_INICIAL;

		public String getFLAG_FOTO_INICIAL() {
			return this.FLAG_FOTO_INICIAL;
		}

		public String FLAG_FOTO_FINAL;

		public String getFLAG_FOTO_FINAL() {
			return this.FLAG_FOTO_FINAL;
		}

		public String URL_DE_LA_FOTO_1;

		public String getURL_DE_LA_FOTO_1() {
			return this.URL_DE_LA_FOTO_1;
		}

		public String URL_DE_LA_FOTO_2;

		public String getURL_DE_LA_FOTO_2() {
			return this.URL_DE_LA_FOTO_2;
		}

		public String URL_DE_LA_FOTO_3;

		public String getURL_DE_LA_FOTO_3() {
			return this.URL_DE_LA_FOTO_3;
		}

		public String URL_DE_LA_FOTO_4;

		public String getURL_DE_LA_FOTO_4() {
			return this.URL_DE_LA_FOTO_4;
		}

		public String URL_DE_LA_FOTO_5;

		public String getURL_DE_LA_FOTO_5() {
			return this.URL_DE_LA_FOTO_5;
		}

		public String ORIGEN;

		public String getORIGEN() {
			return this.ORIGEN;
		}

		public String IS_MARKETPLACE;

		public String getIS_MARKETPLACE() {
			return this.IS_MARKETPLACE;
		}

		public String IS_VEV_VENTA_EN_VERDE;

		public String getIS_VEV_VENTA_EN_VERDE() {
			return this.IS_VEV_VENTA_EN_VERDE;
		}

		public String NOMBRE_COMERCIAL;

		public String getNOMBRE_COMERCIAL() {
			return this.NOMBRE_COMERCIAL;
		}

		public String NOMBRE_PROVEEDOR;

		public String getNOMBRE_PROVEEDOR() {
			return this.NOMBRE_PROVEEDOR;
		}

		public String RUT_PROVEEDOR;

		public String getRUT_PROVEEDOR() {
			return this.RUT_PROVEEDOR;
		}

		public String DV;

		public String getDV() {
			return this.DV;
		}

		public String PAIS_PROVEEDOR;

		public String getPAIS_PROVEEDOR() {
			return this.PAIS_PROVEEDOR;
		}

		public String FONO;

		public String getFONO() {
			return this.FONO;
		}

		public String FECHA_CREACION;

		public String getFECHA_CREACION() {
			return this.FECHA_CREACION;
		}

		public String MAIL;

		public String getMAIL() {
			return this.MAIL;
		}

		public String CONTACTO;

		public String getCONTACTO() {
			return this.CONTACTO;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.DESCRIPCION_LINEA = readString(dis);

					this.LINEA = readString(dis);

					this.DESCRIPCION_SUBLINEA = readString(dis);

					this.SUBLINEA = readString(dis);

					this.DESCRIPCION_CLASE = readString(dis);

					this.CLASE = readString(dis);

					this.DESCRIPCION_SUBCLASE = readString(dis);

					this.SUBCLASE = readString(dis);

					this.FECHA_CREACION_SKU = readString(dis);

					this.Modelo = readString(dis);

					this.EAN = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.MARCA = readString(dis);

					this.COLOR_GROUP = readString(dis);

					this.TALLA = readString(dis);

					this.TEMPORADA = readString(dis);

					this.SKU = readString(dis);

					this.ESTILO = readString(dis);

					this.ID_FAMILIA = readString(dis);

					this.FLAG_FOTO_INICIAL = readString(dis);

					this.FLAG_FOTO_FINAL = readString(dis);

					this.URL_DE_LA_FOTO_1 = readString(dis);

					this.URL_DE_LA_FOTO_2 = readString(dis);

					this.URL_DE_LA_FOTO_3 = readString(dis);

					this.URL_DE_LA_FOTO_4 = readString(dis);

					this.URL_DE_LA_FOTO_5 = readString(dis);

					this.ORIGEN = readString(dis);

					this.IS_MARKETPLACE = readString(dis);

					this.IS_VEV_VENTA_EN_VERDE = readString(dis);

					this.NOMBRE_COMERCIAL = readString(dis);

					this.NOMBRE_PROVEEDOR = readString(dis);

					this.RUT_PROVEEDOR = readString(dis);

					this.DV = readString(dis);

					this.PAIS_PROVEEDOR = readString(dis);

					this.FONO = readString(dis);

					this.FECHA_CREACION = readString(dis);

					this.MAIL = readString(dis);

					this.CONTACTO = readString(dis);

					this.PAIS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DESCRIPCION_LINEA, dos);

				// String

				writeString(this.LINEA, dos);

				// String

				writeString(this.DESCRIPCION_SUBLINEA, dos);

				// String

				writeString(this.SUBLINEA, dos);

				// String

				writeString(this.DESCRIPCION_CLASE, dos);

				// String

				writeString(this.CLASE, dos);

				// String

				writeString(this.DESCRIPCION_SUBCLASE, dos);

				// String

				writeString(this.SUBCLASE, dos);

				// String

				writeString(this.FECHA_CREACION_SKU, dos);

				// String

				writeString(this.Modelo, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.MARCA, dos);

				// String

				writeString(this.COLOR_GROUP, dos);

				// String

				writeString(this.TALLA, dos);

				// String

				writeString(this.TEMPORADA, dos);

				// String

				writeString(this.SKU, dos);

				// String

				writeString(this.ESTILO, dos);

				// String

				writeString(this.ID_FAMILIA, dos);

				// String

				writeString(this.FLAG_FOTO_INICIAL, dos);

				// String

				writeString(this.FLAG_FOTO_FINAL, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_1, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_2, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_3, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_4, dos);

				// String

				writeString(this.URL_DE_LA_FOTO_5, dos);

				// String

				writeString(this.ORIGEN, dos);

				// String

				writeString(this.IS_MARKETPLACE, dos);

				// String

				writeString(this.IS_VEV_VENTA_EN_VERDE, dos);

				// String

				writeString(this.NOMBRE_COMERCIAL, dos);

				// String

				writeString(this.NOMBRE_PROVEEDOR, dos);

				// String

				writeString(this.RUT_PROVEEDOR, dos);

				// String

				writeString(this.DV, dos);

				// String

				writeString(this.PAIS_PROVEEDOR, dos);

				// String

				writeString(this.FONO, dos);

				// String

				writeString(this.FECHA_CREACION, dos);

				// String

				writeString(this.MAIL, dos);

				// String

				writeString(this.CONTACTO, dos);

				// String

				writeString(this.PAIS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DESCRIPCION_LINEA=" + DESCRIPCION_LINEA);
			sb.append(",LINEA=" + LINEA);
			sb.append(",DESCRIPCION_SUBLINEA=" + DESCRIPCION_SUBLINEA);
			sb.append(",SUBLINEA=" + SUBLINEA);
			sb.append(",DESCRIPCION_CLASE=" + DESCRIPCION_CLASE);
			sb.append(",CLASE=" + CLASE);
			sb.append(",DESCRIPCION_SUBCLASE=" + DESCRIPCION_SUBCLASE);
			sb.append(",SUBCLASE=" + SUBCLASE);
			sb.append(",FECHA_CREACION_SKU=" + FECHA_CREACION_SKU);
			sb.append(",Modelo=" + Modelo);
			sb.append(",EAN=" + EAN);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",MARCA=" + MARCA);
			sb.append(",COLOR_GROUP=" + COLOR_GROUP);
			sb.append(",TALLA=" + TALLA);
			sb.append(",TEMPORADA=" + TEMPORADA);
			sb.append(",SKU=" + SKU);
			sb.append(",ESTILO=" + ESTILO);
			sb.append(",ID_FAMILIA=" + ID_FAMILIA);
			sb.append(",FLAG_FOTO_INICIAL=" + FLAG_FOTO_INICIAL);
			sb.append(",FLAG_FOTO_FINAL=" + FLAG_FOTO_FINAL);
			sb.append(",URL_DE_LA_FOTO_1=" + URL_DE_LA_FOTO_1);
			sb.append(",URL_DE_LA_FOTO_2=" + URL_DE_LA_FOTO_2);
			sb.append(",URL_DE_LA_FOTO_3=" + URL_DE_LA_FOTO_3);
			sb.append(",URL_DE_LA_FOTO_4=" + URL_DE_LA_FOTO_4);
			sb.append(",URL_DE_LA_FOTO_5=" + URL_DE_LA_FOTO_5);
			sb.append(",ORIGEN=" + ORIGEN);
			sb.append(",IS_MARKETPLACE=" + IS_MARKETPLACE);
			sb.append(",IS_VEV_VENTA_EN_VERDE=" + IS_VEV_VENTA_EN_VERDE);
			sb.append(",NOMBRE_COMERCIAL=" + NOMBRE_COMERCIAL);
			sb.append(",NOMBRE_PROVEEDOR=" + NOMBRE_PROVEEDOR);
			sb.append(",RUT_PROVEEDOR=" + RUT_PROVEEDOR);
			sb.append(",DV=" + DV);
			sb.append(",PAIS_PROVEEDOR=" + PAIS_PROVEEDOR);
			sb.append(",FONO=" + FONO);
			sb.append(",FECHA_CREACION=" + FECHA_CREACION);
			sb.append(",MAIL=" + MAIL);
			sb.append(",CONTACTO=" + CONTACTO);
			sb.append(",PAIS=" + PAIS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputXML_1Process(globalMap);
				tFileInputXML_2Process(globalMap);

				excel1Struct excel1 = new excel1Struct();
				aceptadosStruct aceptados = new aceptadosStruct();
				row2Struct row2 = new row2Struct();
				convertidoStruct convertido = new convertidoStruct();
				row7Struct row7 = new row7Struct();
				row8Struct row8 = new row8Struct();
				row38Struct row38 = new row38Struct();
				row13Struct row13 = new row13Struct();
				row36Struct row36 = new row36Struct();
				row15Struct row15 = new row15Struct();
				row31Struct row31 = new row31Struct();
				row17Struct row17 = new row17Struct();
				row18Struct row18 = new row18Struct();
				rechazados2Struct rechazados2 = new rechazados2Struct();

				/**
				 * [tWriteXMLField_1_Out begin ] start
				 */

				ok_Hash.put("tWriteXMLField_1_Out", false);
				start_Hash.put("tWriteXMLField_1_Out",
						System.currentTimeMillis());

				currentVirtualComponent = "tWriteXMLField_1";

				currentComponent = "tWriteXMLField_1_Out";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tWriteXMLField_1_Out = 0;

				class BytesLimit65535_tWriteXMLField_1_Out {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tWriteXMLField_1_Out().limitLog4jByte();
				// tWriteXMLFieldOut_begin
				int nb_line_tWriteXMLField_1_Out = 0;
				boolean needRoot_tWriteXMLField_1_Out = true;

				String strCompCache_tWriteXMLField_1_Out = null;

				java.util.Queue<String> listGroupby_tWriteXMLField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<String>();

				class ThreadXMLField_tWriteXMLField_1_Out extends Thread {

					java.util.Queue<String> queue;

					java.util.List<java.util.Map<String, String>> flows;
					java.lang.Exception lastException;
					String currentComponent;

					ThreadXMLField_tWriteXMLField_1_Out(java.util.Queue q) {
						this.queue = q;
						globalMap.put("queue_tWriteXMLField_1_In", queue);
						lastException = null;
					}

					ThreadXMLField_tWriteXMLField_1_Out(java.util.Queue q,
							java.util.List<java.util.Map<String, String>> l) {
						this.queue = q;
						this.flows = l;
						lastException = null;
						globalMap.put("queue_tWriteXMLField_1_In", queue);
						globalMap.put("flows_tWriteXMLField_1_In", flows);
					}

					public java.lang.Exception getLastException() {
						return this.lastException;
					}

					public String getCurrentComponent() {
						return this.currentComponent;
					}

					@Override
					public void run() {
						try {
							tWriteXMLField_1_InProcess(globalMap);
						} catch (TalendException te) {
							this.lastException = te.getException();
							this.currentComponent = te.getCurrentComponent();
						}
					}
				}

				ThreadXMLField_tWriteXMLField_1_Out txf_tWriteXMLField_1_Out = new ThreadXMLField_tWriteXMLField_1_Out(
						listGroupby_tWriteXMLField_1_Out);

				txf_tWriteXMLField_1_Out.start();

				java.util.List<java.util.List<String>> groupbyList_tWriteXMLField_1_Out = new java.util.ArrayList<java.util.List<String>>();
				java.util.Map<String, String> valueMap_tWriteXMLField_1_Out = new java.util.HashMap<String, String>();

				java.util.List<String> endTabStrs_tWriteXMLField_1_Out = new java.util.ArrayList<String>();
				java.util.List<String> startTabStrs_tWriteXMLField_1_Out = new java.util.ArrayList<String>();
				endTabStrs_tWriteXMLField_1_Out.add("</soapenv:Envelope>");
				startTabStrs_tWriteXMLField_1_Out.add("\n<soapenv:Envelope>");
				endTabStrs_tWriteXMLField_1_Out.add("  </soapenv:Body>");
				startTabStrs_tWriteXMLField_1_Out.add("\n  <soapenv:Body>");
				endTabStrs_tWriteXMLField_1_Out.add("    </tem:saveEntity>");
				startTabStrs_tWriteXMLField_1_Out.add("\n    <tem:saveEntity>");
				endTabStrs_tWriteXMLField_1_Out.add("      </tem:entityInfo>");
				startTabStrs_tWriteXMLField_1_Out
						.add("\n      <tem:entityInfo>");
				endTabStrs_tWriteXMLField_1_Out.add("        </BizAgiWSParam>");
				startTabStrs_tWriteXMLField_1_Out
						.add("\n        <BizAgiWSParam>");
				endTabStrs_tWriteXMLField_1_Out.add("          </Entities>");
				startTabStrs_tWriteXMLField_1_Out.add("\n          <Entities>");
				int preUnNullMaxIndex_tWriteXMLField_1_Out = -1;
				int preNewTabIndex_tWriteXMLField_1_Out = -1;
				String[] startTabs_tWriteXMLField_1_Out = new String[endTabStrs_tWriteXMLField_1_Out
						.size()];
				String[] endTabs_tWriteXMLField_1_Out = new String[endTabStrs_tWriteXMLField_1_Out
						.size()];
				java.io.StringWriter strWriter_tWriteXMLField_1_Out = new java.io.StringWriter();
				java.io.BufferedWriter out_tWriteXMLField_1_Out = new java.io.BufferedWriter(
						strWriter_tWriteXMLField_1_Out);
				out_tWriteXMLField_1_Out
						.write("<?xml version=\"1.0\" encoding=\"" + "UTF-8"
								+ "\"?>");
				out_tWriteXMLField_1_Out.write("\n");

				/**
				 * [tWriteXMLField_1_Out begin ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_4 begin ] start
				 */

				ok_Hash.put("tAdvancedFileOutputXML_4", false);
				start_Hash.put("tAdvancedFileOutputXML_4",
						System.currentTimeMillis());

				currentComponent = "tAdvancedFileOutputXML_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row38" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedFileOutputXML_4 = 0;

				class BytesLimit65535_tAdvancedFileOutputXML_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedFileOutputXML_4().limitLog4jByte();

				int nb_line_tAFOX_4 = 0;

				boolean needRoot_tAFOX_4 = true;

				String fileName_tAFOX_4 = context.XMLTempAgrupado;
				Boolean alreadyExistsFile_tAFOX_4 = new java.io.File(
						fileName_tAFOX_4).exists();
				fileName_tAFOX_4 = new java.io.File(fileName_tAFOX_4)
						.getAbsolutePath().replace("\\", "/");

				String fileNameWithoutSuffix_tAFOX_4 = "";

				if (fileName_tAFOX_4.indexOf("/") < 0) {
					throw new IllegalArgumentException(
							"not a correct file name.");
				} else {
					String tail_tAFOX_4 = fileName_tAFOX_4
							.substring(fileName_tAFOX_4.lastIndexOf("/"));
					fileNameWithoutSuffix_tAFOX_4 = tail_tAFOX_4
							.lastIndexOf(".") > 0 ? fileName_tAFOX_4.substring(
							0, fileName_tAFOX_4.lastIndexOf("."))
							: fileName_tAFOX_4;
				}

				final String file_tAFOX_4 = fileNameWithoutSuffix_tAFOX_4;

				java.io.File createFiletAFOX_4 = new java.io.File(
						fileName_tAFOX_4);

				if (!createFiletAFOX_4.exists()) {
					(new java.io.File(fileName_tAFOX_4.substring(0,
							fileName_tAFOX_4.lastIndexOf("/")))).mkdirs();
					needRoot_tAFOX_4 = true;
				}

				java.util.List<java.util.List<String>> groupbyList_tAFOX_4 = new java.util.ArrayList<java.util.List<String>>();
				final java.util.Map<String, String> valueMap_tAFOX_4 = new java.util.HashMap<String, String>();

				java.util.List<String> endTabStrs_tAFOX_4 = new java.util.ArrayList<String>();
				java.util.List<String> startTabStrs_tAFOX_4 = new java.util.ArrayList<String>();

				endTabStrs_tAFOX_4.add("</Entities>");
				startTabStrs_tAFOX_4.add("\n<Entities>");

				endTabStrs_tAFOX_4.add("  </TablaProceso>");
				startTabStrs_tAFOX_4.add("\n  <TablaProceso>");

				endTabStrs_tAFOX_4.add("    </Productos>");
				startTabStrs_tAFOX_4.add("\n    <Productos>");

				int preUnNullMaxIndex_tAFOX_4 = -1;
				int preNewTabIndex_tAFOX_4 = -1;
				String[] startTabs_tAFOX_4 = new String[endTabStrs_tAFOX_4
						.size()];
				String[] endTabs_tAFOX_4 = new String[endTabStrs_tAFOX_4.size()];

				// String[] mainEndTabs_tAFOX_4 = new String[1];

				java.io.BufferedWriter out_tAFOX_4 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(fileName_tAFOX_4),
								"UTF-8"));

				out_tAFOX_4.write("<?xml version=\"1.0\" encoding=\"" + "UTF-8"
						+ "\"?>");
				out_tAFOX_4.newLine();

				/**
				 * [tAdvancedFileOutputXML_4 begin ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_3 begin ] start
				 */

				ok_Hash.put("tAdvancedFileOutputXML_3", false);
				start_Hash.put("tAdvancedFileOutputXML_3",
						System.currentTimeMillis());

				currentComponent = "tAdvancedFileOutputXML_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row36" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedFileOutputXML_3 = 0;

				class BytesLimit65535_tAdvancedFileOutputXML_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedFileOutputXML_3().limitLog4jByte();

				int nb_line_tAFOX_3 = 0;

				boolean needRoot_tAFOX_3 = true;

				String fileName_tAFOX_3 = context.XMLTempAgrupado;
				Boolean alreadyExistsFile_tAFOX_3 = new java.io.File(
						fileName_tAFOX_3).exists();
				fileName_tAFOX_3 = new java.io.File(fileName_tAFOX_3)
						.getAbsolutePath().replace("\\", "/");

				String fileNameWithoutSuffix_tAFOX_3 = "";

				if (fileName_tAFOX_3.indexOf("/") < 0) {
					throw new IllegalArgumentException(
							"not a correct file name.");
				} else {
					String tail_tAFOX_3 = fileName_tAFOX_3
							.substring(fileName_tAFOX_3.lastIndexOf("/"));
					fileNameWithoutSuffix_tAFOX_3 = tail_tAFOX_3
							.lastIndexOf(".") > 0 ? fileName_tAFOX_3.substring(
							0, fileName_tAFOX_3.lastIndexOf("."))
							: fileName_tAFOX_3;
				}

				final String file_tAFOX_3 = fileNameWithoutSuffix_tAFOX_3;

				java.io.File createFiletAFOX_3 = new java.io.File(
						fileName_tAFOX_3);

				if (!createFiletAFOX_3.exists()) {
					(new java.io.File(fileName_tAFOX_3.substring(0,
							fileName_tAFOX_3.lastIndexOf("/")))).mkdirs();
					needRoot_tAFOX_3 = true;
				}

				java.util.List<java.util.List<String>> groupbyList_tAFOX_3 = new java.util.ArrayList<java.util.List<String>>();
				final java.util.Map<String, String> valueMap_tAFOX_3 = new java.util.HashMap<String, String>();

				java.util.List<String> endTabStrs_tAFOX_3 = new java.util.ArrayList<String>();
				java.util.List<String> startTabStrs_tAFOX_3 = new java.util.ArrayList<String>();

				endTabStrs_tAFOX_3.add("</Entities>");
				startTabStrs_tAFOX_3.add("\n<Entities>");

				endTabStrs_tAFOX_3.add("  </TablaProceso>");
				startTabStrs_tAFOX_3.add("\n  <TablaProceso>");

				endTabStrs_tAFOX_3.add("    </Productos>");
				startTabStrs_tAFOX_3.add("\n    <Productos>");

				int preUnNullMaxIndex_tAFOX_3 = -1;
				int preNewTabIndex_tAFOX_3 = -1;
				String[] startTabs_tAFOX_3 = new String[endTabStrs_tAFOX_3
						.size()];
				String[] endTabs_tAFOX_3 = new String[endTabStrs_tAFOX_3.size()];

				// String[] mainEndTabs_tAFOX_3 = new String[1];

				java.io.BufferedWriter out_tAFOX_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(fileName_tAFOX_3),
								"UTF-8"));

				out_tAFOX_3.write("<?xml version=\"1.0\" encoding=\"" + "UTF-8"
						+ "\"?>");
				out_tAFOX_3.newLine();

				/**
				 * [tAdvancedFileOutputXML_3 begin ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_1 begin ] start
				 */

				ok_Hash.put("tAdvancedFileOutputXML_1", false);
				start_Hash.put("tAdvancedFileOutputXML_1",
						System.currentTimeMillis());

				currentComponent = "tAdvancedFileOutputXML_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row31" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedFileOutputXML_1 = 0;

				class BytesLimit65535_tAdvancedFileOutputXML_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedFileOutputXML_1().limitLog4jByte();

				int nb_line_tAFOX_1 = 0;

				boolean needRoot_tAFOX_1 = true;

				String fileName_tAFOX_1 = context.XMLTempAgrupado;
				Boolean alreadyExistsFile_tAFOX_1 = new java.io.File(
						fileName_tAFOX_1).exists();
				fileName_tAFOX_1 = new java.io.File(fileName_tAFOX_1)
						.getAbsolutePath().replace("\\", "/");

				String fileNameWithoutSuffix_tAFOX_1 = "";

				if (fileName_tAFOX_1.indexOf("/") < 0) {
					throw new IllegalArgumentException(
							"not a correct file name.");
				} else {
					String tail_tAFOX_1 = fileName_tAFOX_1
							.substring(fileName_tAFOX_1.lastIndexOf("/"));
					fileNameWithoutSuffix_tAFOX_1 = tail_tAFOX_1
							.lastIndexOf(".") > 0 ? fileName_tAFOX_1.substring(
							0, fileName_tAFOX_1.lastIndexOf("."))
							: fileName_tAFOX_1;
				}

				final String file_tAFOX_1 = fileNameWithoutSuffix_tAFOX_1;

				java.io.File createFiletAFOX_1 = new java.io.File(
						fileName_tAFOX_1);

				if (!createFiletAFOX_1.exists()) {
					(new java.io.File(fileName_tAFOX_1.substring(0,
							fileName_tAFOX_1.lastIndexOf("/")))).mkdirs();
					needRoot_tAFOX_1 = true;
				}

				java.util.List<java.util.List<String>> groupbyList_tAFOX_1 = new java.util.ArrayList<java.util.List<String>>();
				final java.util.Map<String, String> valueMap_tAFOX_1 = new java.util.HashMap<String, String>();

				java.util.List<String> endTabStrs_tAFOX_1 = new java.util.ArrayList<String>();
				java.util.List<String> startTabStrs_tAFOX_1 = new java.util.ArrayList<String>();

				endTabStrs_tAFOX_1.add("</Entities>");
				startTabStrs_tAFOX_1.add("\n<Entities>");

				endTabStrs_tAFOX_1.add("  </TablaProceso>");
				startTabStrs_tAFOX_1.add("\n  <TablaProceso>");

				endTabStrs_tAFOX_1.add("    </Productos>");
				startTabStrs_tAFOX_1.add("\n    <Productos>");

				int preUnNullMaxIndex_tAFOX_1 = -1;
				int preNewTabIndex_tAFOX_1 = -1;
				String[] startTabs_tAFOX_1 = new String[endTabStrs_tAFOX_1
						.size()];
				String[] endTabs_tAFOX_1 = new String[endTabStrs_tAFOX_1.size()];

				// String[] mainEndTabs_tAFOX_1 = new String[1];

				java.io.BufferedWriter out_tAFOX_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(fileName_tAFOX_1),
								"UTF-8"));

				out_tAFOX_1.write("<?xml version=\"1.0\" encoding=\"" + "UTF-8"
						+ "\"?>");
				out_tAFOX_1.newLine();

				/**
				 * [tAdvancedFileOutputXML_1 begin ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_2 begin ] start
				 */

				ok_Hash.put("tAdvancedFileOutputXML_2", false);
				start_Hash.put("tAdvancedFileOutputXML_2",
						System.currentTimeMillis());

				currentComponent = "tAdvancedFileOutputXML_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row18" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedFileOutputXML_2 = 0;

				class BytesLimit65535_tAdvancedFileOutputXML_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedFileOutputXML_2().limitLog4jByte();

				int nb_line_tAFOX_2 = 0;

				boolean needRoot_tAFOX_2 = true;

				String fileName_tAFOX_2 = context.XMLTempAgrupado;
				Boolean alreadyExistsFile_tAFOX_2 = new java.io.File(
						fileName_tAFOX_2).exists();
				fileName_tAFOX_2 = new java.io.File(fileName_tAFOX_2)
						.getAbsolutePath().replace("\\", "/");

				String fileNameWithoutSuffix_tAFOX_2 = "";

				if (fileName_tAFOX_2.indexOf("/") < 0) {
					throw new IllegalArgumentException(
							"not a correct file name.");
				} else {
					String tail_tAFOX_2 = fileName_tAFOX_2
							.substring(fileName_tAFOX_2.lastIndexOf("/"));
					fileNameWithoutSuffix_tAFOX_2 = tail_tAFOX_2
							.lastIndexOf(".") > 0 ? fileName_tAFOX_2.substring(
							0, fileName_tAFOX_2.lastIndexOf("."))
							: fileName_tAFOX_2;
				}

				final String file_tAFOX_2 = fileNameWithoutSuffix_tAFOX_2;

				java.io.File createFiletAFOX_2 = new java.io.File(
						fileName_tAFOX_2);

				if (!createFiletAFOX_2.exists()) {
					(new java.io.File(fileName_tAFOX_2.substring(0,
							fileName_tAFOX_2.lastIndexOf("/")))).mkdirs();
					needRoot_tAFOX_2 = true;
				}

				java.util.List<java.util.List<String>> groupbyList_tAFOX_2 = new java.util.ArrayList<java.util.List<String>>();
				final java.util.Map<String, String> valueMap_tAFOX_2 = new java.util.HashMap<String, String>();

				java.util.List<String> endTabStrs_tAFOX_2 = new java.util.ArrayList<String>();
				java.util.List<String> startTabStrs_tAFOX_2 = new java.util.ArrayList<String>();

				endTabStrs_tAFOX_2.add("</Entities>");
				startTabStrs_tAFOX_2.add("\n<Entities>");

				endTabStrs_tAFOX_2.add("  </TablaProceso>");
				startTabStrs_tAFOX_2.add("\n  <TablaProceso>");

				endTabStrs_tAFOX_2.add("    </Productos>");
				startTabStrs_tAFOX_2.add("\n    <Productos>");

				int preUnNullMaxIndex_tAFOX_2 = -1;
				int preNewTabIndex_tAFOX_2 = -1;
				String[] startTabs_tAFOX_2 = new String[endTabStrs_tAFOX_2
						.size()];
				String[] endTabs_tAFOX_2 = new String[endTabStrs_tAFOX_2.size()];

				// String[] mainEndTabs_tAFOX_2 = new String[1];

				java.io.BufferedWriter out_tAFOX_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(fileName_tAFOX_2),
								"UTF-8"));

				out_tAFOX_2.write("<?xml version=\"1.0\" encoding=\"" + "UTF-8"
						+ "\"?>");
				out_tAFOX_2.newLine();

				/**
				 * [tAdvancedFileOutputXML_2 begin ] stop
				 */

				/**
				 * [tFilterRow_5 begin ] start
				 */

				ok_Hash.put("tFilterRow_5", false);
				start_Hash.put("tFilterRow_5", System.currentTimeMillis());

				currentComponent = "tFilterRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row17" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterRow_5 = 0;

				class BytesLimit65535_tFilterRow_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFilterRow_5().limitLog4jByte();
				int nb_line_tFilterRow_5 = 0;
				int nb_line_ok_tFilterRow_5 = 0;
				int nb_line_reject_tFilterRow_5 = 0;

				class Operator_tFilterRow_5 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_5(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_5 begin ] stop
				 */

				/**
				 * [tFilterRow_4 begin ] start
				 */

				ok_Hash.put("tFilterRow_4", false);
				start_Hash.put("tFilterRow_4", System.currentTimeMillis());

				currentComponent = "tFilterRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row15" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterRow_4 = 0;

				class BytesLimit65535_tFilterRow_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFilterRow_4().limitLog4jByte();
				int nb_line_tFilterRow_4 = 0;
				int nb_line_ok_tFilterRow_4 = 0;
				int nb_line_reject_tFilterRow_4 = 0;

				class Operator_tFilterRow_4 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_4(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_4 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row13" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterRow_3 = 0;

				class BytesLimit65535_tFilterRow_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFilterRow_3().limitLog4jByte();
				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tFilterRow_2 = 0;

				class BytesLimit65535_tFilterRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFilterRow_2().limitLog4jByte();
				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"convertido" + iterateId, 0, 0);

					}
				}

				int tos_count_tFilterRow_1 = 0;

				class BytesLimit65535_tFilterRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFilterRow_1().limitLog4jByte();
				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_4 = 0;

				class BytesLimit65535_tMap_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_4().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
					java.util.Date FechaCreacionSKU;
					java.util.Date FechaCreacion;
					String URLFotos;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				convertidoStruct convertido_tmp = new convertidoStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tConvertType_1 begin ] start
				 */

				ok_Hash.put("tConvertType_1", false);
				start_Hash.put("tConvertType_1", System.currentTimeMillis());

				currentComponent = "tConvertType_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("aceptados" + iterateId,
								0, 0);

					}
				}

				int tos_count_tConvertType_1 = 0;

				class BytesLimit65535_tConvertType_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tConvertType_1().limitLog4jByte();
				int nb_line_tConvertType_1 = 0;

				/**
				 * [tConvertType_1 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash
						.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("rechazados2"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputExcel_1 = 0;

				class BytesLimit65535_tFileOutputExcel_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_1().limitLog4jByte();

				int columnIndex_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = context.ExcelRechazados;
				int nb_line_tFileOutputExcel_1 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_1.setSheet("Rechazados");
				xlsxTool_tFileOutputExcel_1.setAppend(true, true);
				xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_1.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_1
						.prepareXlsxFile(fileName_tFileOutputExcel_1);

				xlsxTool_tFileOutputExcel_1.setFont("");

				if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_1.addRow();

					xlsxTool_tFileOutputExcel_1
							.addCellValue("DESCRIPCION_LINEA");

					xlsxTool_tFileOutputExcel_1.addCellValue("LINEA");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("DESCRIPCION_SUBLINEA");

					xlsxTool_tFileOutputExcel_1.addCellValue("SUBLINEA");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("DESCRIPCION_CLASE");

					xlsxTool_tFileOutputExcel_1.addCellValue("CLASE");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("DESCRIPCION_SUBCLASE");

					xlsxTool_tFileOutputExcel_1.addCellValue("SUBCLASE");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("FECHA_CREACION_SKU");

					xlsxTool_tFileOutputExcel_1.addCellValue("Modelo");

					xlsxTool_tFileOutputExcel_1.addCellValue("EAN");

					xlsxTool_tFileOutputExcel_1.addCellValue("DESCRIPCION");

					xlsxTool_tFileOutputExcel_1.addCellValue("MARCA");

					xlsxTool_tFileOutputExcel_1.addCellValue("COLOR_GROUP");

					xlsxTool_tFileOutputExcel_1.addCellValue("TALLA");

					xlsxTool_tFileOutputExcel_1.addCellValue("TEMPORADA");

					xlsxTool_tFileOutputExcel_1.addCellValue("SKU");

					xlsxTool_tFileOutputExcel_1.addCellValue("ESTILO");

					xlsxTool_tFileOutputExcel_1.addCellValue("ID_FAMILIA");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("FLAG_FOTO_INICIAL");

					xlsxTool_tFileOutputExcel_1.addCellValue("FLAG_FOTO_FINAL");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("URL_DE_LA_FOTO_1");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("URL_DE_LA_FOTO_2");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("URL_DE_LA_FOTO_3");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("URL_DE_LA_FOTO_4");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("URL_DE_LA_FOTO_5");

					xlsxTool_tFileOutputExcel_1.addCellValue("ORIGEN");

					xlsxTool_tFileOutputExcel_1.addCellValue("IS_MARKETPLACE");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("IS_VEV_VENTA_EN_VERDE");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("NOMBRE_COMERCIAL");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("NOMBRE_PROVEEDOR");

					xlsxTool_tFileOutputExcel_1.addCellValue("RUT_PROVEEDOR");

					xlsxTool_tFileOutputExcel_1.addCellValue("DV");

					xlsxTool_tFileOutputExcel_1.addCellValue("PAIS_PROVEEDOR");

					xlsxTool_tFileOutputExcel_1.addCellValue("FONO");

					xlsxTool_tFileOutputExcel_1.addCellValue("FECHA_CREACION");

					xlsxTool_tFileOutputExcel_1.addCellValue("MAIL");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACTO");

					xlsxTool_tFileOutputExcel_1.addCellValue("PAIS");

					xlsxTool_tFileOutputExcel_1.addCellValue("MensajeError");

					nb_line_tFileOutputExcel_1++;

				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("excel1" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_3 = 0;

				class BytesLimit65535_tMap_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_3().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupOrigenStruct> tHash_Lookup_lookupOrigen = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupOrigenStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupOrigenStruct>) globalMap
						.get("tHash_Lookup_lookupOrigen"));

				lookupOrigenStruct lookupOrigenHashKey = new lookupOrigenStruct();
				lookupOrigenStruct lookupOrigenDefault = new lookupOrigenStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupFlagFotoStruct> tHash_Lookup_lookupFlagFoto = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupFlagFotoStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupFlagFotoStruct>) globalMap
						.get("tHash_Lookup_lookupFlagFoto"));

				lookupFlagFotoStruct lookupFlagFotoHashKey = new lookupFlagFotoStruct();
				lookupFlagFotoStruct lookupFlagFotoDefault = new lookupFlagFotoStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
					String MensajeErrorNulos;
					String MensajeErrorEspecial;
					String MensajeErrorParametricas;
					String MensajeError;
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				aceptadosStruct aceptados_tmp = new aceptadosStruct();
				rechazados2Struct rechazados2_tmp = new rechazados2Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				class BytesLimit65535_tFileInputExcel_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputExcel_1().limitLog4jByte();

				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							String oneSheetName, boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = context.ExcelImportacion;
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(String) source_tFileInputExcel_1);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(java.io.InputStream) source_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1) {
						sheetList_tFileInputExcel_1
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
					}
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1
										.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1
										.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1
									.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1
									.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1
								.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1
									&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1
									+ currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1
										.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET",
									sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1
												- rowCount_tFileInputExcel_1);
							}
							excel1 = null;
							int tempRowLength_tFileInputExcel_1 = 39;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1
										.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i
													+ start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1
												.getCellType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue()
													.getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue()
														.toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1
																.getNumericCellValue());
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1
															.getBooleanCellValue());
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
											switch (cell_tFileInputExcel_1
													.getCachedFormulaResultType()) {
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue()
														.getString();
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue()
															.toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1
																	.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1
																.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							excel1 = new excel1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "DESCRIPCION_LINEA";

									excel1.DESCRIPCION_LINEA = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.DESCRIPCION_LINEA = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "LINEA";

									excel1.LINEA = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.LINEA = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "DESCRIPCION_SUBLINEA";

									excel1.DESCRIPCION_SUBLINEA = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.DESCRIPCION_SUBLINEA = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "SUBLINEA";

									excel1.SUBLINEA = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.SUBLINEA = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "DESCRIPCION_CLASE";

									excel1.DESCRIPCION_CLASE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.DESCRIPCION_CLASE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "CLASE";

									excel1.CLASE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.CLASE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "DESCRIPCION_SUBCLASE";

									excel1.DESCRIPCION_SUBCLASE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.DESCRIPCION_SUBCLASE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "SUBCLASE";

									excel1.SUBCLASE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.SUBCLASE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "FECHA_CREACION_SKU";

									excel1.FECHA_CREACION_SKU = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.FECHA_CREACION_SKU = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "Modelo";

									excel1.Modelo = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.Modelo = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 10;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "EAN";

									excel1.EAN = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.EAN = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 11;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "DESCRIPCION";

									excel1.DESCRIPCION = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.DESCRIPCION = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 12;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "MARCA";

									excel1.MARCA = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.MARCA = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 13;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "COLOR_GROUP";

									excel1.COLOR_GROUP = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.COLOR_GROUP = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 14;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "TALLA";

									excel1.TALLA = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.TALLA = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 15;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "TEMPORADA";

									excel1.TEMPORADA = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.TEMPORADA = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 16;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "SKU";

									excel1.SKU = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.SKU = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 17;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "ESTILO";

									excel1.ESTILO = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.ESTILO = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 18;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "ID_FAMILIA";

									excel1.ID_FAMILIA = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.ID_FAMILIA = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 19;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "FLAG_FOTO_INICIAL";

									excel1.FLAG_FOTO_INICIAL = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.FLAG_FOTO_INICIAL = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 20;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "FLAG_FOTO_FINAL";

									excel1.FLAG_FOTO_FINAL = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.FLAG_FOTO_FINAL = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 21;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "URL_DE_LA_FOTO_1";

									excel1.URL_DE_LA_FOTO_1 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.URL_DE_LA_FOTO_1 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 22;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "URL_DE_LA_FOTO_2";

									excel1.URL_DE_LA_FOTO_2 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.URL_DE_LA_FOTO_2 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 23;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "URL_DE_LA_FOTO_3";

									excel1.URL_DE_LA_FOTO_3 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.URL_DE_LA_FOTO_3 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 24;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "URL_DE_LA_FOTO_4";

									excel1.URL_DE_LA_FOTO_4 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.URL_DE_LA_FOTO_4 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 25;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "URL_DE_LA_FOTO_5";

									excel1.URL_DE_LA_FOTO_5 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.URL_DE_LA_FOTO_5 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 26;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "ORIGEN";

									excel1.ORIGEN = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.ORIGEN = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 27;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "IS_MARKETPLACE";

									excel1.IS_MARKETPLACE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.IS_MARKETPLACE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 28;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "IS_VEV_VENTA_EN_VERDE";

									excel1.IS_VEV_VENTA_EN_VERDE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.IS_VEV_VENTA_EN_VERDE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 29;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "NOMBRE_COMERCIAL";

									excel1.NOMBRE_COMERCIAL = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.NOMBRE_COMERCIAL = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 30;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "NOMBRE_PROVEEDOR";

									excel1.NOMBRE_PROVEEDOR = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.NOMBRE_PROVEEDOR = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 31;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "RUT_PROVEEDOR";

									excel1.RUT_PROVEEDOR = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.RUT_PROVEEDOR = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 32;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "DV";

									excel1.DV = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.DV = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 33;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "PAIS_PROVEEDOR";

									excel1.PAIS_PROVEEDOR = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.PAIS_PROVEEDOR = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 34;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "FONO";

									excel1.FONO = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.FONO = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 35;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "FECHA_CREACION";

									excel1.FECHA_CREACION = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.FECHA_CREACION = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 36;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "MAIL";

									excel1.MAIL = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.MAIL = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 37;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "CONTACTO";

									excel1.CONTACTO = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.CONTACTO = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 38;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "PAIS";

									excel1.PAIS = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									excel1.PAIS = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								excel1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */
							// Start of branch "excel1"
							if (excel1 != null) {

								/**
								 * [tMap_3 main ] start
								 */

								currentComponent = "tMap_3";

								// excel1
								// excel1

								if (execStat) {
									runStat.updateStatOnConnection("excel1"
											+ iterateId, 1, 1);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3 = false;
								boolean mainRowRejected_tMap_3 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "lookupOrigen"
								// /////////////////////////////////////////////

								boolean forceLooplookupOrigen = false;

								lookupOrigenStruct lookupOrigenObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_3 = false;

									lookupOrigenHashKey.NombreOrigen = excel1.ORIGEN;

									lookupOrigenHashKey.hashCodeDirty = true;

									tHash_Lookup_lookupOrigen
											.lookup(lookupOrigenHashKey);

								} // G_TM_M_020

								if (tHash_Lookup_lookupOrigen != null
										&& tHash_Lookup_lookupOrigen
												.getCount(lookupOrigenHashKey) > 1) { // G
																						// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'lookupOrigen' and it contains more one result from keys :  lookupOrigen.NombreOrigen = '"
									// + lookupOrigenHashKey.NombreOrigen +
									// "'");
								} // G 071

								lookupOrigenStruct lookupOrigen = null;

								lookupOrigenStruct fromLookup_lookupOrigen = null;
								lookupOrigen = lookupOrigenDefault;

								if (tHash_Lookup_lookupOrigen != null
										&& tHash_Lookup_lookupOrigen.hasNext()) { // G
																					// 099

									fromLookup_lookupOrigen = tHash_Lookup_lookupOrigen
											.next();

								} // G 099

								if (fromLookup_lookupOrigen != null) {
									lookupOrigen = fromLookup_lookupOrigen;
								}

								// /////////////////////////////////////////////
								// Starting Lookup Table "lookupFlagFoto"
								// /////////////////////////////////////////////

								boolean forceLooplookupFlagFoto = false;

								lookupFlagFotoStruct lookupFlagFotoObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_3 = false;

									lookupFlagFotoHashKey.NombreFlagFoto = excel1.FLAG_FOTO_INICIAL;

									lookupFlagFotoHashKey.hashCodeDirty = true;

									tHash_Lookup_lookupFlagFoto
											.lookup(lookupFlagFotoHashKey);

								} // G_TM_M_020

								if (tHash_Lookup_lookupFlagFoto != null
										&& tHash_Lookup_lookupFlagFoto
												.getCount(lookupFlagFotoHashKey) > 1) { // G
																						// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'lookupFlagFoto' and it contains more one result from keys :  lookupFlagFoto.NombreFlagFoto = '"
									// + lookupFlagFotoHashKey.NombreFlagFoto +
									// "'");
								} // G 071

								lookupFlagFotoStruct lookupFlagFoto = null;

								lookupFlagFotoStruct fromLookup_lookupFlagFoto = null;
								lookupFlagFoto = lookupFlagFotoDefault;

								if (tHash_Lookup_lookupFlagFoto != null
										&& tHash_Lookup_lookupFlagFoto
												.hasNext()) { // G 099

									fromLookup_lookupFlagFoto = tHash_Lookup_lookupFlagFoto
											.next();

								} // G 099

								if (fromLookup_lookupFlagFoto != null) {
									lookupFlagFoto = fromLookup_lookupFlagFoto;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;
									Var.MensajeErrorNulos = (excel1.DESCRIPCION_LINEA == null
											|| excel1.DESCRIPCION_LINEA
													.equals("") ? "DESCRIPCION_LINEA no tiene datos | "
											: "")
											+ (excel1.LINEA == null
													|| excel1.LINEA.equals("") ? "LINEA no tiene datos | "
													: "")
											+ (excel1.DESCRIPCION_SUBLINEA == null
													|| excel1.DESCRIPCION_SUBLINEA
															.equals("") ? "DESCRIPCION_SUBLINEA no tiene datos | "
													: "")
											+ (excel1.SUBLINEA == null
													|| excel1.SUBLINEA
															.equals("") ? "SUBLINEA no tiene datos | "
													: "")
											+ (excel1.DESCRIPCION_CLASE == null
													|| excel1.DESCRIPCION_CLASE
															.equals("") ? "DESCRIPCION_CLASE no tiene datos | "
													: "")
											+ (excel1.CLASE == null
													|| excel1.CLASE.equals("") ? "CLASE no tiene datos | "
													: "")
											+ (excel1.DESCRIPCION_SUBCLASE == null
													|| excel1.DESCRIPCION_SUBCLASE
															.equals("") ? "DESCRIPCION_SUBCLASE no tiene datos | "
													: "")
											+ (excel1.SUBCLASE == null
													|| excel1.SUBCLASE
															.equals("") ? "SUBCLASE no tiene datos | "
													: "")
											+ (excel1.FECHA_CREACION_SKU == null
													|| excel1.FECHA_CREACION_SKU
															.equals("") ? "FECHA_CREACION_SKU no tiene datos | "
													: "")
											+ (excel1.Modelo == null
													|| excel1.Modelo.equals("") ? "Modelo no tiene datos | "
													: "")
											+ (excel1.EAN == null
													|| excel1.EAN.equals("") ? "EAN no tiene datos | "
													: "")
											+ (excel1.DESCRIPCION == null
													|| excel1.DESCRIPCION
															.equals("") ? "DESCRIPCION no tiene datos | "
													: "")
											+ (excel1.MARCA == null
													|| excel1.MARCA.equals("") ? "MARCA no tiene datos | "
													: "")
											+ (excel1.COLOR_GROUP == null
													|| excel1.COLOR_GROUP
															.equals("") ? "COLOR_GROUP no tiene datos | "
													: "")
											+ (excel1.TALLA == null
													|| excel1.TALLA.equals("") ? "TALLA no tiene datos | "
													: "")
											+ (excel1.TEMPORADA == null
													|| excel1.TEMPORADA
															.equals("") ? "TEMPORADA no tiene datos | "
													: "")
											+ (excel1.SKU == null
													|| excel1.SKU.equals("") ? "SKU no tiene datos | "
													: "")
											+ (excel1.ESTILO == null
													|| excel1.ESTILO.equals("") ? "ESTILO no tiene datos | "
													: "")
											+ (excel1.ID_FAMILIA == null
													|| excel1.ID_FAMILIA
															.equals("") ? "ID_FAMILIA no tiene datos | "
													: "")
											+ (excel1.FLAG_FOTO_INICIAL == null
													|| excel1.FLAG_FOTO_INICIAL
															.equals("") ? "FLAG_FOTO_INICIAL no tiene datos | "
													: "")
											+ (excel1.FLAG_FOTO_FINAL == null
													|| excel1.FLAG_FOTO_FINAL
															.equals("") ? "FLAG_FOTO_FINAL no tiene datos | "
													: "")
											+ (excel1.URL_DE_LA_FOTO_1 == null
													|| excel1.URL_DE_LA_FOTO_1
															.equals("") ? "URL_DE_LA_FOTO_1 no tiene datos | "
													: "")
											+ (excel1.URL_DE_LA_FOTO_2 == null
													|| excel1.URL_DE_LA_FOTO_2
															.equals("") ? "URL_DE_LA_FOTO_2 no tiene datos | "
													: "")
											+ (excel1.URL_DE_LA_FOTO_3 == null
													|| excel1.URL_DE_LA_FOTO_3
															.equals("") ? "URL_DE_LA_FOTO_3 no tiene datos | "
													: "")
											+ (excel1.URL_DE_LA_FOTO_4 == null
													|| excel1.URL_DE_LA_FOTO_4
															.equals("") ? "URL_DE_LA_FOTO_4 no tiene datos | "
													: "")
											+ (excel1.URL_DE_LA_FOTO_5 == null
													|| excel1.URL_DE_LA_FOTO_5
															.equals("") ? "URL_DE_LA_FOTO_5 no tiene datos | "
													: "")
											+ (excel1.ORIGEN == null
													|| excel1.ORIGEN.equals("") ? "ORIGEN no tiene datos | "
													: "")
											+ (excel1.IS_MARKETPLACE == null
													|| excel1.IS_MARKETPLACE
															.equals("") ? "IS_MARKETPLACE no tiene datos | "
													: "")
											+ (excel1.IS_VEV_VENTA_EN_VERDE == null
													|| excel1.IS_VEV_VENTA_EN_VERDE
															.equals("") ? "IS_VEV_VENTA_EN_VERDE no tiene datos | "
													: "")
											+ (excel1.NOMBRE_COMERCIAL == null
													|| excel1.NOMBRE_COMERCIAL
															.equals("") ? "NOMBRE_COMERCIAL no tiene datos | "
													: "")
											+ (excel1.NOMBRE_PROVEEDOR == null
													|| excel1.NOMBRE_PROVEEDOR
															.equals("") ? "NOMBRE_PROVEEDOR no tiene datos | "
													: "")
											+ (excel1.RUT_PROVEEDOR == null
													|| excel1.RUT_PROVEEDOR
															.equals("") ? "RUT_PROVEEDOR no tiene datos | "
													: "")
											+ (excel1.DV == null
													|| excel1.DV.equals("") ? "DV no tiene datos | "
													: "")
											+ (excel1.PAIS_PROVEEDOR == null
													|| excel1.PAIS_PROVEEDOR
															.equals("") ? "PAIS_PROVEEDOR no tiene datos | "
													: "")
											+ (excel1.FONO == null
													|| excel1.FONO.equals("") ? "FONO no tiene datos | "
													: "")
											+ (excel1.FECHA_CREACION == null
													|| excel1.FECHA_CREACION
															.equals("") ? "FECHA_CREACION no tiene datos | "
													: "")
											+ (excel1.MAIL == null
													|| excel1.MAIL.equals("") ? "MAIL no tiene datos | "
													: "")
											+ (excel1.CONTACTO == null
													|| excel1.CONTACTO
															.equals("") ? "CONTACTO no tiene datos | "
													: "")
											+ (excel1.PAIS == null
													|| excel1.PAIS.equals("") ? "PAIS no tiene datos | "
													: "");
									Var.MensajeErrorEspecial = ((!excel1.IS_MARKETPLACE
											.toLowerCase().equals("true") && !excel1.IS_MARKETPLACE
											.toLowerCase().equals("false")) ? "Valor invalido para IS_MARKETPLACE (true o false)| "
											: "")
											+ ((excel1.IS_VEV_VENTA_EN_VERDE
													.toLowerCase().equals(
															"true") && excel1.IS_VEV_VENTA_EN_VERDE
													.toLowerCase().equals(
															"false")) ? "Valor invalido para IS_VEV_VENTA_EN_VERDE (true o false)| "
													: "")
											+ (!excel1.EAN.matches("[0-9]+") ? "Solo se permiten numeros en EAN | "
													: "");
									Var.MensajeErrorParametricas = ((lookupOrigen.ID_Origen == null || lookupOrigen.ID_Origen == 0) ? "Valor de ORIGEN no encontrado en Bizagi | "
											: "")
											+ ((lookupFlagFoto.ID_FlagFoto == null || lookupFlagFoto.ID_FlagFoto == 0) ? "Valor de FLAG FOTO INICIAL no encontrado en Bizagi | "
													: "");
									Var.MensajeError = Var.MensajeErrorNulos
											+ Var.MensajeErrorEspecial
											+ Var.MensajeErrorParametricas;// ###############################
									// ###############################
									// # Output tables

									aceptados = null;
									rechazados2 = null;

									boolean rejected_tMap_3 = true;

									// # Output table : 'aceptados'
									// # Filter conditions
									if (

									Var.MensajeError.equals("")

									) {
										rejected_tMap_3 = false;
										aceptados_tmp.DESCRIPCION_LINEA = excel1.DESCRIPCION_LINEA;
										aceptados_tmp.LINEA = excel1.LINEA;
										aceptados_tmp.DESCRIPCION_SUBLINEA = excel1.DESCRIPCION_SUBLINEA;
										aceptados_tmp.SUBLINEA = excel1.SUBLINEA;
										aceptados_tmp.DESCRIPCION_CLASE = excel1.DESCRIPCION_CLASE;
										aceptados_tmp.CLASE = excel1.CLASE;
										aceptados_tmp.DESCRIPCION_SUBCLASE = excel1.DESCRIPCION_SUBCLASE;
										aceptados_tmp.SUBCLASE = excel1.SUBCLASE;
										aceptados_tmp.FECHA_CREACION_SKU = excel1.FECHA_CREACION_SKU;
										aceptados_tmp.Modelo = excel1.Modelo;
										aceptados_tmp.EAN = excel1.EAN;
										aceptados_tmp.DESCRIPCION = excel1.DESCRIPCION;
										aceptados_tmp.MARCA = excel1.MARCA;
										aceptados_tmp.COLOR_GROUP = excel1.COLOR_GROUP;
										aceptados_tmp.TALLA = excel1.TALLA;
										aceptados_tmp.TEMPORADA = excel1.TEMPORADA;
										aceptados_tmp.SKU = excel1.SKU;
										aceptados_tmp.ESTILO = excel1.ESTILO;
										aceptados_tmp.ID_FAMILIA = excel1.ID_FAMILIA;
										aceptados_tmp.FLAG_FOTO_INICIAL = excel1.FLAG_FOTO_INICIAL;
										aceptados_tmp.FLAG_FOTO_FINAL = excel1.FLAG_FOTO_FINAL;
										aceptados_tmp.URL_DE_LA_FOTO_1 = excel1.URL_DE_LA_FOTO_1;
										aceptados_tmp.URL_DE_LA_FOTO_2 = excel1.URL_DE_LA_FOTO_2;
										aceptados_tmp.URL_DE_LA_FOTO_3 = excel1.URL_DE_LA_FOTO_3;
										aceptados_tmp.URL_DE_LA_FOTO_4 = excel1.URL_DE_LA_FOTO_4;
										aceptados_tmp.URL_DE_LA_FOTO_5 = excel1.URL_DE_LA_FOTO_5;
										aceptados_tmp.ORIGEN = excel1.ORIGEN;
										aceptados_tmp.IS_MARKETPLACE = excel1.IS_MARKETPLACE;
										aceptados_tmp.IS_VEV_VENTA_EN_VERDE = excel1.IS_VEV_VENTA_EN_VERDE;
										aceptados_tmp.NOMBRE_COMERCIAL = excel1.NOMBRE_COMERCIAL;
										aceptados_tmp.NOMBRE_PROVEEDOR = excel1.NOMBRE_PROVEEDOR;
										aceptados_tmp.RUT_PROVEEDOR = excel1.RUT_PROVEEDOR;
										aceptados_tmp.DV = excel1.DV;
										aceptados_tmp.PAIS_PROVEEDOR = excel1.PAIS_PROVEEDOR;
										aceptados_tmp.FONO = excel1.FONO;
										aceptados_tmp.FECHA_CREACION = excel1.FECHA_CREACION;
										aceptados_tmp.MAIL = excel1.MAIL;
										aceptados_tmp.CONTACTO = excel1.CONTACTO;
										aceptados_tmp.PAIS = excel1.PAIS;
										aceptados_tmp.ID_Origen = lookupOrigen.ID_Origen;
										aceptados_tmp.ID_FlagFoto = lookupFlagFoto.ID_FlagFoto;
										aceptados = aceptados_tmp;
									} // closing filter/reject
										// ###### START REJECTS #####

									// # Output reject table : 'rechazados2'
									// # Filter conditions
									if (rejected_tMap_3) {
										rechazados2_tmp.DESCRIPCION_LINEA = excel1.DESCRIPCION_LINEA;
										rechazados2_tmp.LINEA = excel1.LINEA;
										rechazados2_tmp.DESCRIPCION_SUBLINEA = excel1.DESCRIPCION_SUBLINEA;
										rechazados2_tmp.SUBLINEA = excel1.SUBLINEA;
										rechazados2_tmp.DESCRIPCION_CLASE = excel1.DESCRIPCION_CLASE;
										rechazados2_tmp.CLASE = excel1.CLASE;
										rechazados2_tmp.DESCRIPCION_SUBCLASE = excel1.DESCRIPCION_SUBCLASE;
										rechazados2_tmp.SUBCLASE = excel1.SUBCLASE;
										rechazados2_tmp.FECHA_CREACION_SKU = excel1.FECHA_CREACION_SKU;
										rechazados2_tmp.Modelo = excel1.Modelo;
										rechazados2_tmp.EAN = excel1.EAN;
										rechazados2_tmp.DESCRIPCION = excel1.DESCRIPCION;
										rechazados2_tmp.MARCA = excel1.MARCA;
										rechazados2_tmp.COLOR_GROUP = excel1.COLOR_GROUP;
										rechazados2_tmp.TALLA = excel1.TALLA;
										rechazados2_tmp.TEMPORADA = excel1.TEMPORADA;
										rechazados2_tmp.SKU = excel1.SKU;
										rechazados2_tmp.ESTILO = excel1.ESTILO;
										rechazados2_tmp.ID_FAMILIA = excel1.ID_FAMILIA;
										rechazados2_tmp.FLAG_FOTO_INICIAL = excel1.FLAG_FOTO_INICIAL;
										rechazados2_tmp.FLAG_FOTO_FINAL = excel1.FLAG_FOTO_FINAL;
										rechazados2_tmp.URL_DE_LA_FOTO_1 = excel1.URL_DE_LA_FOTO_1;
										rechazados2_tmp.URL_DE_LA_FOTO_2 = excel1.URL_DE_LA_FOTO_2;
										rechazados2_tmp.URL_DE_LA_FOTO_3 = excel1.URL_DE_LA_FOTO_3;
										rechazados2_tmp.URL_DE_LA_FOTO_4 = excel1.URL_DE_LA_FOTO_4;
										rechazados2_tmp.URL_DE_LA_FOTO_5 = excel1.URL_DE_LA_FOTO_5;
										rechazados2_tmp.ORIGEN = excel1.ORIGEN;
										rechazados2_tmp.IS_MARKETPLACE = excel1.IS_MARKETPLACE;
										rechazados2_tmp.IS_VEV_VENTA_EN_VERDE = excel1.IS_VEV_VENTA_EN_VERDE;
										rechazados2_tmp.NOMBRE_COMERCIAL = excel1.NOMBRE_COMERCIAL;
										rechazados2_tmp.NOMBRE_PROVEEDOR = excel1.NOMBRE_PROVEEDOR;
										rechazados2_tmp.RUT_PROVEEDOR = excel1.RUT_PROVEEDOR;
										rechazados2_tmp.DV = excel1.DV;
										rechazados2_tmp.PAIS_PROVEEDOR = excel1.PAIS_PROVEEDOR;
										rechazados2_tmp.FONO = excel1.FONO;
										rechazados2_tmp.FECHA_CREACION = excel1.FECHA_CREACION;
										rechazados2_tmp.MAIL = excel1.MAIL;
										rechazados2_tmp.CONTACTO = excel1.CONTACTO;
										rechazados2_tmp.PAIS = excel1.PAIS;
										rechazados2_tmp.MensajeError = Var.MensajeError;
										rechazados2 = rechazados2_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */
								// Start of branch "aceptados"
								if (aceptados != null) {

									/**
									 * [tConvertType_1 main ] start
									 */

									currentComponent = "tConvertType_1";

									// aceptados
									// aceptados

									if (execStat) {
										runStat.updateStatOnConnection(
												"aceptados" + iterateId, 1, 1);
									}

									row2 = new row2Struct();
									boolean bHasError_tConvertType_1 = false;
									try {
										row2.DESCRIPCION_LINEA = TypeConvert
												.String2String(aceptados.DESCRIPCION_LINEA);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.LINEA = TypeConvert
												.String2String(aceptados.LINEA);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.DESCRIPCION_SUBLINEA = TypeConvert
												.String2String(aceptados.DESCRIPCION_SUBLINEA);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.SUBLINEA = TypeConvert
												.String2String(aceptados.SUBLINEA);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.DESCRIPCION_CLASE = TypeConvert
												.String2String(aceptados.DESCRIPCION_CLASE);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.CLASE = TypeConvert
												.String2String(aceptados.CLASE);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.DESCRIPCION_SUBCLASE = TypeConvert
												.String2String(aceptados.DESCRIPCION_SUBCLASE);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.SUBCLASE = TypeConvert
												.String2String(aceptados.SUBCLASE);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.FECHA_CREACION_SKU = TypeConvert
												.String2String(aceptados.FECHA_CREACION_SKU);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.Modelo = TypeConvert
												.String2String(aceptados.Modelo);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.EAN = TypeConvert
												.String2String(aceptados.EAN);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.DESCRIPCION = TypeConvert
												.String2String(aceptados.DESCRIPCION);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.MARCA = TypeConvert
												.String2String(aceptados.MARCA);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.COLOR_GROUP = TypeConvert
												.String2String(aceptados.COLOR_GROUP);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.TALLA = TypeConvert
												.String2String(aceptados.TALLA);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.TEMPORADA = TypeConvert
												.String2String(aceptados.TEMPORADA);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.SKU = TypeConvert
												.String2String(aceptados.SKU);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.ESTILO = TypeConvert
												.String2String(aceptados.ESTILO);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.ID_FAMILIA = TypeConvert
												.String2String(aceptados.ID_FAMILIA);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.FLAG_FOTO_INICIAL = TypeConvert
												.String2String(aceptados.FLAG_FOTO_INICIAL);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.FLAG_FOTO_FINAL = TypeConvert
												.String2String(aceptados.FLAG_FOTO_FINAL);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.URL_DE_LA_FOTO_1 = TypeConvert
												.String2String(aceptados.URL_DE_LA_FOTO_1);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.URL_DE_LA_FOTO_2 = TypeConvert
												.String2String(aceptados.URL_DE_LA_FOTO_2);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.URL_DE_LA_FOTO_3 = TypeConvert
												.String2String(aceptados.URL_DE_LA_FOTO_3);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.URL_DE_LA_FOTO_4 = TypeConvert
												.String2String(aceptados.URL_DE_LA_FOTO_4);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.URL_DE_LA_FOTO_5 = TypeConvert
												.String2String(aceptados.URL_DE_LA_FOTO_5);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.ORIGEN = TypeConvert
												.String2String(aceptados.ORIGEN);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.IS_MARKETPLACE = TypeConvert
												.String2Boolean(aceptados.IS_MARKETPLACE);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.IS_VEV_VENTA_EN_VERDE = TypeConvert
												.String2Boolean(aceptados.IS_VEV_VENTA_EN_VERDE);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.NOMBRE_COMERCIAL = TypeConvert
												.String2String(aceptados.NOMBRE_COMERCIAL);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.NOMBRE_PROVEEDOR = TypeConvert
												.String2String(aceptados.NOMBRE_PROVEEDOR);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.RUT_PROVEEDOR = TypeConvert
												.String2String(aceptados.RUT_PROVEEDOR);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.DV = TypeConvert
												.String2String(aceptados.DV);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.PAIS_PROVEEDOR = TypeConvert
												.String2String(aceptados.PAIS_PROVEEDOR);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.FONO = TypeConvert
												.String2String(aceptados.FONO);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.FECHA_CREACION = TypeConvert
												.String2String(aceptados.FECHA_CREACION);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.MAIL = TypeConvert
												.String2String(aceptados.MAIL);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.CONTACTO = TypeConvert
												.String2String(aceptados.CONTACTO);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.PAIS = TypeConvert
												.String2String(aceptados.PAIS);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.ID_Origen = TypeConvert
												.Integer2Integer(aceptados.ID_Origen);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									try {
										row2.ID_FlagFoto = TypeConvert
												.Integer2Integer(aceptados.ID_FlagFoto);
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										System.err.println(e.getMessage());
									}
									if (bHasError_tConvertType_1) {
										row2 = null;
									}

									nb_line_tConvertType_1++;

									tos_count_tConvertType_1++;

									/**
									 * [tConvertType_1 main ] stop
									 */
									// Start of branch "row2"
									if (row2 != null) {

										/**
										 * [tMap_4 main ] start
										 */

										currentComponent = "tMap_4";

										// row2
										// row2

										if (execStat) {
											runStat.updateStatOnConnection(
													"row2" + iterateId, 1, 1);
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_4 = false;
										boolean mainRowRejected_tMap_4 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_4__Struct Var = Var__tMap_4;
											Var.FechaCreacionSKU = row2.FECHA_CREACION_SKU != null ? TalendDate
													.parseDateLocale(
															"EEE MMM dd HH:mm:ss zzz yyyy",
															row2.FECHA_CREACION_SKU,
															"EN")
													: null;
											Var.FechaCreacion = row2.FECHA_CREACION != null ? TalendDate
													.parseDateLocale(
															"EEE MMM dd HH:mm:ss zzz yyyy",
															row2.FECHA_CREACION,
															"EN")
													: null;
											Var.URLFotos = ((!row2.URL_DE_LA_FOTO_1
													.equals("")) ? (row2.URL_DE_LA_FOTO_1)
													+ "|"
													: "")
													+ ((!row2.URL_DE_LA_FOTO_2
															.equals("")) ? (row2.URL_DE_LA_FOTO_2)
															+ "|"
															: "")
													+ ((!row2.URL_DE_LA_FOTO_3
															.equals("")) ? (row2.URL_DE_LA_FOTO_3)
															+ "|"
															: "")
													+ ((!row2.URL_DE_LA_FOTO_4
															.equals("")) ? (row2.URL_DE_LA_FOTO_4)
															+ "|"
															: "")
													+ ((!row2.URL_DE_LA_FOTO_5
															.equals("")) ? (row2.URL_DE_LA_FOTO_5)
															: "");// ###############################
																	// ###############################
																	// # Output
																	// tables

											convertido = null;

											// # Output table : 'convertido'
											convertido_tmp.DESCRIPCION_LINEA = row2.DESCRIPCION_LINEA;
											convertido_tmp.LINEA = row2.LINEA;
											convertido_tmp.DESCRIPCION_SUBLINEA = row2.DESCRIPCION_SUBLINEA;
											convertido_tmp.SUBLINEA = row2.SUBLINEA;
											convertido_tmp.DESCRIPCION_CLASE = row2.DESCRIPCION_CLASE;
											convertido_tmp.CLASE = row2.CLASE;
											convertido_tmp.DESCRIPCION_SUBCLASE = row2.DESCRIPCION_SUBCLASE;
											convertido_tmp.SUBCLASE = row2.SUBCLASE;
											convertido_tmp.FECHA_CREACION_SKU = Var.FechaCreacionSKU;
											convertido_tmp.Modelo = row2.Modelo;
											convertido_tmp.EAN = row2.EAN;
											convertido_tmp.DESCRIPCION = row2.DESCRIPCION;
											convertido_tmp.MARCA = row2.MARCA;
											convertido_tmp.COLOR_GROUP = row2.COLOR_GROUP;
											convertido_tmp.TALLA = row2.TALLA;
											convertido_tmp.TEMPORADA = row2.TEMPORADA;
											convertido_tmp.SKU = row2.SKU;
											convertido_tmp.ESTILO = row2.ESTILO;
											convertido_tmp.ID_FAMILIA = row2.ID_FAMILIA;
											convertido_tmp.FLAG_FOTO_INICIAL = row2.FLAG_FOTO_INICIAL;
											convertido_tmp.FLAG_FOTO_FINAL = row2.FLAG_FOTO_FINAL;
											convertido_tmp.URL_DE_LA_FOTO_1 = row2.URL_DE_LA_FOTO_1;
											convertido_tmp.URL_DE_LA_FOTO_2 = row2.URL_DE_LA_FOTO_2;
											convertido_tmp.URL_DE_LA_FOTO_3 = row2.URL_DE_LA_FOTO_3;
											convertido_tmp.URL_DE_LA_FOTO_4 = row2.URL_DE_LA_FOTO_4;
											convertido_tmp.URL_DE_LA_FOTO_5 = row2.URL_DE_LA_FOTO_5;
											convertido_tmp.ORIGEN = row2.ORIGEN;
											convertido_tmp.IS_MARKETPLACE = row2.IS_MARKETPLACE;
											convertido_tmp.IS_VEV_VENTA_EN_VERDE = row2.IS_VEV_VENTA_EN_VERDE;
											convertido_tmp.NOMBRE_COMERCIAL = row2.NOMBRE_COMERCIAL;
											convertido_tmp.NOMBRE_PROVEEDOR = row2.NOMBRE_PROVEEDOR;
											convertido_tmp.RUT_PROVEEDOR = row2.RUT_PROVEEDOR;
											convertido_tmp.DV = row2.DV;
											convertido_tmp.PAIS_PROVEEDOR = row2.PAIS_PROVEEDOR;
											convertido_tmp.FONO = row2.FONO;
											convertido_tmp.FECHA_CREACION = Var.FechaCreacion;
											convertido_tmp.MAIL = row2.MAIL;
											convertido_tmp.CONTACTO = row2.CONTACTO;
											convertido_tmp.PAIS = row2.PAIS;
											convertido_tmp.ID_Origen = row2.ID_Origen;
											convertido_tmp.ID_FlagFoto = row2.ID_FlagFoto;
											convertido_tmp.URLFotos = Var.URLFotos;
											convertido = convertido_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_4 = false;

										tos_count_tMap_4++;

										/**
										 * [tMap_4 main ] stop
										 */
										// Start of branch "convertido"
										if (convertido != null) {

											/**
											 * [tFilterRow_1 main ] start
											 */

											currentComponent = "tFilterRow_1";

											// convertido
											// convertido

											if (execStat) {
												runStat.updateStatOnConnection(
														"convertido"
																+ iterateId, 1,
														1);
											}

											row8 = null;
											row7 = null;
											Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
													"&&");
											ope_tFilterRow_1
													.matches(
															(// Origen IMPORTADO
															(convertido.ID_Origen == 2) &&
															// Flag foto MUESTRA
															(convertido.ID_FlagFoto == 1)),
															"advanced condition failed");

											if (ope_tFilterRow_1.getMatchFlag()) {
												if (row7 == null) {
													row7 = new row7Struct();
												}
												row7.DESCRIPCION_LINEA = convertido.DESCRIPCION_LINEA;
												row7.LINEA = convertido.LINEA;
												row7.DESCRIPCION_SUBLINEA = convertido.DESCRIPCION_SUBLINEA;
												row7.SUBLINEA = convertido.SUBLINEA;
												row7.DESCRIPCION_CLASE = convertido.DESCRIPCION_CLASE;
												row7.CLASE = convertido.CLASE;
												row7.DESCRIPCION_SUBCLASE = convertido.DESCRIPCION_SUBCLASE;
												row7.SUBCLASE = convertido.SUBCLASE;
												row7.FECHA_CREACION_SKU = convertido.FECHA_CREACION_SKU;
												row7.Modelo = convertido.Modelo;
												row7.EAN = convertido.EAN;
												row7.DESCRIPCION = convertido.DESCRIPCION;
												row7.MARCA = convertido.MARCA;
												row7.COLOR_GROUP = convertido.COLOR_GROUP;
												row7.TALLA = convertido.TALLA;
												row7.TEMPORADA = convertido.TEMPORADA;
												row7.SKU = convertido.SKU;
												row7.ESTILO = convertido.ESTILO;
												row7.ID_FAMILIA = convertido.ID_FAMILIA;
												row7.FLAG_FOTO_INICIAL = convertido.FLAG_FOTO_INICIAL;
												row7.FLAG_FOTO_FINAL = convertido.FLAG_FOTO_FINAL;
												row7.URL_DE_LA_FOTO_1 = convertido.URL_DE_LA_FOTO_1;
												row7.URL_DE_LA_FOTO_2 = convertido.URL_DE_LA_FOTO_2;
												row7.URL_DE_LA_FOTO_3 = convertido.URL_DE_LA_FOTO_3;
												row7.URL_DE_LA_FOTO_4 = convertido.URL_DE_LA_FOTO_4;
												row7.URL_DE_LA_FOTO_5 = convertido.URL_DE_LA_FOTO_5;
												row7.ORIGEN = convertido.ORIGEN;
												row7.IS_MARKETPLACE = convertido.IS_MARKETPLACE;
												row7.IS_VEV_VENTA_EN_VERDE = convertido.IS_VEV_VENTA_EN_VERDE;
												row7.NOMBRE_COMERCIAL = convertido.NOMBRE_COMERCIAL;
												row7.NOMBRE_PROVEEDOR = convertido.NOMBRE_PROVEEDOR;
												row7.RUT_PROVEEDOR = convertido.RUT_PROVEEDOR;
												row7.DV = convertido.DV;
												row7.PAIS_PROVEEDOR = convertido.PAIS_PROVEEDOR;
												row7.FONO = convertido.FONO;
												row7.FECHA_CREACION = convertido.FECHA_CREACION;
												row7.MAIL = convertido.MAIL;
												row7.CONTACTO = convertido.CONTACTO;
												row7.PAIS = convertido.PAIS;
												row7.ID_Origen = convertido.ID_Origen;
												row7.ID_FlagFoto = convertido.ID_FlagFoto;
												row7.URLFotos = convertido.URLFotos;
												nb_line_ok_tFilterRow_1++;
											} else {
												if (row8 == null) {
													row8 = new row8Struct();
												}
												row8.DESCRIPCION_LINEA = convertido.DESCRIPCION_LINEA;
												row8.LINEA = convertido.LINEA;
												row8.DESCRIPCION_SUBLINEA = convertido.DESCRIPCION_SUBLINEA;
												row8.SUBLINEA = convertido.SUBLINEA;
												row8.DESCRIPCION_CLASE = convertido.DESCRIPCION_CLASE;
												row8.CLASE = convertido.CLASE;
												row8.DESCRIPCION_SUBCLASE = convertido.DESCRIPCION_SUBCLASE;
												row8.SUBCLASE = convertido.SUBCLASE;
												row8.FECHA_CREACION_SKU = convertido.FECHA_CREACION_SKU;
												row8.Modelo = convertido.Modelo;
												row8.EAN = convertido.EAN;
												row8.DESCRIPCION = convertido.DESCRIPCION;
												row8.MARCA = convertido.MARCA;
												row8.COLOR_GROUP = convertido.COLOR_GROUP;
												row8.TALLA = convertido.TALLA;
												row8.TEMPORADA = convertido.TEMPORADA;
												row8.SKU = convertido.SKU;
												row8.ESTILO = convertido.ESTILO;
												row8.ID_FAMILIA = convertido.ID_FAMILIA;
												row8.FLAG_FOTO_INICIAL = convertido.FLAG_FOTO_INICIAL;
												row8.FLAG_FOTO_FINAL = convertido.FLAG_FOTO_FINAL;
												row8.URL_DE_LA_FOTO_1 = convertido.URL_DE_LA_FOTO_1;
												row8.URL_DE_LA_FOTO_2 = convertido.URL_DE_LA_FOTO_2;
												row8.URL_DE_LA_FOTO_3 = convertido.URL_DE_LA_FOTO_3;
												row8.URL_DE_LA_FOTO_4 = convertido.URL_DE_LA_FOTO_4;
												row8.URL_DE_LA_FOTO_5 = convertido.URL_DE_LA_FOTO_5;
												row8.ORIGEN = convertido.ORIGEN;
												row8.IS_MARKETPLACE = convertido.IS_MARKETPLACE;
												row8.IS_VEV_VENTA_EN_VERDE = convertido.IS_VEV_VENTA_EN_VERDE;
												row8.NOMBRE_COMERCIAL = convertido.NOMBRE_COMERCIAL;
												row8.NOMBRE_PROVEEDOR = convertido.NOMBRE_PROVEEDOR;
												row8.RUT_PROVEEDOR = convertido.RUT_PROVEEDOR;
												row8.DV = convertido.DV;
												row8.PAIS_PROVEEDOR = convertido.PAIS_PROVEEDOR;
												row8.FONO = convertido.FONO;
												row8.FECHA_CREACION = convertido.FECHA_CREACION;
												row8.MAIL = convertido.MAIL;
												row8.CONTACTO = convertido.CONTACTO;
												row8.PAIS = convertido.PAIS;
												row8.ID_Origen = convertido.ID_Origen;
												row8.ID_FlagFoto = convertido.ID_FlagFoto;
												row8.URLFotos = convertido.URLFotos;
												row8.errorMessage = ope_tFilterRow_1
														.getErrorMsg();
												nb_line_reject_tFilterRow_1++;
											}

											nb_line_tFilterRow_1++;

											tos_count_tFilterRow_1++;

											/**
											 * [tFilterRow_1 main ] stop
											 */
											// Start of branch "row7"
											if (row7 != null) {

												/**
												 * [tWriteXMLField_1_Out main ]
												 * start
												 */

												currentVirtualComponent = "tWriteXMLField_1";

												currentComponent = "tWriteXMLField_1_Out";

												// row7
												// row7

												if (execStat) {
													runStat.updateStatOnConnection(
															"row7" + iterateId,
															1, 1);
												}

												if (txf_tWriteXMLField_1_Out
														.getLastException() != null) {
													currentComponent = txf_tWriteXMLField_1_Out
															.getCurrentComponent();
													throw txf_tWriteXMLField_1_Out
															.getLastException();
												}
												nb_line_tWriteXMLField_1_Out++;
												valueMap_tWriteXMLField_1_Out
														.clear();
												valueMap_tWriteXMLField_1_Out
														.put("DESCRIPCION_LINEA",
																(row7.DESCRIPCION_LINEA != null ? row7.DESCRIPCION_LINEA
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("LINEA",
																(row7.LINEA != null ? row7.LINEA
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("DESCRIPCION_SUBLINEA",
																(row7.DESCRIPCION_SUBLINEA != null ? row7.DESCRIPCION_SUBLINEA
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("SUBLINEA",
																(row7.SUBLINEA != null ? row7.SUBLINEA
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("DESCRIPCION_CLASE",
																(row7.DESCRIPCION_CLASE != null ? row7.DESCRIPCION_CLASE
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("CLASE",
																(row7.CLASE != null ? row7.CLASE
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("DESCRIPCION_SUBCLASE",
																(row7.DESCRIPCION_SUBCLASE != null ? row7.DESCRIPCION_SUBCLASE
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("SUBCLASE",
																(row7.SUBCLASE != null ? row7.SUBCLASE
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("FECHA_CREACION_SKU",
																(row7.FECHA_CREACION_SKU != null ? FormatterUtils
																		.format_Date(
																				row7.FECHA_CREACION_SKU,
																				"yyyy-MM-dd HH:mm:ss")
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("Modelo",
																(row7.Modelo != null ? row7.Modelo
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("EAN",
																(row7.EAN != null ? row7.EAN
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("DESCRIPCION",
																(row7.DESCRIPCION != null ? row7.DESCRIPCION
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("MARCA",
																(row7.MARCA != null ? row7.MARCA
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("COLOR_GROUP",
																(row7.COLOR_GROUP != null ? row7.COLOR_GROUP
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("TALLA",
																(row7.TALLA != null ? row7.TALLA
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("TEMPORADA",
																(row7.TEMPORADA != null ? row7.TEMPORADA
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("SKU",
																(row7.SKU != null ? row7.SKU
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("ESTILO",
																(row7.ESTILO != null ? row7.ESTILO
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("ID_FAMILIA",
																(row7.ID_FAMILIA != null ? row7.ID_FAMILIA
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("FLAG_FOTO_INICIAL",
																(row7.FLAG_FOTO_INICIAL != null ? row7.FLAG_FOTO_INICIAL
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("FLAG_FOTO_FINAL",
																(row7.FLAG_FOTO_FINAL != null ? row7.FLAG_FOTO_FINAL
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("URL_DE_LA_FOTO_1",
																(row7.URL_DE_LA_FOTO_1 != null ? row7.URL_DE_LA_FOTO_1
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("URL_DE_LA_FOTO_2",
																(row7.URL_DE_LA_FOTO_2 != null ? row7.URL_DE_LA_FOTO_2
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("URL_DE_LA_FOTO_3",
																(row7.URL_DE_LA_FOTO_3 != null ? row7.URL_DE_LA_FOTO_3
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("URL_DE_LA_FOTO_4",
																(row7.URL_DE_LA_FOTO_4 != null ? row7.URL_DE_LA_FOTO_4
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("URL_DE_LA_FOTO_5",
																(row7.URL_DE_LA_FOTO_5 != null ? row7.URL_DE_LA_FOTO_5
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("ORIGEN",
																(row7.ORIGEN != null ? row7.ORIGEN
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("IS_MARKETPLACE",
																(row7.IS_MARKETPLACE != null ? row7.IS_MARKETPLACE
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("IS_VEV_VENTA_EN_VERDE",
																(row7.IS_VEV_VENTA_EN_VERDE != null ? row7.IS_VEV_VENTA_EN_VERDE
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("NOMBRE_COMERCIAL",
																(row7.NOMBRE_COMERCIAL != null ? row7.NOMBRE_COMERCIAL
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("NOMBRE_PROVEEDOR",
																(row7.NOMBRE_PROVEEDOR != null ? row7.NOMBRE_PROVEEDOR
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("RUT_PROVEEDOR",
																(row7.RUT_PROVEEDOR != null ? row7.RUT_PROVEEDOR
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("DV",
																(row7.DV != null ? row7.DV
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("PAIS_PROVEEDOR",
																(row7.PAIS_PROVEEDOR != null ? row7.PAIS_PROVEEDOR
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("FONO",
																(row7.FONO != null ? row7.FONO
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("FECHA_CREACION",
																(row7.FECHA_CREACION != null ? FormatterUtils
																		.format_Date(
																				row7.FECHA_CREACION,
																				"yyyy-MM-dd HH:mm:ss")
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("MAIL",
																(row7.MAIL != null ? row7.MAIL
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("CONTACTO",
																(row7.CONTACTO != null ? row7.CONTACTO
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("PAIS",
																(row7.PAIS != null ? row7.PAIS
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("ID_Origen",
																(row7.ID_Origen != null ? row7.ID_Origen
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("ID_FlagFoto",
																(row7.ID_FlagFoto != null ? row7.ID_FlagFoto
																		.toString()
																		: null));
												valueMap_tWriteXMLField_1_Out
														.put("URLFotos",
																(row7.URLFotos
																		.toString()));
												String strTemp_tWriteXMLField_1_Out = "";
												if (strCompCache_tWriteXMLField_1_Out == null) {
													strCompCache_tWriteXMLField_1_Out = strTemp_tWriteXMLField_1_Out;

												} else {
													for (int i_tWriteXMLField_1_Out = endTabStrs_tWriteXMLField_1_Out
															.size() - 1; i_tWriteXMLField_1_Out >= 0; i_tWriteXMLField_1_Out--) {
														if (endTabs_tWriteXMLField_1_Out[i_tWriteXMLField_1_Out] != null) {
															out_tWriteXMLField_1_Out
																	.write(endTabs_tWriteXMLField_1_Out[i_tWriteXMLField_1_Out]);
														}
														out_tWriteXMLField_1_Out
																.write("\n");
														out_tWriteXMLField_1_Out
																.write(endTabStrs_tWriteXMLField_1_Out
																		.get(i_tWriteXMLField_1_Out));
													}
													for (int i_tWriteXMLField_1_Out = 0; i_tWriteXMLField_1_Out < endTabs_tWriteXMLField_1_Out.length; i_tWriteXMLField_1_Out++) {
														startTabs_tWriteXMLField_1_Out[i_tWriteXMLField_1_Out] = null;
														endTabs_tWriteXMLField_1_Out[i_tWriteXMLField_1_Out] = null;
													}
													// endTabStrs_tWriteXMLField_1_Out.clear();
													out_tWriteXMLField_1_Out
															.write("\n");
													out_tWriteXMLField_1_Out
															.close();
													listGroupby_tWriteXMLField_1_Out
															.add(strWriter_tWriteXMLField_1_Out
																	.toString());

													// create a new StringWriter
													// and BufferWriter
													// write the head title to
													// the StringWriter
													strWriter_tWriteXMLField_1_Out = new java.io.StringWriter();
													out_tWriteXMLField_1_Out = new java.io.BufferedWriter(
															strWriter_tWriteXMLField_1_Out);
													out_tWriteXMLField_1_Out
															.write("<?xml version=\"1.0\" encoding=\""
																	+ "UTF-8"
																	+ "\"?>");
													out_tWriteXMLField_1_Out
															.write("\n");

													needRoot_tWriteXMLField_1_Out = true;
													strCompCache_tWriteXMLField_1_Out = strTemp_tWriteXMLField_1_Out;
													preNewTabIndex_tWriteXMLField_1_Out = -1;
												}

												StringBuffer buf_tWriteXMLField_1_Out = new StringBuffer();
												// init value is 0 not -1,
												// because it will output the
												// root tab when all the row
												// value is null.
												int unNullMaxIndex_tWriteXMLField_1_Out = 0;

												// build root xml tree
												if (needRoot_tWriteXMLField_1_Out) {
													needRoot_tWriteXMLField_1_Out = false;
													buf_tWriteXMLField_1_Out
															.append("\n");
													buf_tWriteXMLField_1_Out
															.append("<soapenv:Envelope");
													buf_tWriteXMLField_1_Out
															.append(" xmlns:soapenv=\""
																	+ TalendString
																			.replaceSpecialCharForXML("http://schemas.xmlsoap.org/soap/envelope/")
																	+ "\"");
													buf_tWriteXMLField_1_Out
															.append(" xmlns:tem=\""
																	+ TalendString
																			.replaceSpecialCharForXML("http://tempuri.org/")
																	+ "\"");
													buf_tWriteXMLField_1_Out
															.append(">");
													buf_tWriteXMLField_1_Out
															.append("\n");
													buf_tWriteXMLField_1_Out
															.append("  <soapenv:Header");
													buf_tWriteXMLField_1_Out
															.append(">");
													buf_tWriteXMLField_1_Out
															.append("</soapenv:Header>");
													out_tWriteXMLField_1_Out
															.write(buf_tWriteXMLField_1_Out
																	.toString());
													buf_tWriteXMLField_1_Out = new StringBuffer();
													endTabs_tWriteXMLField_1_Out[0] = buf_tWriteXMLField_1_Out
															.toString();
													buf_tWriteXMLField_1_Out = new StringBuffer();
													buf_tWriteXMLField_1_Out
															.append("\n");
													buf_tWriteXMLField_1_Out
															.append("  <soapenv:Body");
													buf_tWriteXMLField_1_Out
															.append(">");
													out_tWriteXMLField_1_Out
															.write(buf_tWriteXMLField_1_Out
																	.toString());
													buf_tWriteXMLField_1_Out = new StringBuffer();
													endTabs_tWriteXMLField_1_Out[1] = buf_tWriteXMLField_1_Out
															.toString();
													buf_tWriteXMLField_1_Out = new StringBuffer();
													buf_tWriteXMLField_1_Out
															.append("\n");
													buf_tWriteXMLField_1_Out
															.append("    <tem:saveEntity");
													buf_tWriteXMLField_1_Out
															.append(">");
													out_tWriteXMLField_1_Out
															.write(buf_tWriteXMLField_1_Out
																	.toString());
													buf_tWriteXMLField_1_Out = new StringBuffer();
													endTabs_tWriteXMLField_1_Out[2] = buf_tWriteXMLField_1_Out
															.toString();
													buf_tWriteXMLField_1_Out = new StringBuffer();
													buf_tWriteXMLField_1_Out
															.append("\n");
													buf_tWriteXMLField_1_Out
															.append("      <tem:entityInfo");
													buf_tWriteXMLField_1_Out
															.append(">");
													out_tWriteXMLField_1_Out
															.write(buf_tWriteXMLField_1_Out
																	.toString());
													buf_tWriteXMLField_1_Out = new StringBuffer();
													endTabs_tWriteXMLField_1_Out[3] = buf_tWriteXMLField_1_Out
															.toString();
													buf_tWriteXMLField_1_Out = new StringBuffer();
													buf_tWriteXMLField_1_Out
															.append("\n");
													buf_tWriteXMLField_1_Out
															.append("        <BizAgiWSParam");
													buf_tWriteXMLField_1_Out
															.append(">");
													out_tWriteXMLField_1_Out
															.write(buf_tWriteXMLField_1_Out
																	.toString());
													buf_tWriteXMLField_1_Out = new StringBuffer();
													endTabs_tWriteXMLField_1_Out[4] = buf_tWriteXMLField_1_Out
															.toString();
													buf_tWriteXMLField_1_Out = new StringBuffer();
													buf_tWriteXMLField_1_Out
															.append("\n");
													buf_tWriteXMLField_1_Out
															.append("          <Entities");
													buf_tWriteXMLField_1_Out
															.append(">");
													out_tWriteXMLField_1_Out
															.write(buf_tWriteXMLField_1_Out
																	.toString());
													buf_tWriteXMLField_1_Out = new StringBuffer();
													endTabs_tWriteXMLField_1_Out[5] = buf_tWriteXMLField_1_Out
															.toString();
													buf_tWriteXMLField_1_Out = new StringBuffer();
												}

												// build group xml tree
												// build loop xml tree
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("            <M_ProductosCargados");
												buf_tWriteXMLField_1_Out
														.append(">");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <ColorGroup");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("COLOR_GROUP") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("COLOR_GROUP")));
												}
												buf_tWriteXMLField_1_Out
														.append("</ColorGroup>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <Descripcion");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("DESCRIPCION") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("DESCRIPCION")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Descripcion>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <DescripcionSublinea");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("DESCRIPCION_SUBLINEA") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("DESCRIPCION_SUBLINEA")));
												}
												buf_tWriteXMLField_1_Out
														.append("</DescripcionSublinea>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <EAN");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("EAN") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("EAN")));
												}
												buf_tWriteXMLField_1_Out
														.append("</EAN>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <FechadecreacionSKU");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("FECHA_CREACION_SKU") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("FECHA_CREACION_SKU")));
												}
												buf_tWriteXMLField_1_Out
														.append("</FechadecreacionSKU>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <Id_Familia");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("ID_FAMILIA") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("ID_FAMILIA")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Id_Familia>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <IsMarketPlace");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("IS_MARKETPLACE") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("IS_MARKETPLACE")));
												}
												buf_tWriteXMLField_1_Out
														.append("</IsMarketPlace>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <IsVev");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("IS_VEV_VENTA_EN_VERDE") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("IS_VEV_VENTA_EN_VERDE")));
												}
												buf_tWriteXMLField_1_Out
														.append("</IsVev>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <Marca");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("MARCA") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("MARCA")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Marca>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <Modelo");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("Modelo") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("Modelo")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Modelo>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <Pais");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("PAIS") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("PAIS")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Pais>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <SKU");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("SKU") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("SKU")));
												}
												buf_tWriteXMLField_1_Out
														.append("</SKU>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <Talla");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("TALLA") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("TALLA")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Talla>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <Temporada");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("TEMPORADA") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("TEMPORADA")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Temporada>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <URLfoto");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("URLFotos") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("URLFotos")));
												}
												buf_tWriteXMLField_1_Out
														.append("</URLfoto>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <Flagfoto");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("ID_FlagFoto") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("ID_FlagFoto")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Flagfoto>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <InfoProveedor");
												buf_tWriteXMLField_1_Out
														.append(">");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Nombrecomercial");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("NOMBRE_COMERCIAL") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("NOMBRE_COMERCIAL")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Nombrecomercial>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Nombreproveedor");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("NOMBRE_PROVEEDOR") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("NOMBRE_PROVEEDOR")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Nombreproveedor>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Rutproveedor");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("RUT_PROVEEDOR") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("RUT_PROVEEDOR")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Rutproveedor>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Dv");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("DV") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("DV")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Dv>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Paisproveedor");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("PAIS_PROVEEDOR") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("PAIS_PROVEEDOR")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Paisproveedor>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Fono");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("FONO") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("FONO")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Fono>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Fechadecreacion");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("FECHA_CREACION") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("FECHA_CREACION")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Fechadecreacion>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Mail");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("MAIL") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("MAIL")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Mail>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Contacto");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("CONTACTO") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("CONTACTO")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Contacto>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              </InfoProveedor>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <Origen");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("ID_Origen") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("ID_Origen")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Origen>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              <M_JerarquiaProductos");
												buf_tWriteXMLField_1_Out
														.append(">");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Subclase");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("SUBCLASE") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("SUBCLASE")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Subclase>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Sublinea");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("SUBLINEA") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("SUBLINEA")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Sublinea>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Linea");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("LINEA") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("LINEA")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Linea>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Clase");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("CLASE") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("CLASE")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Clase>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Estilo");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("ESTILO") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("ESTILO")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Estilo>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <DescripcionSubclase");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("DESCRIPCION_SUBCLASE") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("DESCRIPCION_SUBCLASE")));
												}
												buf_tWriteXMLField_1_Out
														.append("</DescripcionSubclase>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("                <Descripcionlinea");
												buf_tWriteXMLField_1_Out
														.append(">");
												if (valueMap_tWriteXMLField_1_Out
														.get("DESCRIPCION_LINEA") != null) {
													buf_tWriteXMLField_1_Out
															.append(TalendString
																	.checkCDATAForXML(valueMap_tWriteXMLField_1_Out
																			.get("DESCRIPCION_LINEA")));
												}
												buf_tWriteXMLField_1_Out
														.append("</Descripcionlinea>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("              </M_JerarquiaProductos>");
												buf_tWriteXMLField_1_Out
														.append("\n");
												buf_tWriteXMLField_1_Out
														.append("            </M_ProductosCargados>");
												// output all buffer
												for (int i_tWriteXMLField_1_Out = 0; i_tWriteXMLField_1_Out < startTabs_tWriteXMLField_1_Out.length; i_tWriteXMLField_1_Out++) {
													if (startTabs_tWriteXMLField_1_Out[i_tWriteXMLField_1_Out] != null
															&& startTabs_tWriteXMLField_1_Out[i_tWriteXMLField_1_Out]
																	.length() > 0) {
														out_tWriteXMLField_1_Out
																.write(startTabs_tWriteXMLField_1_Out[i_tWriteXMLField_1_Out]);
														startTabs_tWriteXMLField_1_Out[i_tWriteXMLField_1_Out] = null;
													}
												}
												out_tWriteXMLField_1_Out
														.write(buf_tWriteXMLField_1_Out
																.toString());
												preNewTabIndex_tWriteXMLField_1_Out = 6;

												tos_count_tWriteXMLField_1_Out++;

												/**
												 * [tWriteXMLField_1_Out main ]
												 * stop
												 */

											} // End of branch "row7"

											// Start of branch "row8"
											if (row8 != null) {

												/**
												 * [tFilterRow_2 main ] start
												 */

												currentComponent = "tFilterRow_2";

												// row8
												// row8

												if (execStat) {
													runStat.updateStatOnConnection(
															"row8" + iterateId,
															1, 1);
												}

												row13 = null;
												row38 = null;
												Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2(
														"&&");
												ope_tFilterRow_2
														.matches(
																(// Origen
																	// NACIONAL
																(row8.ID_Origen == 1) &&
																// Flag foto NO
																// SABE
																(row8.ID_FlagFoto == 3)),
																"advanced condition failed");

												if (ope_tFilterRow_2
														.getMatchFlag()) {
													if (row38 == null) {
														row38 = new row38Struct();
													}
													row38.DESCRIPCION_LINEA = row8.DESCRIPCION_LINEA;
													row38.LINEA = row8.LINEA;
													row38.DESCRIPCION_SUBLINEA = row8.DESCRIPCION_SUBLINEA;
													row38.SUBLINEA = row8.SUBLINEA;
													row38.DESCRIPCION_CLASE = row8.DESCRIPCION_CLASE;
													row38.CLASE = row8.CLASE;
													row38.DESCRIPCION_SUBCLASE = row8.DESCRIPCION_SUBCLASE;
													row38.SUBCLASE = row8.SUBCLASE;
													row38.FECHA_CREACION_SKU = row8.FECHA_CREACION_SKU;
													row38.Modelo = row8.Modelo;
													row38.EAN = row8.EAN;
													row38.DESCRIPCION = row8.DESCRIPCION;
													row38.MARCA = row8.MARCA;
													row38.COLOR_GROUP = row8.COLOR_GROUP;
													row38.TALLA = row8.TALLA;
													row38.TEMPORADA = row8.TEMPORADA;
													row38.SKU = row8.SKU;
													row38.ESTILO = row8.ESTILO;
													row38.ID_FAMILIA = row8.ID_FAMILIA;
													row38.FLAG_FOTO_INICIAL = row8.FLAG_FOTO_INICIAL;
													row38.FLAG_FOTO_FINAL = row8.FLAG_FOTO_FINAL;
													row38.URL_DE_LA_FOTO_1 = row8.URL_DE_LA_FOTO_1;
													row38.URL_DE_LA_FOTO_2 = row8.URL_DE_LA_FOTO_2;
													row38.URL_DE_LA_FOTO_3 = row8.URL_DE_LA_FOTO_3;
													row38.URL_DE_LA_FOTO_4 = row8.URL_DE_LA_FOTO_4;
													row38.URL_DE_LA_FOTO_5 = row8.URL_DE_LA_FOTO_5;
													row38.ORIGEN = row8.ORIGEN;
													row38.IS_MARKETPLACE = row8.IS_MARKETPLACE;
													row38.IS_VEV_VENTA_EN_VERDE = row8.IS_VEV_VENTA_EN_VERDE;
													row38.NOMBRE_COMERCIAL = row8.NOMBRE_COMERCIAL;
													row38.NOMBRE_PROVEEDOR = row8.NOMBRE_PROVEEDOR;
													row38.RUT_PROVEEDOR = row8.RUT_PROVEEDOR;
													row38.DV = row8.DV;
													row38.PAIS_PROVEEDOR = row8.PAIS_PROVEEDOR;
													row38.FONO = row8.FONO;
													row38.FECHA_CREACION = row8.FECHA_CREACION;
													row38.MAIL = row8.MAIL;
													row38.CONTACTO = row8.CONTACTO;
													row38.PAIS = row8.PAIS;
													row38.ID_Origen = row8.ID_Origen;
													row38.ID_FlagFoto = row8.ID_FlagFoto;
													row38.URLFotos = row8.URLFotos;
													row38.errorMessage = row8.errorMessage;
													nb_line_ok_tFilterRow_2++;
												} else {
													if (row13 == null) {
														row13 = new row13Struct();
													}
													row13.DESCRIPCION_LINEA = row8.DESCRIPCION_LINEA;
													row13.LINEA = row8.LINEA;
													row13.DESCRIPCION_SUBLINEA = row8.DESCRIPCION_SUBLINEA;
													row13.SUBLINEA = row8.SUBLINEA;
													row13.DESCRIPCION_CLASE = row8.DESCRIPCION_CLASE;
													row13.CLASE = row8.CLASE;
													row13.DESCRIPCION_SUBCLASE = row8.DESCRIPCION_SUBCLASE;
													row13.SUBCLASE = row8.SUBCLASE;
													row13.FECHA_CREACION_SKU = row8.FECHA_CREACION_SKU;
													row13.Modelo = row8.Modelo;
													row13.EAN = row8.EAN;
													row13.DESCRIPCION = row8.DESCRIPCION;
													row13.MARCA = row8.MARCA;
													row13.COLOR_GROUP = row8.COLOR_GROUP;
													row13.TALLA = row8.TALLA;
													row13.TEMPORADA = row8.TEMPORADA;
													row13.SKU = row8.SKU;
													row13.ESTILO = row8.ESTILO;
													row13.ID_FAMILIA = row8.ID_FAMILIA;
													row13.FLAG_FOTO_INICIAL = row8.FLAG_FOTO_INICIAL;
													row13.FLAG_FOTO_FINAL = row8.FLAG_FOTO_FINAL;
													row13.URL_DE_LA_FOTO_1 = row8.URL_DE_LA_FOTO_1;
													row13.URL_DE_LA_FOTO_2 = row8.URL_DE_LA_FOTO_2;
													row13.URL_DE_LA_FOTO_3 = row8.URL_DE_LA_FOTO_3;
													row13.URL_DE_LA_FOTO_4 = row8.URL_DE_LA_FOTO_4;
													row13.URL_DE_LA_FOTO_5 = row8.URL_DE_LA_FOTO_5;
													row13.ORIGEN = row8.ORIGEN;
													row13.IS_MARKETPLACE = row8.IS_MARKETPLACE;
													row13.IS_VEV_VENTA_EN_VERDE = row8.IS_VEV_VENTA_EN_VERDE;
													row13.NOMBRE_COMERCIAL = row8.NOMBRE_COMERCIAL;
													row13.NOMBRE_PROVEEDOR = row8.NOMBRE_PROVEEDOR;
													row13.RUT_PROVEEDOR = row8.RUT_PROVEEDOR;
													row13.DV = row8.DV;
													row13.PAIS_PROVEEDOR = row8.PAIS_PROVEEDOR;
													row13.FONO = row8.FONO;
													row13.FECHA_CREACION = row8.FECHA_CREACION;
													row13.MAIL = row8.MAIL;
													row13.CONTACTO = row8.CONTACTO;
													row13.PAIS = row8.PAIS;
													row13.ID_Origen = row8.ID_Origen;
													row13.ID_FlagFoto = row8.ID_FlagFoto;
													row13.URLFotos = row8.URLFotos;
													row13.errorMessage = ope_tFilterRow_2
															.getErrorMsg();
													nb_line_reject_tFilterRow_2++;
												}

												nb_line_tFilterRow_2++;

												tos_count_tFilterRow_2++;

												/**
												 * [tFilterRow_2 main ] stop
												 */
												// Start of branch "row38"
												if (row38 != null) {

													/**
													 * [tAdvancedFileOutputXML_4
													 * main ] start
													 */

													currentComponent = "tAdvancedFileOutputXML_4";

													// row38
													// row38

													if (execStat) {
														runStat.updateStatOnConnection(
																"row38"
																		+ iterateId,
																1, 1);
													}

													nb_line_tAFOX_4++;
													valueMap_tAFOX_4.clear();
													valueMap_tAFOX_4
															.put("DESCRIPCION_LINEA",
																	(row38.DESCRIPCION_LINEA != null ? row38.DESCRIPCION_LINEA
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("LINEA",
																	(row38.LINEA != null ? row38.LINEA
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("DESCRIPCION_SUBLINEA",
																	(row38.DESCRIPCION_SUBLINEA != null ? row38.DESCRIPCION_SUBLINEA
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("SUBLINEA",
																	(row38.SUBLINEA != null ? row38.SUBLINEA
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("DESCRIPCION_CLASE",
																	(row38.DESCRIPCION_CLASE != null ? row38.DESCRIPCION_CLASE
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("CLASE",
																	(row38.CLASE != null ? row38.CLASE
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("DESCRIPCION_SUBCLASE",
																	(row38.DESCRIPCION_SUBCLASE != null ? row38.DESCRIPCION_SUBCLASE
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("SUBCLASE",
																	(row38.SUBCLASE != null ? row38.SUBCLASE
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("FECHA_CREACION_SKU",
																	(row38.FECHA_CREACION_SKU != null ? FormatterUtils
																			.format_Date(
																					row38.FECHA_CREACION_SKU,
																					"yyyy-MM-dd HH:mm:ss")
																			: null));
													valueMap_tAFOX_4
															.put("Modelo",
																	(row38.Modelo != null ? row38.Modelo
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("EAN",
																	(row38.EAN != null ? row38.EAN
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("DESCRIPCION",
																	(row38.DESCRIPCION != null ? row38.DESCRIPCION
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("MARCA",
																	(row38.MARCA != null ? row38.MARCA
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("COLOR_GROUP",
																	(row38.COLOR_GROUP != null ? row38.COLOR_GROUP
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("TALLA",
																	(row38.TALLA != null ? row38.TALLA
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("TEMPORADA",
																	(row38.TEMPORADA != null ? row38.TEMPORADA
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("SKU",
																	(row38.SKU != null ? row38.SKU
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("ESTILO",
																	(row38.ESTILO != null ? row38.ESTILO
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("ID_FAMILIA",
																	(row38.ID_FAMILIA != null ? row38.ID_FAMILIA
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("FLAG_FOTO_INICIAL",
																	(row38.FLAG_FOTO_INICIAL != null ? row38.FLAG_FOTO_INICIAL
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("FLAG_FOTO_FINAL",
																	(row38.FLAG_FOTO_FINAL != null ? row38.FLAG_FOTO_FINAL
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("URL_DE_LA_FOTO_1",
																	(row38.URL_DE_LA_FOTO_1 != null ? row38.URL_DE_LA_FOTO_1
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("URL_DE_LA_FOTO_2",
																	(row38.URL_DE_LA_FOTO_2 != null ? row38.URL_DE_LA_FOTO_2
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("URL_DE_LA_FOTO_3",
																	(row38.URL_DE_LA_FOTO_3 != null ? row38.URL_DE_LA_FOTO_3
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("URL_DE_LA_FOTO_4",
																	(row38.URL_DE_LA_FOTO_4 != null ? row38.URL_DE_LA_FOTO_4
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("URL_DE_LA_FOTO_5",
																	(row38.URL_DE_LA_FOTO_5 != null ? row38.URL_DE_LA_FOTO_5
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("ORIGEN",
																	(row38.ORIGEN != null ? row38.ORIGEN
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("IS_MARKETPLACE",
																	(row38.IS_MARKETPLACE != null ? row38.IS_MARKETPLACE
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("IS_VEV_VENTA_EN_VERDE",
																	(row38.IS_VEV_VENTA_EN_VERDE != null ? row38.IS_VEV_VENTA_EN_VERDE
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("NOMBRE_COMERCIAL",
																	(row38.NOMBRE_COMERCIAL != null ? row38.NOMBRE_COMERCIAL
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("NOMBRE_PROVEEDOR",
																	(row38.NOMBRE_PROVEEDOR != null ? row38.NOMBRE_PROVEEDOR
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("RUT_PROVEEDOR",
																	(row38.RUT_PROVEEDOR != null ? row38.RUT_PROVEEDOR
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("DV",
																	(row38.DV != null ? row38.DV
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("PAIS_PROVEEDOR",
																	(row38.PAIS_PROVEEDOR != null ? row38.PAIS_PROVEEDOR
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("FONO",
																	(row38.FONO != null ? row38.FONO
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("FECHA_CREACION",
																	(row38.FECHA_CREACION != null ? FormatterUtils
																			.format_Date(
																					row38.FECHA_CREACION,
																					"yyyy-MM-dd HH:mm:ss")
																			: null));
													valueMap_tAFOX_4
															.put("MAIL",
																	(row38.MAIL != null ? row38.MAIL
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("CONTACTO",
																	(row38.CONTACTO != null ? row38.CONTACTO
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("PAIS",
																	(row38.PAIS != null ? row38.PAIS
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("ID_Origen",
																	(row38.ID_Origen != null ? row38.ID_Origen
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("ID_FlagFoto",
																	(row38.ID_FlagFoto != null ? row38.ID_FlagFoto
																			.toString()
																			: null));
													valueMap_tAFOX_4
															.put("URLFotos",
																	(row38.URLFotos
																			.toString()));
													valueMap_tAFOX_4
															.put("errorMessage",
																	(row38.errorMessage != null ? row38.errorMessage
																			.toString()
																			: null));
													StringBuffer buf_tAFOX_4 = new StringBuffer();
													// init value is 0 not -1,
													// because it will output
													// the root tab when all the
													// row value is null.
													int unNullMaxIndex_tAFOX_4 = 0;

													// build root xml tree
													if (needRoot_tAFOX_4) {
														needRoot_tAFOX_4 = false;
														buf_tAFOX_4
																.append("\n");
														buf_tAFOX_4
																.append("<Entities");
														buf_tAFOX_4.append(">");
														out_tAFOX_4
																.write(buf_tAFOX_4
																		.toString());
														buf_tAFOX_4 = new StringBuffer();
														endTabs_tAFOX_4[0] = buf_tAFOX_4
																.toString();
														buf_tAFOX_4 = new StringBuffer();
													}

													// build group xml tree
													boolean isNewElememt_tAFOX_4 = false;
													// The index of group
													// element which is the
													// first new group in
													// groups.
													int newTabIndex_tAFOX_4 = -1;
													// Buffer all group tab XML,
													// then set to
													// startTabBuffer.
													String[] groupBuffer_tAFOX_4 = new String[2];
													String[] groupEndBuffer_tAFOX_4 = new String[2];

													// need a new group element
													// TablaProceso or not
													if (isNewElememt_tAFOX_4
															|| groupbyList_tAFOX_4
																	.size() <= 0
															|| groupbyList_tAFOX_4
																	.get(0) == null
															|| (groupbyList_tAFOX_4
																	.get(0)
																	.get(0) != null ? !groupbyList_tAFOX_4
																	.get(0)
																	.get(0)
																	.equals(valueMap_tAFOX_4
																			.get("NOMBRE_COMERCIAL"))
																	: valueMap_tAFOX_4
																			.get("NOMBRE_COMERCIAL") != null)
															|| (groupbyList_tAFOX_4
																	.get(0)
																	.get(1) != null ? !groupbyList_tAFOX_4
																	.get(0)
																	.get(1)
																	.equals(valueMap_tAFOX_4
																			.get("NOMBRE_PROVEEDOR"))
																	: valueMap_tAFOX_4
																			.get("NOMBRE_PROVEEDOR") != null)
															|| (groupbyList_tAFOX_4
																	.get(0)
																	.get(2) != null ? !groupbyList_tAFOX_4
																	.get(0)
																	.get(2)
																	.equals(valueMap_tAFOX_4
																			.get("RUT_PROVEEDOR"))
																	: valueMap_tAFOX_4
																			.get("RUT_PROVEEDOR") != null)
															|| (groupbyList_tAFOX_4
																	.get(0)
																	.get(3) != null ? !groupbyList_tAFOX_4
																	.get(0)
																	.get(3)
																	.equals(valueMap_tAFOX_4
																			.get("DV"))
																	: valueMap_tAFOX_4
																			.get("DV") != null)
															|| (groupbyList_tAFOX_4
																	.get(0)
																	.get(4) != null ? !groupbyList_tAFOX_4
																	.get(0)
																	.get(4)
																	.equals(valueMap_tAFOX_4
																			.get("PAIS_PROVEEDOR"))
																	: valueMap_tAFOX_4
																			.get("PAIS_PROVEEDOR") != null)
															|| (groupbyList_tAFOX_4
																	.get(0)
																	.get(5) != null ? !groupbyList_tAFOX_4
																	.get(0)
																	.get(5)
																	.equals(valueMap_tAFOX_4
																			.get("FONO"))
																	: valueMap_tAFOX_4
																			.get("FONO") != null)
															|| (groupbyList_tAFOX_4
																	.get(0)
																	.get(6) != null ? !groupbyList_tAFOX_4
																	.get(0)
																	.get(6)
																	.equals(valueMap_tAFOX_4
																			.get("FECHA_CREACION"))
																	: valueMap_tAFOX_4
																			.get("FECHA_CREACION") != null)
															|| (groupbyList_tAFOX_4
																	.get(0)
																	.get(7) != null ? !groupbyList_tAFOX_4
																	.get(0)
																	.get(7)
																	.equals(valueMap_tAFOX_4
																			.get("MAIL"))
																	: valueMap_tAFOX_4
																			.get("MAIL") != null)
															|| (groupbyList_tAFOX_4
																	.get(0)
																	.get(8) != null ? !groupbyList_tAFOX_4
																	.get(0)
																	.get(8)
																	.equals(valueMap_tAFOX_4
																			.get("CONTACTO"))
																	: valueMap_tAFOX_4
																			.get("CONTACTO") != null)) {
														// Is the first new
														// element in groups.
														if (isNewElememt_tAFOX_4 == false
																&& groupbyList_tAFOX_4
																		.size() > 0) {
															newTabIndex_tAFOX_4 = 0;
														}

														// count the groupby
														// element
														if (groupbyList_tAFOX_4
																.size() <= 0) {
															groupbyList_tAFOX_4
																	.add(new java.util.ArrayList<String>());
														} else {
															groupbyList_tAFOX_4
																	.get(0)
																	.clear();
														}
														groupbyList_tAFOX_4
																.get(0)
																.add(valueMap_tAFOX_4
																		.get("NOMBRE_COMERCIAL"));
														groupbyList_tAFOX_4
																.get(0)
																.add(valueMap_tAFOX_4
																		.get("NOMBRE_PROVEEDOR"));
														groupbyList_tAFOX_4
																.get(0)
																.add(valueMap_tAFOX_4
																		.get("RUT_PROVEEDOR"));
														groupbyList_tAFOX_4
																.get(0)
																.add(valueMap_tAFOX_4
																		.get("DV"));
														groupbyList_tAFOX_4
																.get(0)
																.add(valueMap_tAFOX_4
																		.get("PAIS_PROVEEDOR"));
														groupbyList_tAFOX_4
																.get(0)
																.add(valueMap_tAFOX_4
																		.get("FONO"));
														groupbyList_tAFOX_4
																.get(0)
																.add(valueMap_tAFOX_4
																		.get("FECHA_CREACION"));
														groupbyList_tAFOX_4
																.get(0)
																.add(valueMap_tAFOX_4
																		.get("MAIL"));
														groupbyList_tAFOX_4
																.get(0)
																.add(valueMap_tAFOX_4
																		.get("CONTACTO"));
														isNewElememt_tAFOX_4 = true;
													}

													// subtree XML string
													// generate
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("  <TablaProceso");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("    <Proveedor");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      <Nombrecomercial");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("NOMBRE_COMERCIAL") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("NOMBRE_COMERCIAL")));
													}
													buf_tAFOX_4
															.append("</Nombrecomercial>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      <Nombreproveedor");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("NOMBRE_PROVEEDOR") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("NOMBRE_PROVEEDOR")));
													}
													buf_tAFOX_4
															.append("</Nombreproveedor>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      <Rutproveedor");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("RUT_PROVEEDOR") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("RUT_PROVEEDOR")));
													}
													buf_tAFOX_4
															.append("</Rutproveedor>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      <Dv");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("DV") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("DV")));
													}
													buf_tAFOX_4.append("</Dv>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      <Paisproveedor");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("PAIS_PROVEEDOR") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("PAIS_PROVEEDOR")));
													}
													buf_tAFOX_4
															.append("</Paisproveedor>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      <Fono");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("FONO") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("FONO")));
													}
													buf_tAFOX_4
															.append("</Fono>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      <Fechadecreacion");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("FECHA_CREACION") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("FECHA_CREACION")));
													}
													buf_tAFOX_4
															.append("</Fechadecreacion>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      <Mail");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("MAIL") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("MAIL")));
													}
													buf_tAFOX_4
															.append("</Mail>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      <Contacto");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("CONTACTO") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("CONTACTO")));
													}
													buf_tAFOX_4
															.append("</Contacto>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("    </Proveedor>");
													// buffer the start tabs to
													// group buffer
													groupBuffer_tAFOX_4[0] = buf_tAFOX_4
															.toString();
													buf_tAFOX_4 = new StringBuffer();
													// buffer the end tabs to
													// groupEnd buffer
													groupEndBuffer_tAFOX_4[0] = buf_tAFOX_4
															.toString();
													buf_tAFOX_4 = new StringBuffer();

													// need a new group element
													// Productos or not
													if (isNewElememt_tAFOX_4
															|| groupbyList_tAFOX_4
																	.size() <= 1
															|| groupbyList_tAFOX_4
																	.get(1) == null) {
														// Is the first new
														// element in groups.
														if (isNewElememt_tAFOX_4 == false
																&& groupbyList_tAFOX_4
																		.size() > 1) {
															newTabIndex_tAFOX_4 = 1;
														}

														// count the groupby
														// element
														if (groupbyList_tAFOX_4
																.size() <= 1) {
															groupbyList_tAFOX_4
																	.add(new java.util.ArrayList<String>());
														} else {
															groupbyList_tAFOX_4
																	.get(1)
																	.clear();
														}
														isNewElememt_tAFOX_4 = true;
													}

													// subtree XML string
													// generate
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("    <Productos");
													buf_tAFOX_4.append(">");
													// buffer the start tabs to
													// group buffer
													groupBuffer_tAFOX_4[1] = buf_tAFOX_4
															.toString();
													buf_tAFOX_4 = new StringBuffer();
													// buffer the end tabs to
													// groupEnd buffer
													groupEndBuffer_tAFOX_4[1] = buf_tAFOX_4
															.toString();
													buf_tAFOX_4 = new StringBuffer();
													// output the previous
													// groups as there's a new
													// group
													if (newTabIndex_tAFOX_4 >= 0) {
														// out_tAFOX_4.newLine();//Track
														// code
														// output all start tabs
														// buffer
														for (int i_tAFOX_4 = 0; i_tAFOX_4 < startTabs_tAFOX_4.length; i_tAFOX_4++) {
															if (startTabs_tAFOX_4[i_tAFOX_4] != null) {
																out_tAFOX_4
																		.write(startTabs_tAFOX_4[i_tAFOX_4]);
															}
															startTabs_tAFOX_4[i_tAFOX_4] = null;
														}
														for (int i_tAFOX_4 = preNewTabIndex_tAFOX_4 - 1; i_tAFOX_4 >= 1 + newTabIndex_tAFOX_4; i_tAFOX_4--) {
															if (endTabs_tAFOX_4[i_tAFOX_4] != null) {
																out_tAFOX_4
																		.write(endTabs_tAFOX_4[i_tAFOX_4]);
															}
															endTabs_tAFOX_4[i_tAFOX_4] = null;
															out_tAFOX_4
																	.newLine();
															out_tAFOX_4
																	.write(endTabStrs_tAFOX_4
																			.get(i_tAFOX_4));
														}
														preNewTabIndex_tAFOX_4 = newTabIndex_tAFOX_4 + 1;
													}

													// set new element
													// groupbuffer to
													// startbuffer
													for (int i_tAFOX_4 = 0; i_tAFOX_4 < groupBuffer_tAFOX_4.length; i_tAFOX_4++) {
														// when newTabIndex is
														// null, must use the
														// perNewTabIndex
														if (i_tAFOX_4 >= preNewTabIndex_tAFOX_4 - 1) {
															startTabs_tAFOX_4[i_tAFOX_4 + 1] = groupBuffer_tAFOX_4[i_tAFOX_4];
															endTabs_tAFOX_4[i_tAFOX_4 + 1] = groupEndBuffer_tAFOX_4[i_tAFOX_4];
														}
													}
													// build loop xml tree
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      <M_ProductosCargados");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Ingresado");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</Ingresado>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <ColorGroup");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("COLOR_GROUP") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("COLOR_GROUP")));
													}
													buf_tAFOX_4
															.append("</ColorGroup>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Descripcion");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("DESCRIPCION") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("DESCRIPCION")));
													}
													buf_tAFOX_4
															.append("</Descripcion>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <EAN");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("EAN") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("EAN")));
													}
													buf_tAFOX_4
															.append("</EAN>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Evento");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</Evento>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <FechadecreacionSKU");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("FECHA_CREACION_SKU") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("FECHA_CREACION_SKU")));
													}
													buf_tAFOX_4
															.append("</FechadecreacionSKU>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Fotografo");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</Fotografo>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Id_Familia");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("ID_FAMILIA") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("ID_FAMILIA")));
													}
													buf_tAFOX_4
															.append("</Id_Familia>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <IsMarketPlace");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("IS_MARKETPLACE") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("IS_MARKETPLACE")));
													}
													buf_tAFOX_4
															.append("</IsMarketPlace>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <IsVev");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("IS_VEV_VENTA_EN_VERDE") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("IS_VEV_VENTA_EN_VERDE")));
													}
													buf_tAFOX_4
															.append("</IsVev>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Linea");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("LINEA") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("LINEA")));
													}
													buf_tAFOX_4
															.append("</Linea>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Marca");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("MARCA") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("MARCA")));
													}
													buf_tAFOX_4
															.append("</Marca>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Modelo");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("Modelo") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("Modelo")));
													}
													buf_tAFOX_4
															.append("</Modelo>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <OrdendeCompra");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</OrdendeCompra>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Pais");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("PAIS") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("PAIS")));
													}
													buf_tAFOX_4
															.append("</Pais>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <PostProductor");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</PostProductor>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <RequiereArmado");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</RequiereArmado>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <RequierePlanchado");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</RequierePlanchado>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <SKU");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("SKU") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("SKU")));
													}
													buf_tAFOX_4
															.append("</SKU>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Talla");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("TALLA") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("TALLA")));
													}
													buf_tAFOX_4
															.append("</Talla>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Temporada");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("TEMPORADA") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("TEMPORADA")));
													}
													buf_tAFOX_4
															.append("</Temporada>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <URLfoto");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("URLFotos") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("URLFotos")));
													}
													buf_tAFOX_4
															.append("</URLfoto>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <M_JerarquiaProductos");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Subclase");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("SUBCLASE") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("SUBCLASE")));
													}
													buf_tAFOX_4
															.append("</Subclase>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Sublinea");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("SUBLINEA") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("SUBLINEA")));
													}
													buf_tAFOX_4
															.append("</Sublinea>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Linea");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("LINEA") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("LINEA")));
													}
													buf_tAFOX_4
															.append("</Linea>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Clase");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("CLASE") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("CLASE")));
													}
													buf_tAFOX_4
															.append("</Clase>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Estilo");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("ESTILO") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("ESTILO")));
													}
													buf_tAFOX_4
															.append("</Estilo>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <DescripcionSubclase");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("DESCRIPCION_SUBCLASE") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("DESCRIPCION_SUBCLASE")));
													}
													buf_tAFOX_4
															.append("</DescripcionSubclase>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Descripcionlinea");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("DESCRIPCION_LINEA") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("DESCRIPCION_LINEA")));
													}
													buf_tAFOX_4
															.append("</Descripcionlinea>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        </M_JerarquiaProductos>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <EstadoFoto");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</EstadoFoto>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <EstadoURL");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</EstadoURL>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Flagfoto");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("ID_FlagFoto") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("ID_FlagFoto")));
													}
													buf_tAFOX_4
															.append("</Flagfoto>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <M_PubRcepcionarproductos");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</M_PubRcepcionarproductos>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <InfoProveedor");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Nombrecomercial");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("NOMBRE_COMERCIAL") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("NOMBRE_COMERCIAL")));
													}
													buf_tAFOX_4
															.append("</Nombrecomercial>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Nombreproveedor");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("NOMBRE_PROVEEDOR") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("NOMBRE_PROVEEDOR")));
													}
													buf_tAFOX_4
															.append("</Nombreproveedor>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Rutproveedor");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("RUT_PROVEEDOR") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("RUT_PROVEEDOR")));
													}
													buf_tAFOX_4
															.append("</Rutproveedor>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Dv");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("DV") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("DV")));
													}
													buf_tAFOX_4.append("</Dv>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Paisproveedor");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("PAIS_PROVEEDOR") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("PAIS_PROVEEDOR")));
													}
													buf_tAFOX_4
															.append("</Paisproveedor>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Fono");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("FONO") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("FONO")));
													}
													buf_tAFOX_4
															.append("</Fono>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Fechadecreacion");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("FECHA_CREACION") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("FECHA_CREACION")));
													}
													buf_tAFOX_4
															.append("</Fechadecreacion>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Mail");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("MAIL") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("MAIL")));
													}
													buf_tAFOX_4
															.append("</Mail>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("          <Contacto");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</Contacto>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        </InfoProveedor>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <MotivoRechazo");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</MotivoRechazo>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Procedencia");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</Procedencia>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <TipoSet");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</TipoSet>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <EstadoNombre");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</EstadoNombre>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <Origen");
													buf_tAFOX_4.append(">");
													if (valueMap_tAFOX_4
															.get("ID_Origen") != null) {
														buf_tAFOX_4
																.append(TalendString
																		.checkCDATAForXML(valueMap_tAFOX_4
																				.get("ID_Origen")));
													}
													buf_tAFOX_4
															.append("</Origen>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("        <PubRecepcionarproductos");
													buf_tAFOX_4.append(">");
													buf_tAFOX_4
															.append("</PubRecepcionarproductos>");
													buf_tAFOX_4.append("\n");
													buf_tAFOX_4
															.append("      </M_ProductosCargados>");
													// output all buffer
													for (int i_tAFOX_4 = 0; i_tAFOX_4 < startTabs_tAFOX_4.length; i_tAFOX_4++) {
														if (startTabs_tAFOX_4[i_tAFOX_4] != null
																&& startTabs_tAFOX_4[i_tAFOX_4]
																		.length() > 0) {
															out_tAFOX_4
																	.write(startTabs_tAFOX_4[i_tAFOX_4]);
															startTabs_tAFOX_4[i_tAFOX_4] = null;
														}
													}
													out_tAFOX_4
															.write(buf_tAFOX_4
																	.toString());
													preNewTabIndex_tAFOX_4 = 3;

													tos_count_tAdvancedFileOutputXML_4++;

													/**
													 * [tAdvancedFileOutputXML_4
													 * main ] stop
													 */

												} // End of branch "row38"

												// Start of branch "row13"
												if (row13 != null) {

													/**
													 * [tFilterRow_3 main ]
													 * start
													 */

													currentComponent = "tFilterRow_3";

													// row13
													// row13

													if (execStat) {
														runStat.updateStatOnConnection(
																"row13"
																		+ iterateId,
																1, 1);
													}

													row15 = null;
													row36 = null;
													Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3(
															"&&");
													ope_tFilterRow_3
															.matches(
																	(// Origen
																		// NACIONAL
																	(row13.ID_Origen == 1)
																			&&
																			// Flag
																			// foto
																			// MUESTRA
																			(row13.ID_FlagFoto == 3)
																	// Marketplace
																	// y VEV
																	&& ((row13.IS_MARKETPLACE && row13.IS_VEV_VENTA_EN_VERDE) // TT
																			|| (!row13.IS_MARKETPLACE && row13.IS_VEV_VENTA_EN_VERDE) // FT
																	|| (row13.IS_MARKETPLACE && !row13.IS_VEV_VENTA_EN_VERDE) // TF
																	)),
																	"advanced condition failed");

													if (ope_tFilterRow_3
															.getMatchFlag()) {
														if (row36 == null) {
															row36 = new row36Struct();
														}
														row36.DESCRIPCION_LINEA = row13.DESCRIPCION_LINEA;
														row36.LINEA = row13.LINEA;
														row36.DESCRIPCION_SUBLINEA = row13.DESCRIPCION_SUBLINEA;
														row36.SUBLINEA = row13.SUBLINEA;
														row36.DESCRIPCION_CLASE = row13.DESCRIPCION_CLASE;
														row36.CLASE = row13.CLASE;
														row36.DESCRIPCION_SUBCLASE = row13.DESCRIPCION_SUBCLASE;
														row36.SUBCLASE = row13.SUBCLASE;
														row36.FECHA_CREACION_SKU = row13.FECHA_CREACION_SKU;
														row36.Modelo = row13.Modelo;
														row36.EAN = row13.EAN;
														row36.DESCRIPCION = row13.DESCRIPCION;
														row36.MARCA = row13.MARCA;
														row36.COLOR_GROUP = row13.COLOR_GROUP;
														row36.TALLA = row13.TALLA;
														row36.TEMPORADA = row13.TEMPORADA;
														row36.SKU = row13.SKU;
														row36.ESTILO = row13.ESTILO;
														row36.ID_FAMILIA = row13.ID_FAMILIA;
														row36.FLAG_FOTO_INICIAL = row13.FLAG_FOTO_INICIAL;
														row36.FLAG_FOTO_FINAL = row13.FLAG_FOTO_FINAL;
														row36.URL_DE_LA_FOTO_1 = row13.URL_DE_LA_FOTO_1;
														row36.URL_DE_LA_FOTO_2 = row13.URL_DE_LA_FOTO_2;
														row36.URL_DE_LA_FOTO_3 = row13.URL_DE_LA_FOTO_3;
														row36.URL_DE_LA_FOTO_4 = row13.URL_DE_LA_FOTO_4;
														row36.URL_DE_LA_FOTO_5 = row13.URL_DE_LA_FOTO_5;
														row36.ORIGEN = row13.ORIGEN;
														row36.IS_MARKETPLACE = row13.IS_MARKETPLACE;
														row36.IS_VEV_VENTA_EN_VERDE = row13.IS_VEV_VENTA_EN_VERDE;
														row36.NOMBRE_COMERCIAL = row13.NOMBRE_COMERCIAL;
														row36.NOMBRE_PROVEEDOR = row13.NOMBRE_PROVEEDOR;
														row36.RUT_PROVEEDOR = row13.RUT_PROVEEDOR;
														row36.DV = row13.DV;
														row36.PAIS_PROVEEDOR = row13.PAIS_PROVEEDOR;
														row36.FONO = row13.FONO;
														row36.FECHA_CREACION = row13.FECHA_CREACION;
														row36.MAIL = row13.MAIL;
														row36.CONTACTO = row13.CONTACTO;
														row36.PAIS = row13.PAIS;
														row36.ID_Origen = row13.ID_Origen;
														row36.ID_FlagFoto = row13.ID_FlagFoto;
														row36.URLFotos = row13.URLFotos;
														row36.errorMessage = row13.errorMessage;
														nb_line_ok_tFilterRow_3++;
													} else {
														if (row15 == null) {
															row15 = new row15Struct();
														}
														row15.DESCRIPCION_LINEA = row13.DESCRIPCION_LINEA;
														row15.LINEA = row13.LINEA;
														row15.DESCRIPCION_SUBLINEA = row13.DESCRIPCION_SUBLINEA;
														row15.SUBLINEA = row13.SUBLINEA;
														row15.DESCRIPCION_CLASE = row13.DESCRIPCION_CLASE;
														row15.CLASE = row13.CLASE;
														row15.DESCRIPCION_SUBCLASE = row13.DESCRIPCION_SUBCLASE;
														row15.SUBCLASE = row13.SUBCLASE;
														row15.FECHA_CREACION_SKU = row13.FECHA_CREACION_SKU;
														row15.Modelo = row13.Modelo;
														row15.EAN = row13.EAN;
														row15.DESCRIPCION = row13.DESCRIPCION;
														row15.MARCA = row13.MARCA;
														row15.COLOR_GROUP = row13.COLOR_GROUP;
														row15.TALLA = row13.TALLA;
														row15.TEMPORADA = row13.TEMPORADA;
														row15.SKU = row13.SKU;
														row15.ESTILO = row13.ESTILO;
														row15.ID_FAMILIA = row13.ID_FAMILIA;
														row15.FLAG_FOTO_INICIAL = row13.FLAG_FOTO_INICIAL;
														row15.FLAG_FOTO_FINAL = row13.FLAG_FOTO_FINAL;
														row15.URL_DE_LA_FOTO_1 = row13.URL_DE_LA_FOTO_1;
														row15.URL_DE_LA_FOTO_2 = row13.URL_DE_LA_FOTO_2;
														row15.URL_DE_LA_FOTO_3 = row13.URL_DE_LA_FOTO_3;
														row15.URL_DE_LA_FOTO_4 = row13.URL_DE_LA_FOTO_4;
														row15.URL_DE_LA_FOTO_5 = row13.URL_DE_LA_FOTO_5;
														row15.ORIGEN = row13.ORIGEN;
														row15.IS_MARKETPLACE = row13.IS_MARKETPLACE;
														row15.IS_VEV_VENTA_EN_VERDE = row13.IS_VEV_VENTA_EN_VERDE;
														row15.NOMBRE_COMERCIAL = row13.NOMBRE_COMERCIAL;
														row15.NOMBRE_PROVEEDOR = row13.NOMBRE_PROVEEDOR;
														row15.RUT_PROVEEDOR = row13.RUT_PROVEEDOR;
														row15.DV = row13.DV;
														row15.PAIS_PROVEEDOR = row13.PAIS_PROVEEDOR;
														row15.FONO = row13.FONO;
														row15.FECHA_CREACION = row13.FECHA_CREACION;
														row15.MAIL = row13.MAIL;
														row15.CONTACTO = row13.CONTACTO;
														row15.PAIS = row13.PAIS;
														row15.ID_Origen = row13.ID_Origen;
														row15.ID_FlagFoto = row13.ID_FlagFoto;
														row15.URLFotos = row13.URLFotos;
														row15.errorMessage = ope_tFilterRow_3
																.getErrorMsg();
														nb_line_reject_tFilterRow_3++;
													}

													nb_line_tFilterRow_3++;

													tos_count_tFilterRow_3++;

													/**
													 * [tFilterRow_3 main ] stop
													 */
													// Start of branch "row36"
													if (row36 != null) {

														/**
														 * [
														 * tAdvancedFileOutputXML_3
														 * main ] start
														 */

														currentComponent = "tAdvancedFileOutputXML_3";

														// row36
														// row36

														if (execStat) {
															runStat.updateStatOnConnection(
																	"row36"
																			+ iterateId,
																	1, 1);
														}

														nb_line_tAFOX_3++;
														valueMap_tAFOX_3
																.clear();
														valueMap_tAFOX_3
																.put("DESCRIPCION_LINEA",
																		(row36.DESCRIPCION_LINEA != null ? row36.DESCRIPCION_LINEA
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("LINEA",
																		(row36.LINEA != null ? row36.LINEA
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("DESCRIPCION_SUBLINEA",
																		(row36.DESCRIPCION_SUBLINEA != null ? row36.DESCRIPCION_SUBLINEA
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("SUBLINEA",
																		(row36.SUBLINEA != null ? row36.SUBLINEA
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("DESCRIPCION_CLASE",
																		(row36.DESCRIPCION_CLASE != null ? row36.DESCRIPCION_CLASE
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("CLASE",
																		(row36.CLASE != null ? row36.CLASE
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("DESCRIPCION_SUBCLASE",
																		(row36.DESCRIPCION_SUBCLASE != null ? row36.DESCRIPCION_SUBCLASE
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("SUBCLASE",
																		(row36.SUBCLASE != null ? row36.SUBCLASE
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("FECHA_CREACION_SKU",
																		(row36.FECHA_CREACION_SKU != null ? FormatterUtils
																				.format_Date(
																						row36.FECHA_CREACION_SKU,
																						"yyyy-MM-dd HH:mm:ss")
																				: null));
														valueMap_tAFOX_3
																.put("Modelo",
																		(row36.Modelo != null ? row36.Modelo
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("EAN",
																		(row36.EAN != null ? row36.EAN
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("DESCRIPCION",
																		(row36.DESCRIPCION != null ? row36.DESCRIPCION
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("MARCA",
																		(row36.MARCA != null ? row36.MARCA
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("COLOR_GROUP",
																		(row36.COLOR_GROUP != null ? row36.COLOR_GROUP
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("TALLA",
																		(row36.TALLA != null ? row36.TALLA
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("TEMPORADA",
																		(row36.TEMPORADA != null ? row36.TEMPORADA
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("SKU",
																		(row36.SKU != null ? row36.SKU
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("ESTILO",
																		(row36.ESTILO != null ? row36.ESTILO
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("ID_FAMILIA",
																		(row36.ID_FAMILIA != null ? row36.ID_FAMILIA
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("FLAG_FOTO_INICIAL",
																		(row36.FLAG_FOTO_INICIAL != null ? row36.FLAG_FOTO_INICIAL
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("FLAG_FOTO_FINAL",
																		(row36.FLAG_FOTO_FINAL != null ? row36.FLAG_FOTO_FINAL
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("URL_DE_LA_FOTO_1",
																		(row36.URL_DE_LA_FOTO_1 != null ? row36.URL_DE_LA_FOTO_1
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("URL_DE_LA_FOTO_2",
																		(row36.URL_DE_LA_FOTO_2 != null ? row36.URL_DE_LA_FOTO_2
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("URL_DE_LA_FOTO_3",
																		(row36.URL_DE_LA_FOTO_3 != null ? row36.URL_DE_LA_FOTO_3
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("URL_DE_LA_FOTO_4",
																		(row36.URL_DE_LA_FOTO_4 != null ? row36.URL_DE_LA_FOTO_4
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("URL_DE_LA_FOTO_5",
																		(row36.URL_DE_LA_FOTO_5 != null ? row36.URL_DE_LA_FOTO_5
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("ORIGEN",
																		(row36.ORIGEN != null ? row36.ORIGEN
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("IS_MARKETPLACE",
																		(row36.IS_MARKETPLACE != null ? row36.IS_MARKETPLACE
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("IS_VEV_VENTA_EN_VERDE",
																		(row36.IS_VEV_VENTA_EN_VERDE != null ? row36.IS_VEV_VENTA_EN_VERDE
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("NOMBRE_COMERCIAL",
																		(row36.NOMBRE_COMERCIAL != null ? row36.NOMBRE_COMERCIAL
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("NOMBRE_PROVEEDOR",
																		(row36.NOMBRE_PROVEEDOR != null ? row36.NOMBRE_PROVEEDOR
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("RUT_PROVEEDOR",
																		(row36.RUT_PROVEEDOR != null ? row36.RUT_PROVEEDOR
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("DV",
																		(row36.DV != null ? row36.DV
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("PAIS_PROVEEDOR",
																		(row36.PAIS_PROVEEDOR != null ? row36.PAIS_PROVEEDOR
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("FONO",
																		(row36.FONO != null ? row36.FONO
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("FECHA_CREACION",
																		(row36.FECHA_CREACION != null ? FormatterUtils
																				.format_Date(
																						row36.FECHA_CREACION,
																						"yyyy-MM-dd HH:mm:ss")
																				: null));
														valueMap_tAFOX_3
																.put("MAIL",
																		(row36.MAIL != null ? row36.MAIL
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("CONTACTO",
																		(row36.CONTACTO != null ? row36.CONTACTO
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("PAIS",
																		(row36.PAIS != null ? row36.PAIS
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("ID_Origen",
																		(row36.ID_Origen != null ? row36.ID_Origen
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("ID_FlagFoto",
																		(row36.ID_FlagFoto != null ? row36.ID_FlagFoto
																				.toString()
																				: null));
														valueMap_tAFOX_3
																.put("URLFotos",
																		(row36.URLFotos
																				.toString()));
														valueMap_tAFOX_3
																.put("errorMessage",
																		(row36.errorMessage != null ? row36.errorMessage
																				.toString()
																				: null));
														StringBuffer buf_tAFOX_3 = new StringBuffer();
														// init value is 0 not
														// -1, because it will
														// output the root tab
														// when all the row
														// value is null.
														int unNullMaxIndex_tAFOX_3 = 0;

														// build root xml tree
														if (needRoot_tAFOX_3) {
															needRoot_tAFOX_3 = false;
															buf_tAFOX_3
																	.append("\n");
															buf_tAFOX_3
																	.append("<Entities");
															buf_tAFOX_3
																	.append(">");
															out_tAFOX_3
																	.write(buf_tAFOX_3
																			.toString());
															buf_tAFOX_3 = new StringBuffer();
															endTabs_tAFOX_3[0] = buf_tAFOX_3
																	.toString();
															buf_tAFOX_3 = new StringBuffer();
														}

														// build group xml tree
														boolean isNewElememt_tAFOX_3 = false;
														// The index of group
														// element which is the
														// first new group in
														// groups.
														int newTabIndex_tAFOX_3 = -1;
														// Buffer all group tab
														// XML, then set to
														// startTabBuffer.
														String[] groupBuffer_tAFOX_3 = new String[2];
														String[] groupEndBuffer_tAFOX_3 = new String[2];

														// need a new group
														// element TablaProceso
														// or not
														if (isNewElememt_tAFOX_3
																|| groupbyList_tAFOX_3
																		.size() <= 0
																|| groupbyList_tAFOX_3
																		.get(0) == null
																|| (groupbyList_tAFOX_3
																		.get(0)
																		.get(0) != null ? !groupbyList_tAFOX_3
																		.get(0)
																		.get(0)
																		.equals(valueMap_tAFOX_3
																				.get("NOMBRE_COMERCIAL"))
																		: valueMap_tAFOX_3
																				.get("NOMBRE_COMERCIAL") != null)
																|| (groupbyList_tAFOX_3
																		.get(0)
																		.get(1) != null ? !groupbyList_tAFOX_3
																		.get(0)
																		.get(1)
																		.equals(valueMap_tAFOX_3
																				.get("NOMBRE_PROVEEDOR"))
																		: valueMap_tAFOX_3
																				.get("NOMBRE_PROVEEDOR") != null)
																|| (groupbyList_tAFOX_3
																		.get(0)
																		.get(2) != null ? !groupbyList_tAFOX_3
																		.get(0)
																		.get(2)
																		.equals(valueMap_tAFOX_3
																				.get("RUT_PROVEEDOR"))
																		: valueMap_tAFOX_3
																				.get("RUT_PROVEEDOR") != null)
																|| (groupbyList_tAFOX_3
																		.get(0)
																		.get(3) != null ? !groupbyList_tAFOX_3
																		.get(0)
																		.get(3)
																		.equals(valueMap_tAFOX_3
																				.get("DV"))
																		: valueMap_tAFOX_3
																				.get("DV") != null)
																|| (groupbyList_tAFOX_3
																		.get(0)
																		.get(4) != null ? !groupbyList_tAFOX_3
																		.get(0)
																		.get(4)
																		.equals(valueMap_tAFOX_3
																				.get("PAIS_PROVEEDOR"))
																		: valueMap_tAFOX_3
																				.get("PAIS_PROVEEDOR") != null)
																|| (groupbyList_tAFOX_3
																		.get(0)
																		.get(5) != null ? !groupbyList_tAFOX_3
																		.get(0)
																		.get(5)
																		.equals(valueMap_tAFOX_3
																				.get("FONO"))
																		: valueMap_tAFOX_3
																				.get("FONO") != null)
																|| (groupbyList_tAFOX_3
																		.get(0)
																		.get(6) != null ? !groupbyList_tAFOX_3
																		.get(0)
																		.get(6)
																		.equals(valueMap_tAFOX_3
																				.get("FECHA_CREACION"))
																		: valueMap_tAFOX_3
																				.get("FECHA_CREACION") != null)
																|| (groupbyList_tAFOX_3
																		.get(0)
																		.get(7) != null ? !groupbyList_tAFOX_3
																		.get(0)
																		.get(7)
																		.equals(valueMap_tAFOX_3
																				.get("MAIL"))
																		: valueMap_tAFOX_3
																				.get("MAIL") != null)
																|| (groupbyList_tAFOX_3
																		.get(0)
																		.get(8) != null ? !groupbyList_tAFOX_3
																		.get(0)
																		.get(8)
																		.equals(valueMap_tAFOX_3
																				.get("CONTACTO"))
																		: valueMap_tAFOX_3
																				.get("CONTACTO") != null)) {
															// Is the first new
															// element in
															// groups.
															if (isNewElememt_tAFOX_3 == false
																	&& groupbyList_tAFOX_3
																			.size() > 0) {
																newTabIndex_tAFOX_3 = 0;
															}

															// count the groupby
															// element
															if (groupbyList_tAFOX_3
																	.size() <= 0) {
																groupbyList_tAFOX_3
																		.add(new java.util.ArrayList<String>());
															} else {
																groupbyList_tAFOX_3
																		.get(0)
																		.clear();
															}
															groupbyList_tAFOX_3
																	.get(0)
																	.add(valueMap_tAFOX_3
																			.get("NOMBRE_COMERCIAL"));
															groupbyList_tAFOX_3
																	.get(0)
																	.add(valueMap_tAFOX_3
																			.get("NOMBRE_PROVEEDOR"));
															groupbyList_tAFOX_3
																	.get(0)
																	.add(valueMap_tAFOX_3
																			.get("RUT_PROVEEDOR"));
															groupbyList_tAFOX_3
																	.get(0)
																	.add(valueMap_tAFOX_3
																			.get("DV"));
															groupbyList_tAFOX_3
																	.get(0)
																	.add(valueMap_tAFOX_3
																			.get("PAIS_PROVEEDOR"));
															groupbyList_tAFOX_3
																	.get(0)
																	.add(valueMap_tAFOX_3
																			.get("FONO"));
															groupbyList_tAFOX_3
																	.get(0)
																	.add(valueMap_tAFOX_3
																			.get("FECHA_CREACION"));
															groupbyList_tAFOX_3
																	.get(0)
																	.add(valueMap_tAFOX_3
																			.get("MAIL"));
															groupbyList_tAFOX_3
																	.get(0)
																	.add(valueMap_tAFOX_3
																			.get("CONTACTO"));
															isNewElememt_tAFOX_3 = true;
														}

														// subtree XML string
														// generate
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("  <TablaProceso");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("    <Proveedor");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      <Nombrecomercial");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("NOMBRE_COMERCIAL") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("NOMBRE_COMERCIAL")));
														}
														buf_tAFOX_3
																.append("</Nombrecomercial>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      <Nombreproveedor");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("NOMBRE_PROVEEDOR") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("NOMBRE_PROVEEDOR")));
														}
														buf_tAFOX_3
																.append("</Nombreproveedor>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      <Rutproveedor");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("RUT_PROVEEDOR") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("RUT_PROVEEDOR")));
														}
														buf_tAFOX_3
																.append("</Rutproveedor>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      <Dv");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("DV") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("DV")));
														}
														buf_tAFOX_3
																.append("</Dv>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      <Paisproveedor");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("PAIS_PROVEEDOR") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("PAIS_PROVEEDOR")));
														}
														buf_tAFOX_3
																.append("</Paisproveedor>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      <Fono");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("FONO") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("FONO")));
														}
														buf_tAFOX_3
																.append("</Fono>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      <Fechadecreacion");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("FECHA_CREACION") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("FECHA_CREACION")));
														}
														buf_tAFOX_3
																.append("</Fechadecreacion>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      <Mail");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("MAIL") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("MAIL")));
														}
														buf_tAFOX_3
																.append("</Mail>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      <Contacto");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("CONTACTO") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("CONTACTO")));
														}
														buf_tAFOX_3
																.append("</Contacto>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("    </Proveedor>");
														// buffer the start tabs
														// to group buffer
														groupBuffer_tAFOX_3[0] = buf_tAFOX_3
																.toString();
														buf_tAFOX_3 = new StringBuffer();
														// buffer the end tabs
														// to groupEnd buffer
														groupEndBuffer_tAFOX_3[0] = buf_tAFOX_3
																.toString();
														buf_tAFOX_3 = new StringBuffer();

														// need a new group
														// element Productos or
														// not
														if (isNewElememt_tAFOX_3
																|| groupbyList_tAFOX_3
																		.size() <= 1
																|| groupbyList_tAFOX_3
																		.get(1) == null) {
															// Is the first new
															// element in
															// groups.
															if (isNewElememt_tAFOX_3 == false
																	&& groupbyList_tAFOX_3
																			.size() > 1) {
																newTabIndex_tAFOX_3 = 1;
															}

															// count the groupby
															// element
															if (groupbyList_tAFOX_3
																	.size() <= 1) {
																groupbyList_tAFOX_3
																		.add(new java.util.ArrayList<String>());
															} else {
																groupbyList_tAFOX_3
																		.get(1)
																		.clear();
															}
															isNewElememt_tAFOX_3 = true;
														}

														// subtree XML string
														// generate
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("    <Productos");
														buf_tAFOX_3.append(">");
														// buffer the start tabs
														// to group buffer
														groupBuffer_tAFOX_3[1] = buf_tAFOX_3
																.toString();
														buf_tAFOX_3 = new StringBuffer();
														// buffer the end tabs
														// to groupEnd buffer
														groupEndBuffer_tAFOX_3[1] = buf_tAFOX_3
																.toString();
														buf_tAFOX_3 = new StringBuffer();
														// output the previous
														// groups as there's a
														// new group
														if (newTabIndex_tAFOX_3 >= 0) {
															// out_tAFOX_3.newLine();//Track
															// code
															// output all start
															// tabs buffer
															for (int i_tAFOX_3 = 0; i_tAFOX_3 < startTabs_tAFOX_3.length; i_tAFOX_3++) {
																if (startTabs_tAFOX_3[i_tAFOX_3] != null) {
																	out_tAFOX_3
																			.write(startTabs_tAFOX_3[i_tAFOX_3]);
																}
																startTabs_tAFOX_3[i_tAFOX_3] = null;
															}
															for (int i_tAFOX_3 = preNewTabIndex_tAFOX_3 - 1; i_tAFOX_3 >= 1 + newTabIndex_tAFOX_3; i_tAFOX_3--) {
																if (endTabs_tAFOX_3[i_tAFOX_3] != null) {
																	out_tAFOX_3
																			.write(endTabs_tAFOX_3[i_tAFOX_3]);
																}
																endTabs_tAFOX_3[i_tAFOX_3] = null;
																out_tAFOX_3
																		.newLine();
																out_tAFOX_3
																		.write(endTabStrs_tAFOX_3
																				.get(i_tAFOX_3));
															}
															preNewTabIndex_tAFOX_3 = newTabIndex_tAFOX_3 + 1;
														}

														// set new element
														// groupbuffer to
														// startbuffer
														for (int i_tAFOX_3 = 0; i_tAFOX_3 < groupBuffer_tAFOX_3.length; i_tAFOX_3++) {
															// when newTabIndex
															// is null, must use
															// the
															// perNewTabIndex
															if (i_tAFOX_3 >= preNewTabIndex_tAFOX_3 - 1) {
																startTabs_tAFOX_3[i_tAFOX_3 + 1] = groupBuffer_tAFOX_3[i_tAFOX_3];
																endTabs_tAFOX_3[i_tAFOX_3 + 1] = groupEndBuffer_tAFOX_3[i_tAFOX_3];
															}
														}
														// build loop xml tree
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      <M_ProductosCargados");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Ingresado");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</Ingresado>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <ColorGroup");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("COLOR_GROUP") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("COLOR_GROUP")));
														}
														buf_tAFOX_3
																.append("</ColorGroup>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Descripcion");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("DESCRIPCION") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("DESCRIPCION")));
														}
														buf_tAFOX_3
																.append("</Descripcion>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <DescripcionSublinea");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("DESCRIPCION_SUBLINEA") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("DESCRIPCION_SUBLINEA")));
														}
														buf_tAFOX_3
																.append("</DescripcionSublinea>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <EAN");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("EAN") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("EAN")));
														}
														buf_tAFOX_3
																.append("</EAN>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Evento");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</Evento>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <FechadecreacionSKU");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("FECHA_CREACION_SKU") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("FECHA_CREACION_SKU")));
														}
														buf_tAFOX_3
																.append("</FechadecreacionSKU>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Fotografo");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</Fotografo>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Id_Familia");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("ID_FAMILIA") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("ID_FAMILIA")));
														}
														buf_tAFOX_3
																.append("</Id_Familia>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <IsMarketPlace");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("IS_MARKETPLACE") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("IS_MARKETPLACE")));
														}
														buf_tAFOX_3
																.append("</IsMarketPlace>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <IsVev");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("IS_VEV_VENTA_EN_VERDE") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("IS_VEV_VENTA_EN_VERDE")));
														}
														buf_tAFOX_3
																.append("</IsVev>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Marca");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("MARCA") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("MARCA")));
														}
														buf_tAFOX_3
																.append("</Marca>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Modelo");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("Modelo") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("Modelo")));
														}
														buf_tAFOX_3
																.append("</Modelo>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <OrdendeCompra");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</OrdendeCompra>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Pais");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("PAIS") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("PAIS")));
														}
														buf_tAFOX_3
																.append("</Pais>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <PostProductor");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</PostProductor>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <RequiereArmado");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</RequiereArmado>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <RequierePlanchado");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</RequierePlanchado>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <SKU");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("SKU") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("SKU")));
														}
														buf_tAFOX_3
																.append("</SKU>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Talla");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("TALLA") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("TALLA")));
														}
														buf_tAFOX_3
																.append("</Talla>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Temporada");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("TEMPORADA") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("TEMPORADA")));
														}
														buf_tAFOX_3
																.append("</Temporada>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <URLfoto");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("URLFotos") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("URLFotos")));
														}
														buf_tAFOX_3
																.append("</URLfoto>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <EstadoFoto");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</EstadoFoto>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <EstadoURL");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</EstadoURL>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Flagfoto");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("ID_FlagFoto") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("ID_FlagFoto")));
														}
														buf_tAFOX_3
																.append("</Flagfoto>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <M_PubRcepcionarproductos");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</M_PubRcepcionarproductos>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <InfoProveedor");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Nombrecomercial");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("NOMBRE_COMERCIAL") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("NOMBRE_COMERCIAL")));
														}
														buf_tAFOX_3
																.append("</Nombrecomercial>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Nombreproveedor");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("NOMBRE_PROVEEDOR") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("NOMBRE_PROVEEDOR")));
														}
														buf_tAFOX_3
																.append("</Nombreproveedor>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Rutproveedor");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("RUT_PROVEEDOR") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("RUT_PROVEEDOR")));
														}
														buf_tAFOX_3
																.append("</Rutproveedor>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Dv");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("DV") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("DV")));
														}
														buf_tAFOX_3
																.append("</Dv>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Paisproveedor");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("PAIS_PROVEEDOR") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("PAIS_PROVEEDOR")));
														}
														buf_tAFOX_3
																.append("</Paisproveedor>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Fono");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("FONO") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("FONO")));
														}
														buf_tAFOX_3
																.append("</Fono>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Fechadecreacion");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("FECHA_CREACION") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("FECHA_CREACION")));
														}
														buf_tAFOX_3
																.append("</Fechadecreacion>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Mail");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("MAIL") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("MAIL")));
														}
														buf_tAFOX_3
																.append("</Mail>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Contacto");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</Contacto>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        </InfoProveedor>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <MotivoRechazo");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</MotivoRechazo>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Procedencia");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</Procedencia>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <TipoSet");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</TipoSet>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <EstadoNombre");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</EstadoNombre>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <Origen");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("ID_Origen") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("ID_Origen")));
														}
														buf_tAFOX_3
																.append("</Origen>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <PubRecepcionarproductos");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("</PubRecepcionarproductos>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        <M_JerarquiaProductos");
														buf_tAFOX_3.append(">");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Subclase");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("SUBCLASE") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("SUBCLASE")));
														}
														buf_tAFOX_3
																.append("</Subclase>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Sublinea");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("SUBLINEA") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("SUBLINEA")));
														}
														buf_tAFOX_3
																.append("</Sublinea>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Linea");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("LINEA") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("LINEA")));
														}
														buf_tAFOX_3
																.append("</Linea>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Clase");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("CLASE") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("CLASE")));
														}
														buf_tAFOX_3
																.append("</Clase>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Estilo");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("ESTILO") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("ESTILO")));
														}
														buf_tAFOX_3
																.append("</Estilo>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <DescripcionSubclase");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("DESCRIPCION_SUBCLASE") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("DESCRIPCION_SUBCLASE")));
														}
														buf_tAFOX_3
																.append("</DescripcionSubclase>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("          <Descripcionlinea");
														buf_tAFOX_3.append(">");
														if (valueMap_tAFOX_3
																.get("DESCRIPCION_LINEA") != null) {
															buf_tAFOX_3
																	.append(TalendString
																			.checkCDATAForXML(valueMap_tAFOX_3
																					.get("DESCRIPCION_LINEA")));
														}
														buf_tAFOX_3
																.append("</Descripcionlinea>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("        </M_JerarquiaProductos>");
														buf_tAFOX_3
																.append("\n");
														buf_tAFOX_3
																.append("      </M_ProductosCargados>");
														// output all buffer
														for (int i_tAFOX_3 = 0; i_tAFOX_3 < startTabs_tAFOX_3.length; i_tAFOX_3++) {
															if (startTabs_tAFOX_3[i_tAFOX_3] != null
																	&& startTabs_tAFOX_3[i_tAFOX_3]
																			.length() > 0) {
																out_tAFOX_3
																		.write(startTabs_tAFOX_3[i_tAFOX_3]);
																startTabs_tAFOX_3[i_tAFOX_3] = null;
															}
														}
														out_tAFOX_3
																.write(buf_tAFOX_3
																		.toString());
														preNewTabIndex_tAFOX_3 = 3;

														tos_count_tAdvancedFileOutputXML_3++;

														/**
														 * [
														 * tAdvancedFileOutputXML_3
														 * main ] stop
														 */

													} // End of branch "row36"

													// Start of branch "row15"
													if (row15 != null) {

														/**
														 * [tFilterRow_4 main ]
														 * start
														 */

														currentComponent = "tFilterRow_4";

														// row15
														// row15

														if (execStat) {
															runStat.updateStatOnConnection(
																	"row15"
																			+ iterateId,
																	1, 1);
														}

														row17 = null;
														row31 = null;
														Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4(
																"&&");
														ope_tFilterRow_4
																.matches(
																		(// Origen
																			// NACIONAL
																			// o
																			// IMPORTADO
																		(row15.ID_Origen == 1 || row15.ID_Origen == 2) &&
																		// Flag
																		// foto
																		// FOTO
																		// PROVEEDOR
																		(row15.ID_FlagFoto == 2)),
																		"advanced condition failed");

														if (ope_tFilterRow_4
																.getMatchFlag()) {
															if (row31 == null) {
																row31 = new row31Struct();
															}
															row31.DESCRIPCION_LINEA = row15.DESCRIPCION_LINEA;
															row31.LINEA = row15.LINEA;
															row31.DESCRIPCION_SUBLINEA = row15.DESCRIPCION_SUBLINEA;
															row31.SUBLINEA = row15.SUBLINEA;
															row31.DESCRIPCION_CLASE = row15.DESCRIPCION_CLASE;
															row31.CLASE = row15.CLASE;
															row31.DESCRIPCION_SUBCLASE = row15.DESCRIPCION_SUBCLASE;
															row31.SUBCLASE = row15.SUBCLASE;
															row31.FECHA_CREACION_SKU = row15.FECHA_CREACION_SKU;
															row31.Modelo = row15.Modelo;
															row31.EAN = row15.EAN;
															row31.DESCRIPCION = row15.DESCRIPCION;
															row31.MARCA = row15.MARCA;
															row31.COLOR_GROUP = row15.COLOR_GROUP;
															row31.TALLA = row15.TALLA;
															row31.TEMPORADA = row15.TEMPORADA;
															row31.SKU = row15.SKU;
															row31.ESTILO = row15.ESTILO;
															row31.ID_FAMILIA = row15.ID_FAMILIA;
															row31.FLAG_FOTO_INICIAL = row15.FLAG_FOTO_INICIAL;
															row31.FLAG_FOTO_FINAL = row15.FLAG_FOTO_FINAL;
															row31.URL_DE_LA_FOTO_1 = row15.URL_DE_LA_FOTO_1;
															row31.URL_DE_LA_FOTO_2 = row15.URL_DE_LA_FOTO_2;
															row31.URL_DE_LA_FOTO_3 = row15.URL_DE_LA_FOTO_3;
															row31.URL_DE_LA_FOTO_4 = row15.URL_DE_LA_FOTO_4;
															row31.URL_DE_LA_FOTO_5 = row15.URL_DE_LA_FOTO_5;
															row31.ORIGEN = row15.ORIGEN;
															row31.IS_MARKETPLACE = row15.IS_MARKETPLACE;
															row31.IS_VEV_VENTA_EN_VERDE = row15.IS_VEV_VENTA_EN_VERDE;
															row31.NOMBRE_COMERCIAL = row15.NOMBRE_COMERCIAL;
															row31.NOMBRE_PROVEEDOR = row15.NOMBRE_PROVEEDOR;
															row31.RUT_PROVEEDOR = row15.RUT_PROVEEDOR;
															row31.DV = row15.DV;
															row31.PAIS_PROVEEDOR = row15.PAIS_PROVEEDOR;
															row31.FONO = row15.FONO;
															row31.FECHA_CREACION = row15.FECHA_CREACION;
															row31.MAIL = row15.MAIL;
															row31.CONTACTO = row15.CONTACTO;
															row31.PAIS = row15.PAIS;
															row31.ID_Origen = row15.ID_Origen;
															row31.ID_FlagFoto = row15.ID_FlagFoto;
															row31.URLFotos = row15.URLFotos;
															row31.errorMessage = row15.errorMessage;
															nb_line_ok_tFilterRow_4++;
														} else {
															if (row17 == null) {
																row17 = new row17Struct();
															}
															row17.DESCRIPCION_LINEA = row15.DESCRIPCION_LINEA;
															row17.LINEA = row15.LINEA;
															row17.DESCRIPCION_SUBLINEA = row15.DESCRIPCION_SUBLINEA;
															row17.SUBLINEA = row15.SUBLINEA;
															row17.DESCRIPCION_CLASE = row15.DESCRIPCION_CLASE;
															row17.CLASE = row15.CLASE;
															row17.DESCRIPCION_SUBCLASE = row15.DESCRIPCION_SUBCLASE;
															row17.SUBCLASE = row15.SUBCLASE;
															row17.FECHA_CREACION_SKU = row15.FECHA_CREACION_SKU;
															row17.Modelo = row15.Modelo;
															row17.EAN = row15.EAN;
															row17.DESCRIPCION = row15.DESCRIPCION;
															row17.MARCA = row15.MARCA;
															row17.COLOR_GROUP = row15.COLOR_GROUP;
															row17.TALLA = row15.TALLA;
															row17.TEMPORADA = row15.TEMPORADA;
															row17.SKU = row15.SKU;
															row17.ESTILO = row15.ESTILO;
															row17.ID_FAMILIA = row15.ID_FAMILIA;
															row17.FLAG_FOTO_INICIAL = row15.FLAG_FOTO_INICIAL;
															row17.FLAG_FOTO_FINAL = row15.FLAG_FOTO_FINAL;
															row17.URL_DE_LA_FOTO_1 = row15.URL_DE_LA_FOTO_1;
															row17.URL_DE_LA_FOTO_2 = row15.URL_DE_LA_FOTO_2;
															row17.URL_DE_LA_FOTO_3 = row15.URL_DE_LA_FOTO_3;
															row17.URL_DE_LA_FOTO_4 = row15.URL_DE_LA_FOTO_4;
															row17.URL_DE_LA_FOTO_5 = row15.URL_DE_LA_FOTO_5;
															row17.ORIGEN = row15.ORIGEN;
															row17.IS_MARKETPLACE = row15.IS_MARKETPLACE;
															row17.IS_VEV_VENTA_EN_VERDE = row15.IS_VEV_VENTA_EN_VERDE;
															row17.NOMBRE_COMERCIAL = row15.NOMBRE_COMERCIAL;
															row17.NOMBRE_PROVEEDOR = row15.NOMBRE_PROVEEDOR;
															row17.RUT_PROVEEDOR = row15.RUT_PROVEEDOR;
															row17.DV = row15.DV;
															row17.PAIS_PROVEEDOR = row15.PAIS_PROVEEDOR;
															row17.FONO = row15.FONO;
															row17.FECHA_CREACION = row15.FECHA_CREACION;
															row17.MAIL = row15.MAIL;
															row17.CONTACTO = row15.CONTACTO;
															row17.PAIS = row15.PAIS;
															row17.ID_Origen = row15.ID_Origen;
															row17.ID_FlagFoto = row15.ID_FlagFoto;
															row17.URLFotos = row15.URLFotos;
															row17.errorMessage = ope_tFilterRow_4
																	.getErrorMsg();
															nb_line_reject_tFilterRow_4++;
														}

														nb_line_tFilterRow_4++;

														tos_count_tFilterRow_4++;

														/**
														 * [tFilterRow_4 main ]
														 * stop
														 */
														// Start of branch
														// "row31"
														if (row31 != null) {

															/**
															 * [
															 * tAdvancedFileOutputXML_1
															 * main ] start
															 */

															currentComponent = "tAdvancedFileOutputXML_1";

															// row31
															// row31

															if (execStat) {
																runStat.updateStatOnConnection(
																		"row31"
																				+ iterateId,
																		1, 1);
															}

															nb_line_tAFOX_1++;
															valueMap_tAFOX_1
																	.clear();
															valueMap_tAFOX_1
																	.put("DESCRIPCION_LINEA",
																			(row31.DESCRIPCION_LINEA != null ? row31.DESCRIPCION_LINEA
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("LINEA",
																			(row31.LINEA != null ? row31.LINEA
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("DESCRIPCION_SUBLINEA",
																			(row31.DESCRIPCION_SUBLINEA != null ? row31.DESCRIPCION_SUBLINEA
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("SUBLINEA",
																			(row31.SUBLINEA != null ? row31.SUBLINEA
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("DESCRIPCION_CLASE",
																			(row31.DESCRIPCION_CLASE != null ? row31.DESCRIPCION_CLASE
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("CLASE",
																			(row31.CLASE != null ? row31.CLASE
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("DESCRIPCION_SUBCLASE",
																			(row31.DESCRIPCION_SUBCLASE != null ? row31.DESCRIPCION_SUBCLASE
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("SUBCLASE",
																			(row31.SUBCLASE != null ? row31.SUBCLASE
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("FECHA_CREACION_SKU",
																			(row31.FECHA_CREACION_SKU != null ? FormatterUtils
																					.format_Date(
																							row31.FECHA_CREACION_SKU,
																							"yyyy-MM-dd HH:mm:ss")
																					: null));
															valueMap_tAFOX_1
																	.put("Modelo",
																			(row31.Modelo != null ? row31.Modelo
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("EAN",
																			(row31.EAN != null ? row31.EAN
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("DESCRIPCION",
																			(row31.DESCRIPCION != null ? row31.DESCRIPCION
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("MARCA",
																			(row31.MARCA != null ? row31.MARCA
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("COLOR_GROUP",
																			(row31.COLOR_GROUP != null ? row31.COLOR_GROUP
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("TALLA",
																			(row31.TALLA != null ? row31.TALLA
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("TEMPORADA",
																			(row31.TEMPORADA != null ? row31.TEMPORADA
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("SKU",
																			(row31.SKU != null ? row31.SKU
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("ESTILO",
																			(row31.ESTILO != null ? row31.ESTILO
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("ID_FAMILIA",
																			(row31.ID_FAMILIA != null ? row31.ID_FAMILIA
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("FLAG_FOTO_INICIAL",
																			(row31.FLAG_FOTO_INICIAL != null ? row31.FLAG_FOTO_INICIAL
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("FLAG_FOTO_FINAL",
																			(row31.FLAG_FOTO_FINAL != null ? row31.FLAG_FOTO_FINAL
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("URL_DE_LA_FOTO_1",
																			(row31.URL_DE_LA_FOTO_1 != null ? row31.URL_DE_LA_FOTO_1
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("URL_DE_LA_FOTO_2",
																			(row31.URL_DE_LA_FOTO_2 != null ? row31.URL_DE_LA_FOTO_2
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("URL_DE_LA_FOTO_3",
																			(row31.URL_DE_LA_FOTO_3 != null ? row31.URL_DE_LA_FOTO_3
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("URL_DE_LA_FOTO_4",
																			(row31.URL_DE_LA_FOTO_4 != null ? row31.URL_DE_LA_FOTO_4
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("URL_DE_LA_FOTO_5",
																			(row31.URL_DE_LA_FOTO_5 != null ? row31.URL_DE_LA_FOTO_5
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("ORIGEN",
																			(row31.ORIGEN != null ? row31.ORIGEN
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("IS_MARKETPLACE",
																			(row31.IS_MARKETPLACE != null ? row31.IS_MARKETPLACE
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("IS_VEV_VENTA_EN_VERDE",
																			(row31.IS_VEV_VENTA_EN_VERDE != null ? row31.IS_VEV_VENTA_EN_VERDE
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("NOMBRE_COMERCIAL",
																			(row31.NOMBRE_COMERCIAL != null ? row31.NOMBRE_COMERCIAL
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("NOMBRE_PROVEEDOR",
																			(row31.NOMBRE_PROVEEDOR != null ? row31.NOMBRE_PROVEEDOR
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("RUT_PROVEEDOR",
																			(row31.RUT_PROVEEDOR != null ? row31.RUT_PROVEEDOR
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("DV",
																			(row31.DV != null ? row31.DV
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("PAIS_PROVEEDOR",
																			(row31.PAIS_PROVEEDOR != null ? row31.PAIS_PROVEEDOR
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("FONO",
																			(row31.FONO != null ? row31.FONO
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("FECHA_CREACION",
																			(row31.FECHA_CREACION != null ? FormatterUtils
																					.format_Date(
																							row31.FECHA_CREACION,
																							"yyyy-MM-dd HH:mm:ss")
																					: null));
															valueMap_tAFOX_1
																	.put("MAIL",
																			(row31.MAIL != null ? row31.MAIL
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("CONTACTO",
																			(row31.CONTACTO != null ? row31.CONTACTO
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("PAIS",
																			(row31.PAIS != null ? row31.PAIS
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("ID_Origen",
																			(row31.ID_Origen != null ? row31.ID_Origen
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("ID_FlagFoto",
																			(row31.ID_FlagFoto != null ? row31.ID_FlagFoto
																					.toString()
																					: null));
															valueMap_tAFOX_1
																	.put("URLFotos",
																			(row31.URLFotos
																					.toString()));
															valueMap_tAFOX_1
																	.put("errorMessage",
																			(row31.errorMessage != null ? row31.errorMessage
																					.toString()
																					: null));
															StringBuffer buf_tAFOX_1 = new StringBuffer();
															// init value is 0
															// not -1, because
															// it will output
															// the root tab when
															// all the row value
															// is null.
															int unNullMaxIndex_tAFOX_1 = 0;

															// build root xml
															// tree
															if (needRoot_tAFOX_1) {
																needRoot_tAFOX_1 = false;
																buf_tAFOX_1
																		.append("\n");
																buf_tAFOX_1
																		.append("<Entities");
																buf_tAFOX_1
																		.append(">");
																out_tAFOX_1
																		.write(buf_tAFOX_1
																				.toString());
																buf_tAFOX_1 = new StringBuffer();
																endTabs_tAFOX_1[0] = buf_tAFOX_1
																		.toString();
																buf_tAFOX_1 = new StringBuffer();
															}

															// build group xml
															// tree
															boolean isNewElememt_tAFOX_1 = false;
															// The index of
															// group element
															// which is the
															// first new group
															// in groups.
															int newTabIndex_tAFOX_1 = -1;
															// Buffer all group
															// tab XML, then set
															// to
															// startTabBuffer.
															String[] groupBuffer_tAFOX_1 = new String[2];
															String[] groupEndBuffer_tAFOX_1 = new String[2];

															// need a new group
															// element
															// TablaProceso or
															// not
															if (isNewElememt_tAFOX_1
																	|| groupbyList_tAFOX_1
																			.size() <= 0
																	|| groupbyList_tAFOX_1
																			.get(0) == null
																	|| (groupbyList_tAFOX_1
																			.get(0)
																			.get(0) != null ? !groupbyList_tAFOX_1
																			.get(0)
																			.get(0)
																			.equals(valueMap_tAFOX_1
																					.get("NOMBRE_COMERCIAL"))
																			: valueMap_tAFOX_1
																					.get("NOMBRE_COMERCIAL") != null)
																	|| (groupbyList_tAFOX_1
																			.get(0)
																			.get(1) != null ? !groupbyList_tAFOX_1
																			.get(0)
																			.get(1)
																			.equals(valueMap_tAFOX_1
																					.get("NOMBRE_PROVEEDOR"))
																			: valueMap_tAFOX_1
																					.get("NOMBRE_PROVEEDOR") != null)
																	|| (groupbyList_tAFOX_1
																			.get(0)
																			.get(2) != null ? !groupbyList_tAFOX_1
																			.get(0)
																			.get(2)
																			.equals(valueMap_tAFOX_1
																					.get("RUT_PROVEEDOR"))
																			: valueMap_tAFOX_1
																					.get("RUT_PROVEEDOR") != null)
																	|| (groupbyList_tAFOX_1
																			.get(0)
																			.get(3) != null ? !groupbyList_tAFOX_1
																			.get(0)
																			.get(3)
																			.equals(valueMap_tAFOX_1
																					.get("DV"))
																			: valueMap_tAFOX_1
																					.get("DV") != null)
																	|| (groupbyList_tAFOX_1
																			.get(0)
																			.get(4) != null ? !groupbyList_tAFOX_1
																			.get(0)
																			.get(4)
																			.equals(valueMap_tAFOX_1
																					.get("PAIS_PROVEEDOR"))
																			: valueMap_tAFOX_1
																					.get("PAIS_PROVEEDOR") != null)
																	|| (groupbyList_tAFOX_1
																			.get(0)
																			.get(5) != null ? !groupbyList_tAFOX_1
																			.get(0)
																			.get(5)
																			.equals(valueMap_tAFOX_1
																					.get("FONO"))
																			: valueMap_tAFOX_1
																					.get("FONO") != null)
																	|| (groupbyList_tAFOX_1
																			.get(0)
																			.get(6) != null ? !groupbyList_tAFOX_1
																			.get(0)
																			.get(6)
																			.equals(valueMap_tAFOX_1
																					.get("FECHA_CREACION"))
																			: valueMap_tAFOX_1
																					.get("FECHA_CREACION") != null)
																	|| (groupbyList_tAFOX_1
																			.get(0)
																			.get(7) != null ? !groupbyList_tAFOX_1
																			.get(0)
																			.get(7)
																			.equals(valueMap_tAFOX_1
																					.get("MAIL"))
																			: valueMap_tAFOX_1
																					.get("MAIL") != null)
																	|| (groupbyList_tAFOX_1
																			.get(0)
																			.get(8) != null ? !groupbyList_tAFOX_1
																			.get(0)
																			.get(8)
																			.equals(valueMap_tAFOX_1
																					.get("CONTACTO"))
																			: valueMap_tAFOX_1
																					.get("CONTACTO") != null)) {
																// Is the first
																// new element
																// in groups.
																if (isNewElememt_tAFOX_1 == false
																		&& groupbyList_tAFOX_1
																				.size() > 0) {
																	newTabIndex_tAFOX_1 = 0;
																}

																// count the
																// groupby
																// element
																if (groupbyList_tAFOX_1
																		.size() <= 0) {
																	groupbyList_tAFOX_1
																			.add(new java.util.ArrayList<String>());
																} else {
																	groupbyList_tAFOX_1
																			.get(0)
																			.clear();
																}
																groupbyList_tAFOX_1
																		.get(0)
																		.add(valueMap_tAFOX_1
																				.get("NOMBRE_COMERCIAL"));
																groupbyList_tAFOX_1
																		.get(0)
																		.add(valueMap_tAFOX_1
																				.get("NOMBRE_PROVEEDOR"));
																groupbyList_tAFOX_1
																		.get(0)
																		.add(valueMap_tAFOX_1
																				.get("RUT_PROVEEDOR"));
																groupbyList_tAFOX_1
																		.get(0)
																		.add(valueMap_tAFOX_1
																				.get("DV"));
																groupbyList_tAFOX_1
																		.get(0)
																		.add(valueMap_tAFOX_1
																				.get("PAIS_PROVEEDOR"));
																groupbyList_tAFOX_1
																		.get(0)
																		.add(valueMap_tAFOX_1
																				.get("FONO"));
																groupbyList_tAFOX_1
																		.get(0)
																		.add(valueMap_tAFOX_1
																				.get("FECHA_CREACION"));
																groupbyList_tAFOX_1
																		.get(0)
																		.add(valueMap_tAFOX_1
																				.get("MAIL"));
																groupbyList_tAFOX_1
																		.get(0)
																		.add(valueMap_tAFOX_1
																				.get("CONTACTO"));
																isNewElememt_tAFOX_1 = true;
															}

															// subtree XML
															// string generate
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("  <TablaProceso");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("    <Proveedor");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      <Nombrecomercial");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("NOMBRE_COMERCIAL") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("NOMBRE_COMERCIAL")));
															}
															buf_tAFOX_1
																	.append("</Nombrecomercial>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      <Nombreproveedor");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("NOMBRE_PROVEEDOR") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("NOMBRE_PROVEEDOR")));
															}
															buf_tAFOX_1
																	.append("</Nombreproveedor>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      <Rutproveedor");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("RUT_PROVEEDOR") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("RUT_PROVEEDOR")));
															}
															buf_tAFOX_1
																	.append("</Rutproveedor>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      <Dv");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("DV") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("DV")));
															}
															buf_tAFOX_1
																	.append("</Dv>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      <Paisproveedor");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("PAIS_PROVEEDOR") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("PAIS_PROVEEDOR")));
															}
															buf_tAFOX_1
																	.append("</Paisproveedor>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      <Fono");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("FONO") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("FONO")));
															}
															buf_tAFOX_1
																	.append("</Fono>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      <Fechadecreacion");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("FECHA_CREACION") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("FECHA_CREACION")));
															}
															buf_tAFOX_1
																	.append("</Fechadecreacion>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      <Mail");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("MAIL") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("MAIL")));
															}
															buf_tAFOX_1
																	.append("</Mail>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      <Contacto");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("CONTACTO") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("CONTACTO")));
															}
															buf_tAFOX_1
																	.append("</Contacto>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("    </Proveedor>");
															// buffer the start
															// tabs to group
															// buffer
															groupBuffer_tAFOX_1[0] = buf_tAFOX_1
																	.toString();
															buf_tAFOX_1 = new StringBuffer();
															// buffer the end
															// tabs to groupEnd
															// buffer
															groupEndBuffer_tAFOX_1[0] = buf_tAFOX_1
																	.toString();
															buf_tAFOX_1 = new StringBuffer();

															// need a new group
															// element Productos
															// or not
															if (isNewElememt_tAFOX_1
																	|| groupbyList_tAFOX_1
																			.size() <= 1
																	|| groupbyList_tAFOX_1
																			.get(1) == null) {
																// Is the first
																// new element
																// in groups.
																if (isNewElememt_tAFOX_1 == false
																		&& groupbyList_tAFOX_1
																				.size() > 1) {
																	newTabIndex_tAFOX_1 = 1;
																}

																// count the
																// groupby
																// element
																if (groupbyList_tAFOX_1
																		.size() <= 1) {
																	groupbyList_tAFOX_1
																			.add(new java.util.ArrayList<String>());
																} else {
																	groupbyList_tAFOX_1
																			.get(1)
																			.clear();
																}
																isNewElememt_tAFOX_1 = true;
															}

															// subtree XML
															// string generate
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("    <Productos");
															buf_tAFOX_1
																	.append(">");
															// buffer the start
															// tabs to group
															// buffer
															groupBuffer_tAFOX_1[1] = buf_tAFOX_1
																	.toString();
															buf_tAFOX_1 = new StringBuffer();
															// buffer the end
															// tabs to groupEnd
															// buffer
															groupEndBuffer_tAFOX_1[1] = buf_tAFOX_1
																	.toString();
															buf_tAFOX_1 = new StringBuffer();
															// output the
															// previous groups
															// as there's a new
															// group
															if (newTabIndex_tAFOX_1 >= 0) {
																// out_tAFOX_1.newLine();//Track
																// code
																// output all
																// start tabs
																// buffer
																for (int i_tAFOX_1 = 0; i_tAFOX_1 < startTabs_tAFOX_1.length; i_tAFOX_1++) {
																	if (startTabs_tAFOX_1[i_tAFOX_1] != null) {
																		out_tAFOX_1
																				.write(startTabs_tAFOX_1[i_tAFOX_1]);
																	}
																	startTabs_tAFOX_1[i_tAFOX_1] = null;
																}
																for (int i_tAFOX_1 = preNewTabIndex_tAFOX_1 - 1; i_tAFOX_1 >= 1 + newTabIndex_tAFOX_1; i_tAFOX_1--) {
																	if (endTabs_tAFOX_1[i_tAFOX_1] != null) {
																		out_tAFOX_1
																				.write(endTabs_tAFOX_1[i_tAFOX_1]);
																	}
																	endTabs_tAFOX_1[i_tAFOX_1] = null;
																	out_tAFOX_1
																			.newLine();
																	out_tAFOX_1
																			.write(endTabStrs_tAFOX_1
																					.get(i_tAFOX_1));
																}
																preNewTabIndex_tAFOX_1 = newTabIndex_tAFOX_1 + 1;
															}

															// set new element
															// groupbuffer to
															// startbuffer
															for (int i_tAFOX_1 = 0; i_tAFOX_1 < groupBuffer_tAFOX_1.length; i_tAFOX_1++) {
																// when
																// newTabIndex
																// is null, must
																// use the
																// perNewTabIndex
																if (i_tAFOX_1 >= preNewTabIndex_tAFOX_1 - 1) {
																	startTabs_tAFOX_1[i_tAFOX_1 + 1] = groupBuffer_tAFOX_1[i_tAFOX_1];
																	endTabs_tAFOX_1[i_tAFOX_1 + 1] = groupEndBuffer_tAFOX_1[i_tAFOX_1];
																}
															}
															// build loop xml
															// tree
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      <M_ProductosCargados");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Ingresado");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</Ingresado>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <ColorGroup");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("COLOR_GROUP") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("COLOR_GROUP")));
															}
															buf_tAFOX_1
																	.append("</ColorGroup>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Descripcion");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("DESCRIPCION") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("DESCRIPCION")));
															}
															buf_tAFOX_1
																	.append("</Descripcion>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <DescripcionSublinea");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("DESCRIPCION_SUBLINEA") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("DESCRIPCION_SUBLINEA")));
															}
															buf_tAFOX_1
																	.append("</DescripcionSublinea>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <EAN");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("EAN") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("EAN")));
															}
															buf_tAFOX_1
																	.append("</EAN>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Evento");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</Evento>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <FechadecreacionSKU");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("FECHA_CREACION_SKU") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("FECHA_CREACION_SKU")));
															}
															buf_tAFOX_1
																	.append("</FechadecreacionSKU>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Fotografo");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</Fotografo>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Id_Familia");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("ID_FAMILIA") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("ID_FAMILIA")));
															}
															buf_tAFOX_1
																	.append("</Id_Familia>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <IsMarketPlace");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("IS_MARKETPLACE") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("IS_MARKETPLACE")));
															}
															buf_tAFOX_1
																	.append("</IsMarketPlace>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <IsVev");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("IS_VEV_VENTA_EN_VERDE") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("IS_VEV_VENTA_EN_VERDE")));
															}
															buf_tAFOX_1
																	.append("</IsVev>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Marca");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("MARCA") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("MARCA")));
															}
															buf_tAFOX_1
																	.append("</Marca>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Modelo");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("Modelo") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("Modelo")));
															}
															buf_tAFOX_1
																	.append("</Modelo>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <OrdendeCompra");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</OrdendeCompra>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Pais");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("PAIS") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("PAIS")));
															}
															buf_tAFOX_1
																	.append("</Pais>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <PostProductor");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</PostProductor>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <RequiereArmado");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</RequiereArmado>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <RequierePlanchado");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</RequierePlanchado>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <SKU");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("SKU") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("SKU")));
															}
															buf_tAFOX_1
																	.append("</SKU>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Talla");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("TALLA") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("TALLA")));
															}
															buf_tAFOX_1
																	.append("</Talla>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Temporada");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("TEMPORADA") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("TEMPORADA")));
															}
															buf_tAFOX_1
																	.append("</Temporada>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <URLfoto");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("URLFotos") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("URLFotos")));
															}
															buf_tAFOX_1
																	.append("</URLfoto>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <EstadoFoto");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</EstadoFoto>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <EstadoURL");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</EstadoURL>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Flagfoto");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("ID_FlagFoto") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("ID_FlagFoto")));
															}
															buf_tAFOX_1
																	.append("</Flagfoto>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <M_PubRcepcionarproductos");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</M_PubRcepcionarproductos>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <InfoProveedor");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Nombrecomercial");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("NOMBRE_COMERCIAL") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("NOMBRE_COMERCIAL")));
															}
															buf_tAFOX_1
																	.append("</Nombrecomercial>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Nombreproveedor");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("NOMBRE_PROVEEDOR") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("NOMBRE_PROVEEDOR")));
															}
															buf_tAFOX_1
																	.append("</Nombreproveedor>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Rutproveedor");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("RUT_PROVEEDOR") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("RUT_PROVEEDOR")));
															}
															buf_tAFOX_1
																	.append("</Rutproveedor>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Dv");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("DV") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("DV")));
															}
															buf_tAFOX_1
																	.append("</Dv>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Paisproveedor");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("PAIS_PROVEEDOR") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("PAIS_PROVEEDOR")));
															}
															buf_tAFOX_1
																	.append("</Paisproveedor>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Fono");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("FONO") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("FONO")));
															}
															buf_tAFOX_1
																	.append("</Fono>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Fechadecreacion");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("FECHA_CREACION") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("FECHA_CREACION")));
															}
															buf_tAFOX_1
																	.append("</Fechadecreacion>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Mail");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("MAIL") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("MAIL")));
															}
															buf_tAFOX_1
																	.append("</Mail>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Contacto");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</Contacto>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        </InfoProveedor>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <MotivoRechazo");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</MotivoRechazo>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Procedencia");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</Procedencia>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <TipoSet");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</TipoSet>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <EstadoNombre");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</EstadoNombre>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <Origen");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("ID_Origen") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("ID_Origen")));
															}
															buf_tAFOX_1
																	.append("</Origen>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <PubRecepcionarproductos");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("</PubRecepcionarproductos>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        <M_JerarquiaProductos");
															buf_tAFOX_1
																	.append(">");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Subclase");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("SUBCLASE") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("SUBCLASE")));
															}
															buf_tAFOX_1
																	.append("</Subclase>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Sublinea");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("SUBLINEA") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("SUBLINEA")));
															}
															buf_tAFOX_1
																	.append("</Sublinea>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Linea");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("LINEA") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("LINEA")));
															}
															buf_tAFOX_1
																	.append("</Linea>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Clase");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("CLASE") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("CLASE")));
															}
															buf_tAFOX_1
																	.append("</Clase>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Estilo");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("ESTILO") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("ESTILO")));
															}
															buf_tAFOX_1
																	.append("</Estilo>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <DescripcionSubclase");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("DESCRIPCION_SUBCLASE") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("DESCRIPCION_SUBCLASE")));
															}
															buf_tAFOX_1
																	.append("</DescripcionSubclase>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("          <Descripcionlinea");
															buf_tAFOX_1
																	.append(">");
															if (valueMap_tAFOX_1
																	.get("DESCRIPCION_LINEA") != null) {
																buf_tAFOX_1
																		.append(TalendString
																				.checkCDATAForXML(valueMap_tAFOX_1
																						.get("DESCRIPCION_LINEA")));
															}
															buf_tAFOX_1
																	.append("</Descripcionlinea>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("        </M_JerarquiaProductos>");
															buf_tAFOX_1
																	.append("\n");
															buf_tAFOX_1
																	.append("      </M_ProductosCargados>");
															// output all buffer
															for (int i_tAFOX_1 = 0; i_tAFOX_1 < startTabs_tAFOX_1.length; i_tAFOX_1++) {
																if (startTabs_tAFOX_1[i_tAFOX_1] != null
																		&& startTabs_tAFOX_1[i_tAFOX_1]
																				.length() > 0) {
																	out_tAFOX_1
																			.write(startTabs_tAFOX_1[i_tAFOX_1]);
																	startTabs_tAFOX_1[i_tAFOX_1] = null;
																}
															}
															out_tAFOX_1
																	.write(buf_tAFOX_1
																			.toString());
															preNewTabIndex_tAFOX_1 = 3;

															tos_count_tAdvancedFileOutputXML_1++;

															/**
															 * [
															 * tAdvancedFileOutputXML_1
															 * main ] stop
															 */

														} // End of branch
															// "row31"

														// Start of branch
														// "row17"
														if (row17 != null) {

															/**
															 * [tFilterRow_5
															 * main ] start
															 */

															currentComponent = "tFilterRow_5";

															// row17
															// row17

															if (execStat) {
																runStat.updateStatOnConnection(
																		"row17"
																				+ iterateId,
																		1, 1);
															}

															row18 = null;
															Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5(
																	"&&");
															ope_tFilterRow_5
																	.matches(
																			(// Origen
																				// NACIONAL
																			(row17.ID_Origen == 1) &&
																			// Flag
																			// foto
																			// MUESTRA
																			(row17.ID_FlagFoto == 1)),
																			"advanced condition failed");

															if (ope_tFilterRow_5
																	.getMatchFlag()) {
																if (row18 == null) {
																	row18 = new row18Struct();
																}
																row18.DESCRIPCION_LINEA = row17.DESCRIPCION_LINEA;
																row18.LINEA = row17.LINEA;
																row18.DESCRIPCION_SUBLINEA = row17.DESCRIPCION_SUBLINEA;
																row18.SUBLINEA = row17.SUBLINEA;
																row18.DESCRIPCION_CLASE = row17.DESCRIPCION_CLASE;
																row18.CLASE = row17.CLASE;
																row18.DESCRIPCION_SUBCLASE = row17.DESCRIPCION_SUBCLASE;
																row18.SUBCLASE = row17.SUBCLASE;
																row18.FECHA_CREACION_SKU = row17.FECHA_CREACION_SKU;
																row18.Modelo = row17.Modelo;
																row18.EAN = row17.EAN;
																row18.DESCRIPCION = row17.DESCRIPCION;
																row18.MARCA = row17.MARCA;
																row18.COLOR_GROUP = row17.COLOR_GROUP;
																row18.TALLA = row17.TALLA;
																row18.TEMPORADA = row17.TEMPORADA;
																row18.SKU = row17.SKU;
																row18.ESTILO = row17.ESTILO;
																row18.ID_FAMILIA = row17.ID_FAMILIA;
																row18.FLAG_FOTO_INICIAL = row17.FLAG_FOTO_INICIAL;
																row18.FLAG_FOTO_FINAL = row17.FLAG_FOTO_FINAL;
																row18.URL_DE_LA_FOTO_1 = row17.URL_DE_LA_FOTO_1;
																row18.URL_DE_LA_FOTO_2 = row17.URL_DE_LA_FOTO_2;
																row18.URL_DE_LA_FOTO_3 = row17.URL_DE_LA_FOTO_3;
																row18.URL_DE_LA_FOTO_4 = row17.URL_DE_LA_FOTO_4;
																row18.URL_DE_LA_FOTO_5 = row17.URL_DE_LA_FOTO_5;
																row18.ORIGEN = row17.ORIGEN;
																row18.IS_MARKETPLACE = row17.IS_MARKETPLACE;
																row18.IS_VEV_VENTA_EN_VERDE = row17.IS_VEV_VENTA_EN_VERDE;
																row18.NOMBRE_COMERCIAL = row17.NOMBRE_COMERCIAL;
																row18.NOMBRE_PROVEEDOR = row17.NOMBRE_PROVEEDOR;
																row18.RUT_PROVEEDOR = row17.RUT_PROVEEDOR;
																row18.DV = row17.DV;
																row18.PAIS_PROVEEDOR = row17.PAIS_PROVEEDOR;
																row18.FONO = row17.FONO;
																row18.FECHA_CREACION = row17.FECHA_CREACION;
																row18.MAIL = row17.MAIL;
																row18.CONTACTO = row17.CONTACTO;
																row18.PAIS = row17.PAIS;
																row18.ID_Origen = row17.ID_Origen;
																row18.ID_FlagFoto = row17.ID_FlagFoto;
																row18.URLFotos = row17.URLFotos;
																row18.errorMessage = row17.errorMessage;
																nb_line_ok_tFilterRow_5++;
															} else {
																nb_line_reject_tFilterRow_5++;
															}

															nb_line_tFilterRow_5++;

															tos_count_tFilterRow_5++;

															/**
															 * [tFilterRow_5
															 * main ] stop
															 */
															// Start of branch
															// "row18"
															if (row18 != null) {

																/**
																 * [
																 * tAdvancedFileOutputXML_2
																 * main ] start
																 */

																currentComponent = "tAdvancedFileOutputXML_2";

																// row18
																// row18

																if (execStat) {
																	runStat.updateStatOnConnection(
																			"row18"
																					+ iterateId,
																			1,
																			1);
																}

																nb_line_tAFOX_2++;
																valueMap_tAFOX_2
																		.clear();
																valueMap_tAFOX_2
																		.put("DESCRIPCION_LINEA",
																				(row18.DESCRIPCION_LINEA != null ? row18.DESCRIPCION_LINEA
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("LINEA",
																				(row18.LINEA != null ? row18.LINEA
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("DESCRIPCION_SUBLINEA",
																				(row18.DESCRIPCION_SUBLINEA != null ? row18.DESCRIPCION_SUBLINEA
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("SUBLINEA",
																				(row18.SUBLINEA != null ? row18.SUBLINEA
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("DESCRIPCION_CLASE",
																				(row18.DESCRIPCION_CLASE != null ? row18.DESCRIPCION_CLASE
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("CLASE",
																				(row18.CLASE != null ? row18.CLASE
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("DESCRIPCION_SUBCLASE",
																				(row18.DESCRIPCION_SUBCLASE != null ? row18.DESCRIPCION_SUBCLASE
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("SUBCLASE",
																				(row18.SUBCLASE != null ? row18.SUBCLASE
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("FECHA_CREACION_SKU",
																				(row18.FECHA_CREACION_SKU != null ? FormatterUtils
																						.format_Date(
																								row18.FECHA_CREACION_SKU,
																								"yyyy-MM-dd HH:mm:ss")
																						: null));
																valueMap_tAFOX_2
																		.put("Modelo",
																				(row18.Modelo != null ? row18.Modelo
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("EAN",
																				(row18.EAN != null ? row18.EAN
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("DESCRIPCION",
																				(row18.DESCRIPCION != null ? row18.DESCRIPCION
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("MARCA",
																				(row18.MARCA != null ? row18.MARCA
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("COLOR_GROUP",
																				(row18.COLOR_GROUP != null ? row18.COLOR_GROUP
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("TALLA",
																				(row18.TALLA != null ? row18.TALLA
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("TEMPORADA",
																				(row18.TEMPORADA != null ? row18.TEMPORADA
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("SKU",
																				(row18.SKU != null ? row18.SKU
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("ESTILO",
																				(row18.ESTILO != null ? row18.ESTILO
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("ID_FAMILIA",
																				(row18.ID_FAMILIA != null ? row18.ID_FAMILIA
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("FLAG_FOTO_INICIAL",
																				(row18.FLAG_FOTO_INICIAL != null ? row18.FLAG_FOTO_INICIAL
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("FLAG_FOTO_FINAL",
																				(row18.FLAG_FOTO_FINAL != null ? row18.FLAG_FOTO_FINAL
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("URL_DE_LA_FOTO_1",
																				(row18.URL_DE_LA_FOTO_1 != null ? row18.URL_DE_LA_FOTO_1
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("URL_DE_LA_FOTO_2",
																				(row18.URL_DE_LA_FOTO_2 != null ? row18.URL_DE_LA_FOTO_2
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("URL_DE_LA_FOTO_3",
																				(row18.URL_DE_LA_FOTO_3 != null ? row18.URL_DE_LA_FOTO_3
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("URL_DE_LA_FOTO_4",
																				(row18.URL_DE_LA_FOTO_4 != null ? row18.URL_DE_LA_FOTO_4
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("URL_DE_LA_FOTO_5",
																				(row18.URL_DE_LA_FOTO_5 != null ? row18.URL_DE_LA_FOTO_5
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("ORIGEN",
																				(row18.ORIGEN != null ? row18.ORIGEN
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("IS_MARKETPLACE",
																				(row18.IS_MARKETPLACE != null ? row18.IS_MARKETPLACE
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("IS_VEV_VENTA_EN_VERDE",
																				(row18.IS_VEV_VENTA_EN_VERDE != null ? row18.IS_VEV_VENTA_EN_VERDE
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("NOMBRE_COMERCIAL",
																				(row18.NOMBRE_COMERCIAL != null ? row18.NOMBRE_COMERCIAL
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("NOMBRE_PROVEEDOR",
																				(row18.NOMBRE_PROVEEDOR != null ? row18.NOMBRE_PROVEEDOR
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("RUT_PROVEEDOR",
																				(row18.RUT_PROVEEDOR != null ? row18.RUT_PROVEEDOR
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("DV",
																				(row18.DV != null ? row18.DV
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("PAIS_PROVEEDOR",
																				(row18.PAIS_PROVEEDOR != null ? row18.PAIS_PROVEEDOR
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("FONO",
																				(row18.FONO != null ? row18.FONO
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("FECHA_CREACION",
																				(row18.FECHA_CREACION != null ? FormatterUtils
																						.format_Date(
																								row18.FECHA_CREACION,
																								"yyyy-MM-dd HH:mm:ss")
																						: null));
																valueMap_tAFOX_2
																		.put("MAIL",
																				(row18.MAIL != null ? row18.MAIL
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("CONTACTO",
																				(row18.CONTACTO != null ? row18.CONTACTO
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("PAIS",
																				(row18.PAIS != null ? row18.PAIS
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("ID_Origen",
																				(row18.ID_Origen != null ? row18.ID_Origen
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("ID_FlagFoto",
																				(row18.ID_FlagFoto != null ? row18.ID_FlagFoto
																						.toString()
																						: null));
																valueMap_tAFOX_2
																		.put("URLFotos",
																				(row18.URLFotos
																						.toString()));
																valueMap_tAFOX_2
																		.put("errorMessage",
																				(row18.errorMessage != null ? row18.errorMessage
																						.toString()
																						: null));
																StringBuffer buf_tAFOX_2 = new StringBuffer();
																// init value is
																// 0 not -1,
																// because it
																// will output
																// the root tab
																// when all the
																// row value is
																// null.
																int unNullMaxIndex_tAFOX_2 = 0;

																// build root
																// xml tree
																if (needRoot_tAFOX_2) {
																	needRoot_tAFOX_2 = false;
																	buf_tAFOX_2
																			.append("\n");
																	buf_tAFOX_2
																			.append("<Entities");
																	buf_tAFOX_2
																			.append(">");
																	out_tAFOX_2
																			.write(buf_tAFOX_2
																					.toString());
																	buf_tAFOX_2 = new StringBuffer();
																	endTabs_tAFOX_2[0] = buf_tAFOX_2
																			.toString();
																	buf_tAFOX_2 = new StringBuffer();
																}

																// build group
																// xml tree
																boolean isNewElememt_tAFOX_2 = false;
																// The index of
																// group element
																// which is the
																// first new
																// group in
																// groups.
																int newTabIndex_tAFOX_2 = -1;
																// Buffer all
																// group tab
																// XML, then set
																// to
																// startTabBuffer.
																String[] groupBuffer_tAFOX_2 = new String[2];
																String[] groupEndBuffer_tAFOX_2 = new String[2];

																// need a new
																// group element
																// TablaProceso
																// or not
																if (isNewElememt_tAFOX_2
																		|| groupbyList_tAFOX_2
																				.size() <= 0
																		|| groupbyList_tAFOX_2
																				.get(0) == null
																		|| (groupbyList_tAFOX_2
																				.get(0)
																				.get(0) != null ? !groupbyList_tAFOX_2
																				.get(0)
																				.get(0)
																				.equals(valueMap_tAFOX_2
																						.get("NOMBRE_COMERCIAL"))
																				: valueMap_tAFOX_2
																						.get("NOMBRE_COMERCIAL") != null)
																		|| (groupbyList_tAFOX_2
																				.get(0)
																				.get(1) != null ? !groupbyList_tAFOX_2
																				.get(0)
																				.get(1)
																				.equals(valueMap_tAFOX_2
																						.get("NOMBRE_PROVEEDOR"))
																				: valueMap_tAFOX_2
																						.get("NOMBRE_PROVEEDOR") != null)
																		|| (groupbyList_tAFOX_2
																				.get(0)
																				.get(2) != null ? !groupbyList_tAFOX_2
																				.get(0)
																				.get(2)
																				.equals(valueMap_tAFOX_2
																						.get("RUT_PROVEEDOR"))
																				: valueMap_tAFOX_2
																						.get("RUT_PROVEEDOR") != null)
																		|| (groupbyList_tAFOX_2
																				.get(0)
																				.get(3) != null ? !groupbyList_tAFOX_2
																				.get(0)
																				.get(3)
																				.equals(valueMap_tAFOX_2
																						.get("DV"))
																				: valueMap_tAFOX_2
																						.get("DV") != null)
																		|| (groupbyList_tAFOX_2
																				.get(0)
																				.get(4) != null ? !groupbyList_tAFOX_2
																				.get(0)
																				.get(4)
																				.equals(valueMap_tAFOX_2
																						.get("PAIS_PROVEEDOR"))
																				: valueMap_tAFOX_2
																						.get("PAIS_PROVEEDOR") != null)
																		|| (groupbyList_tAFOX_2
																				.get(0)
																				.get(5) != null ? !groupbyList_tAFOX_2
																				.get(0)
																				.get(5)
																				.equals(valueMap_tAFOX_2
																						.get("FONO"))
																				: valueMap_tAFOX_2
																						.get("FONO") != null)
																		|| (groupbyList_tAFOX_2
																				.get(0)
																				.get(6) != null ? !groupbyList_tAFOX_2
																				.get(0)
																				.get(6)
																				.equals(valueMap_tAFOX_2
																						.get("FECHA_CREACION"))
																				: valueMap_tAFOX_2
																						.get("FECHA_CREACION") != null)
																		|| (groupbyList_tAFOX_2
																				.get(0)
																				.get(7) != null ? !groupbyList_tAFOX_2
																				.get(0)
																				.get(7)
																				.equals(valueMap_tAFOX_2
																						.get("MAIL"))
																				: valueMap_tAFOX_2
																						.get("MAIL") != null)
																		|| (groupbyList_tAFOX_2
																				.get(0)
																				.get(8) != null ? !groupbyList_tAFOX_2
																				.get(0)
																				.get(8)
																				.equals(valueMap_tAFOX_2
																						.get("CONTACTO"))
																				: valueMap_tAFOX_2
																						.get("CONTACTO") != null)) {
																	// Is the
																	// first new
																	// element
																	// in
																	// groups.
																	if (isNewElememt_tAFOX_2 == false
																			&& groupbyList_tAFOX_2
																					.size() > 0) {
																		newTabIndex_tAFOX_2 = 0;
																	}

																	// count the
																	// groupby
																	// element
																	if (groupbyList_tAFOX_2
																			.size() <= 0) {
																		groupbyList_tAFOX_2
																				.add(new java.util.ArrayList<String>());
																	} else {
																		groupbyList_tAFOX_2
																				.get(0)
																				.clear();
																	}
																	groupbyList_tAFOX_2
																			.get(0)
																			.add(valueMap_tAFOX_2
																					.get("NOMBRE_COMERCIAL"));
																	groupbyList_tAFOX_2
																			.get(0)
																			.add(valueMap_tAFOX_2
																					.get("NOMBRE_PROVEEDOR"));
																	groupbyList_tAFOX_2
																			.get(0)
																			.add(valueMap_tAFOX_2
																					.get("RUT_PROVEEDOR"));
																	groupbyList_tAFOX_2
																			.get(0)
																			.add(valueMap_tAFOX_2
																					.get("DV"));
																	groupbyList_tAFOX_2
																			.get(0)
																			.add(valueMap_tAFOX_2
																					.get("PAIS_PROVEEDOR"));
																	groupbyList_tAFOX_2
																			.get(0)
																			.add(valueMap_tAFOX_2
																					.get("FONO"));
																	groupbyList_tAFOX_2
																			.get(0)
																			.add(valueMap_tAFOX_2
																					.get("FECHA_CREACION"));
																	groupbyList_tAFOX_2
																			.get(0)
																			.add(valueMap_tAFOX_2
																					.get("MAIL"));
																	groupbyList_tAFOX_2
																			.get(0)
																			.add(valueMap_tAFOX_2
																					.get("CONTACTO"));
																	isNewElememt_tAFOX_2 = true;
																}

																// subtree XML
																// string
																// generate
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("  <TablaProceso");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("    <Proveedor");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      <Nombrecomercial");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("NOMBRE_COMERCIAL") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("NOMBRE_COMERCIAL")));
																}
																buf_tAFOX_2
																		.append("</Nombrecomercial>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      <Nombreproveedor");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("NOMBRE_PROVEEDOR") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("NOMBRE_PROVEEDOR")));
																}
																buf_tAFOX_2
																		.append("</Nombreproveedor>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      <Rutproveedor");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("RUT_PROVEEDOR") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("RUT_PROVEEDOR")));
																}
																buf_tAFOX_2
																		.append("</Rutproveedor>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      <Dv");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("DV") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("DV")));
																}
																buf_tAFOX_2
																		.append("</Dv>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      <Paisproveedor");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("PAIS_PROVEEDOR") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("PAIS_PROVEEDOR")));
																}
																buf_tAFOX_2
																		.append("</Paisproveedor>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      <Fono");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("FONO") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("FONO")));
																}
																buf_tAFOX_2
																		.append("</Fono>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      <Fechadecreacion");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("FECHA_CREACION") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("FECHA_CREACION")));
																}
																buf_tAFOX_2
																		.append("</Fechadecreacion>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      <Mail");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("MAIL") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("MAIL")));
																}
																buf_tAFOX_2
																		.append("</Mail>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      <Contacto");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("CONTACTO") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("CONTACTO")));
																}
																buf_tAFOX_2
																		.append("</Contacto>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("    </Proveedor>");
																// buffer the
																// start tabs to
																// group buffer
																groupBuffer_tAFOX_2[0] = buf_tAFOX_2
																		.toString();
																buf_tAFOX_2 = new StringBuffer();
																// buffer the
																// end tabs to
																// groupEnd
																// buffer
																groupEndBuffer_tAFOX_2[0] = buf_tAFOX_2
																		.toString();
																buf_tAFOX_2 = new StringBuffer();

																// need a new
																// group element
																// Productos or
																// not
																if (isNewElememt_tAFOX_2
																		|| groupbyList_tAFOX_2
																				.size() <= 1
																		|| groupbyList_tAFOX_2
																				.get(1) == null) {
																	// Is the
																	// first new
																	// element
																	// in
																	// groups.
																	if (isNewElememt_tAFOX_2 == false
																			&& groupbyList_tAFOX_2
																					.size() > 1) {
																		newTabIndex_tAFOX_2 = 1;
																	}

																	// count the
																	// groupby
																	// element
																	if (groupbyList_tAFOX_2
																			.size() <= 1) {
																		groupbyList_tAFOX_2
																				.add(new java.util.ArrayList<String>());
																	} else {
																		groupbyList_tAFOX_2
																				.get(1)
																				.clear();
																	}
																	isNewElememt_tAFOX_2 = true;
																}

																// subtree XML
																// string
																// generate
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("    <Productos");
																buf_tAFOX_2
																		.append(">");
																// buffer the
																// start tabs to
																// group buffer
																groupBuffer_tAFOX_2[1] = buf_tAFOX_2
																		.toString();
																buf_tAFOX_2 = new StringBuffer();
																// buffer the
																// end tabs to
																// groupEnd
																// buffer
																groupEndBuffer_tAFOX_2[1] = buf_tAFOX_2
																		.toString();
																buf_tAFOX_2 = new StringBuffer();
																// output the
																// previous
																// groups as
																// there's a new
																// group
																if (newTabIndex_tAFOX_2 >= 0) {
																	// out_tAFOX_2.newLine();//Track
																	// code
																	// output
																	// all start
																	// tabs
																	// buffer
																	for (int i_tAFOX_2 = 0; i_tAFOX_2 < startTabs_tAFOX_2.length; i_tAFOX_2++) {
																		if (startTabs_tAFOX_2[i_tAFOX_2] != null) {
																			out_tAFOX_2
																					.write(startTabs_tAFOX_2[i_tAFOX_2]);
																		}
																		startTabs_tAFOX_2[i_tAFOX_2] = null;
																	}
																	for (int i_tAFOX_2 = preNewTabIndex_tAFOX_2 - 1; i_tAFOX_2 >= 1 + newTabIndex_tAFOX_2; i_tAFOX_2--) {
																		if (endTabs_tAFOX_2[i_tAFOX_2] != null) {
																			out_tAFOX_2
																					.write(endTabs_tAFOX_2[i_tAFOX_2]);
																		}
																		endTabs_tAFOX_2[i_tAFOX_2] = null;
																		out_tAFOX_2
																				.newLine();
																		out_tAFOX_2
																				.write(endTabStrs_tAFOX_2
																						.get(i_tAFOX_2));
																	}
																	preNewTabIndex_tAFOX_2 = newTabIndex_tAFOX_2 + 1;
																}

																// set new
																// element
																// groupbuffer
																// to
																// startbuffer
																for (int i_tAFOX_2 = 0; i_tAFOX_2 < groupBuffer_tAFOX_2.length; i_tAFOX_2++) {
																	// when
																	// newTabIndex
																	// is null,
																	// must use
																	// the
																	// perNewTabIndex
																	if (i_tAFOX_2 >= preNewTabIndex_tAFOX_2 - 1) {
																		startTabs_tAFOX_2[i_tAFOX_2 + 1] = groupBuffer_tAFOX_2[i_tAFOX_2];
																		endTabs_tAFOX_2[i_tAFOX_2 + 1] = groupEndBuffer_tAFOX_2[i_tAFOX_2];
																	}
																}
																// build loop
																// xml tree
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      <M_ProductosCargados");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Ingresado");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</Ingresado>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <ColorGroup");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("COLOR_GROUP") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("COLOR_GROUP")));
																}
																buf_tAFOX_2
																		.append("</ColorGroup>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Descripcion");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("DESCRIPCION") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("DESCRIPCION")));
																}
																buf_tAFOX_2
																		.append("</Descripcion>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <DescripcionSublinea");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("DESCRIPCION_SUBLINEA") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("DESCRIPCION_SUBLINEA")));
																}
																buf_tAFOX_2
																		.append("</DescripcionSublinea>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <EAN");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("EAN") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("EAN")));
																}
																buf_tAFOX_2
																		.append("</EAN>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Evento");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</Evento>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <FechadecreacionSKU");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("FECHA_CREACION_SKU") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("FECHA_CREACION_SKU")));
																}
																buf_tAFOX_2
																		.append("</FechadecreacionSKU>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Fotografo");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</Fotografo>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Id_Familia");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("ID_FAMILIA") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("ID_FAMILIA")));
																}
																buf_tAFOX_2
																		.append("</Id_Familia>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <IsMarketPlace");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("IS_MARKETPLACE") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("IS_MARKETPLACE")));
																}
																buf_tAFOX_2
																		.append("</IsMarketPlace>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <IsVev");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("IS_VEV_VENTA_EN_VERDE") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("IS_VEV_VENTA_EN_VERDE")));
																}
																buf_tAFOX_2
																		.append("</IsVev>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Marca");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("MARCA") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("MARCA")));
																}
																buf_tAFOX_2
																		.append("</Marca>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Modelo");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("Modelo") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("Modelo")));
																}
																buf_tAFOX_2
																		.append("</Modelo>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <OrdendeCompra");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</OrdendeCompra>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Pais");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("PAIS") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("PAIS")));
																}
																buf_tAFOX_2
																		.append("</Pais>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <PostProductor");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</PostProductor>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <RequiereArmado");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</RequiereArmado>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <RequierePlanchado");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</RequierePlanchado>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <SKU");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("SKU") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("SKU")));
																}
																buf_tAFOX_2
																		.append("</SKU>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Talla");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("TALLA") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("TALLA")));
																}
																buf_tAFOX_2
																		.append("</Talla>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Temporada");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("TEMPORADA") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("TEMPORADA")));
																}
																buf_tAFOX_2
																		.append("</Temporada>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <URLfoto");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("URLFotos") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("URLFotos")));
																}
																buf_tAFOX_2
																		.append("</URLfoto>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <EstadoFoto");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</EstadoFoto>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <EstadoURL");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</EstadoURL>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Flagfoto");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("ID_FlagFoto") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("ID_FlagFoto")));
																}
																buf_tAFOX_2
																		.append("</Flagfoto>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <M_PubRcepcionarproductos");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</M_PubRcepcionarproductos>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <InfoProveedor");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Nombrecomercial");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("NOMBRE_COMERCIAL") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("NOMBRE_COMERCIAL")));
																}
																buf_tAFOX_2
																		.append("</Nombrecomercial>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Nombreproveedor");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("NOMBRE_PROVEEDOR") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("NOMBRE_PROVEEDOR")));
																}
																buf_tAFOX_2
																		.append("</Nombreproveedor>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Rutproveedor");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("RUT_PROVEEDOR") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("RUT_PROVEEDOR")));
																}
																buf_tAFOX_2
																		.append("</Rutproveedor>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Dv");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("DV") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("DV")));
																}
																buf_tAFOX_2
																		.append("</Dv>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Paisproveedor");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("PAIS_PROVEEDOR") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("PAIS_PROVEEDOR")));
																}
																buf_tAFOX_2
																		.append("</Paisproveedor>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Fono");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("FONO") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("FONO")));
																}
																buf_tAFOX_2
																		.append("</Fono>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Fechadecreacion");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("FECHA_CREACION") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("FECHA_CREACION")));
																}
																buf_tAFOX_2
																		.append("</Fechadecreacion>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Mail");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("MAIL") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("MAIL")));
																}
																buf_tAFOX_2
																		.append("</Mail>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Contacto");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</Contacto>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        </InfoProveedor>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <MotivoRechazo");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</MotivoRechazo>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Procedencia");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</Procedencia>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <TipoSet");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</TipoSet>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <EstadoNombre");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</EstadoNombre>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <Origen");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("ID_Origen") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("ID_Origen")));
																}
																buf_tAFOX_2
																		.append("</Origen>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <PubRecepcionarproductos");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("</PubRecepcionarproductos>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        <M_JerarquiaProductos");
																buf_tAFOX_2
																		.append(">");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Subclase");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("SUBCLASE") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("SUBCLASE")));
																}
																buf_tAFOX_2
																		.append("</Subclase>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Sublinea");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("SUBLINEA") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("SUBLINEA")));
																}
																buf_tAFOX_2
																		.append("</Sublinea>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Linea");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("LINEA") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("LINEA")));
																}
																buf_tAFOX_2
																		.append("</Linea>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Clase");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("CLASE") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("CLASE")));
																}
																buf_tAFOX_2
																		.append("</Clase>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Estilo");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("ESTILO") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("ESTILO")));
																}
																buf_tAFOX_2
																		.append("</Estilo>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <DescripcionSubclase");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("DESCRIPCION_SUBCLASE") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("DESCRIPCION_SUBCLASE")));
																}
																buf_tAFOX_2
																		.append("</DescripcionSubclase>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("          <Descripcionlinea");
																buf_tAFOX_2
																		.append(">");
																if (valueMap_tAFOX_2
																		.get("DESCRIPCION_LINEA") != null) {
																	buf_tAFOX_2
																			.append(TalendString
																					.checkCDATAForXML(valueMap_tAFOX_2
																							.get("DESCRIPCION_LINEA")));
																}
																buf_tAFOX_2
																		.append("</Descripcionlinea>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("        </M_JerarquiaProductos>");
																buf_tAFOX_2
																		.append("\n");
																buf_tAFOX_2
																		.append("      </M_ProductosCargados>");
																// output all
																// buffer
																for (int i_tAFOX_2 = 0; i_tAFOX_2 < startTabs_tAFOX_2.length; i_tAFOX_2++) {
																	if (startTabs_tAFOX_2[i_tAFOX_2] != null
																			&& startTabs_tAFOX_2[i_tAFOX_2]
																					.length() > 0) {
																		out_tAFOX_2
																				.write(startTabs_tAFOX_2[i_tAFOX_2]);
																		startTabs_tAFOX_2[i_tAFOX_2] = null;
																	}
																}
																out_tAFOX_2
																		.write(buf_tAFOX_2
																				.toString());
																preNewTabIndex_tAFOX_2 = 3;

																tos_count_tAdvancedFileOutputXML_2++;

																/**
																 * [
																 * tAdvancedFileOutputXML_2
																 * main ] stop
																 */

															} // End of branch
																// "row18"

														} // End of branch
															// "row17"

													} // End of branch "row15"

												} // End of branch "row13"

											} // End of branch "row8"

										} // End of branch "convertido"

									} // End of branch "row2"

								} // End of branch "aceptados"

								// Start of branch "rechazados2"
								if (rechazados2 != null) {

									/**
									 * [tFileOutputExcel_1 main ] start
									 */

									currentComponent = "tFileOutputExcel_1";

									// rechazados2
									// rechazados2

									if (execStat) {
										runStat.updateStatOnConnection(
												"rechazados2" + iterateId, 1, 1);
									}

									xlsxTool_tFileOutputExcel_1.addRow();

									if (rechazados2.DESCRIPCION_LINEA != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.DESCRIPCION_LINEA));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.LINEA != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.LINEA));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.DESCRIPCION_SUBLINEA != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.DESCRIPCION_SUBLINEA));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.SUBLINEA != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.SUBLINEA));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.DESCRIPCION_CLASE != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.DESCRIPCION_CLASE));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.CLASE != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.CLASE));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.DESCRIPCION_SUBCLASE != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.DESCRIPCION_SUBCLASE));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.SUBCLASE != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.SUBCLASE));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.FECHA_CREACION_SKU != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.FECHA_CREACION_SKU));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.Modelo != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.Modelo));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.EAN != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.EAN));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.DESCRIPCION != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.DESCRIPCION));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.MARCA != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.MARCA));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.COLOR_GROUP != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.COLOR_GROUP));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.TALLA != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.TALLA));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.TEMPORADA != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.TEMPORADA));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.SKU != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.SKU));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.ESTILO != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.ESTILO));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.ID_FAMILIA != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.ID_FAMILIA));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.FLAG_FOTO_INICIAL != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.FLAG_FOTO_INICIAL));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.FLAG_FOTO_FINAL != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.FLAG_FOTO_FINAL));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.URL_DE_LA_FOTO_1 != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.URL_DE_LA_FOTO_1));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.URL_DE_LA_FOTO_2 != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.URL_DE_LA_FOTO_2));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.URL_DE_LA_FOTO_3 != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.URL_DE_LA_FOTO_3));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.URL_DE_LA_FOTO_4 != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.URL_DE_LA_FOTO_4));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.URL_DE_LA_FOTO_5 != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.URL_DE_LA_FOTO_5));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.ORIGEN != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.ORIGEN));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.IS_MARKETPLACE != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.IS_MARKETPLACE));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.IS_VEV_VENTA_EN_VERDE != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.IS_VEV_VENTA_EN_VERDE));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.NOMBRE_COMERCIAL != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.NOMBRE_COMERCIAL));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.NOMBRE_PROVEEDOR != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.NOMBRE_PROVEEDOR));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.RUT_PROVEEDOR != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.RUT_PROVEEDOR));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.DV != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.DV));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.PAIS_PROVEEDOR != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.PAIS_PROVEEDOR));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.FONO != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.FONO));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.FECHA_CREACION != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.FECHA_CREACION));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.MAIL != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.MAIL));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.CONTACTO != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.CONTACTO));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.PAIS != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.PAIS));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									if (rechazados2.MensajeError != null) {

										xlsxTool_tFileOutputExcel_1
												.addCellValue(String
														.valueOf(rechazados2.MensajeError));
									} else {
										xlsxTool_tFileOutputExcel_1
												.addCellNullValue();
									}

									nb_line_tFileOutputExcel_1++;

									tos_count_tFileOutputExcel_1++;

									/**
									 * [tFileOutputExcel_1 main ] stop
									 */

								} // End of branch "rechazados2"

							} // End of branch "excel1"

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE",
								nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_lookupOrigen != null) {
					tHash_Lookup_lookupOrigen.endGet();
				}
				globalMap.remove("tHash_Lookup_lookupOrigen");

				if (tHash_Lookup_lookupFlagFoto != null) {
					tHash_Lookup_lookupFlagFoto.endGet();
				}
				globalMap.remove("tHash_Lookup_lookupFlagFoto");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("excel1" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tConvertType_1 end ] start
				 */

				currentComponent = "tConvertType_1";

				globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("aceptados" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tConvertType_1", true);
				end_Hash.put("tConvertType_1", System.currentTimeMillis());

				/**
				 * [tConvertType_1 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"convertido" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tWriteXMLField_1_Out end ] start
				 */

				currentVirtualComponent = "tWriteXMLField_1";

				currentComponent = "tWriteXMLField_1_Out";

				if (nb_line_tWriteXMLField_1_Out > 0) {
					if (nb_line_tWriteXMLField_1_Out > 0) {
						for (int i_tWriteXMLField_1_Out = endTabStrs_tWriteXMLField_1_Out
								.size() - 1; i_tWriteXMLField_1_Out >= 0; i_tWriteXMLField_1_Out--) {
							if (endTabs_tWriteXMLField_1_Out[i_tWriteXMLField_1_Out] != null) {
								out_tWriteXMLField_1_Out
										.write(endTabs_tWriteXMLField_1_Out[i_tWriteXMLField_1_Out]);
							}
							out_tWriteXMLField_1_Out.newLine();
							out_tWriteXMLField_1_Out
									.write(endTabStrs_tWriteXMLField_1_Out
											.get(i_tWriteXMLField_1_Out));
						}
					}
					out_tWriteXMLField_1_Out.newLine();
					out_tWriteXMLField_1_Out.close();

					listGroupby_tWriteXMLField_1_Out
							.add(strWriter_tWriteXMLField_1_Out.toString());

				}
				globalMap.put("tWriteXMLField_1_Out_NB_LINE",
						nb_line_tWriteXMLField_1_Out);
				globalMap.put("tWriteXMLField_1_In_FINISH"
						+ (listGroupby_tWriteXMLField_1_Out == null ? ""
								: listGroupby_tWriteXMLField_1_Out.hashCode()),
						"true");

				txf_tWriteXMLField_1_Out.join();
				if (txf_tWriteXMLField_1_Out.getLastException() != null) {
					currentComponent = txf_tWriteXMLField_1_Out
							.getCurrentComponent();
					throw txf_tWriteXMLField_1_Out.getLastException();
				}

				resourceMap.put("finish_tWriteXMLField_1_Out", true);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tWriteXMLField_1_Out", true);
				end_Hash.put("tWriteXMLField_1_Out", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}

				/**
				 * [tWriteXMLField_1_Out end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK",
						nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_4 end ] start
				 */

				currentComponent = "tAdvancedFileOutputXML_4";

				if (nb_line_tAFOX_4 > 0) {
					for (int i_tAFOX_4 = endTabStrs_tAFOX_4.size() - 1; i_tAFOX_4 >= 0; i_tAFOX_4--) {
						if (endTabs_tAFOX_4[i_tAFOX_4] != null) {
							out_tAFOX_4.write(endTabs_tAFOX_4[i_tAFOX_4]);
						}
						out_tAFOX_4.newLine();
						out_tAFOX_4.write(endTabStrs_tAFOX_4.get(i_tAFOX_4));
					}
				}
				out_tAFOX_4.close();
				globalMap.put("tAdvancedFileOutputXML_4_NB_LINE",
						nb_line_tAFOX_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row38" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedFileOutputXML_4", true);
				end_Hash.put("tAdvancedFileOutputXML_4",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFileInputXML_6Process(globalMap);

				/**
				 * [tAdvancedFileOutputXML_4 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK",
						nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row13" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_3 end ] start
				 */

				currentComponent = "tAdvancedFileOutputXML_3";

				if (nb_line_tAFOX_3 > 0) {
					for (int i_tAFOX_3 = endTabStrs_tAFOX_3.size() - 1; i_tAFOX_3 >= 0; i_tAFOX_3--) {
						if (endTabs_tAFOX_3[i_tAFOX_3] != null) {
							out_tAFOX_3.write(endTabs_tAFOX_3[i_tAFOX_3]);
						}
						out_tAFOX_3.newLine();
						out_tAFOX_3.write(endTabStrs_tAFOX_3.get(i_tAFOX_3));
					}
				}
				out_tAFOX_3.close();
				globalMap.put("tAdvancedFileOutputXML_3_NB_LINE",
						nb_line_tAFOX_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row36" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedFileOutputXML_3", true);
				end_Hash.put("tAdvancedFileOutputXML_3",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileInputXML_5Process(globalMap);

				/**
				 * [tAdvancedFileOutputXML_3 end ] stop
				 */

				/**
				 * [tFilterRow_4 end ] start
				 */

				currentComponent = "tFilterRow_4";

				globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_OK",
						nb_line_ok_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row15" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterRow_4", true);
				end_Hash.put("tFilterRow_4", System.currentTimeMillis());

				/**
				 * [tFilterRow_4 end ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_1 end ] start
				 */

				currentComponent = "tAdvancedFileOutputXML_1";

				if (nb_line_tAFOX_1 > 0) {
					for (int i_tAFOX_1 = endTabStrs_tAFOX_1.size() - 1; i_tAFOX_1 >= 0; i_tAFOX_1--) {
						if (endTabs_tAFOX_1[i_tAFOX_1] != null) {
							out_tAFOX_1.write(endTabs_tAFOX_1[i_tAFOX_1]);
						}
						out_tAFOX_1.newLine();
						out_tAFOX_1.write(endTabStrs_tAFOX_1.get(i_tAFOX_1));
					}
				}
				out_tAFOX_1.close();
				globalMap.put("tAdvancedFileOutputXML_1_NB_LINE",
						nb_line_tAFOX_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row31" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedFileOutputXML_1", true);
				end_Hash.put("tAdvancedFileOutputXML_1",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_3Process(globalMap);

				/**
				 * [tAdvancedFileOutputXML_1 end ] stop
				 */

				/**
				 * [tFilterRow_5 end ] start
				 */

				currentComponent = "tFilterRow_5";

				globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
				globalMap.put("tFilterRow_5_NB_LINE_OK",
						nb_line_ok_tFilterRow_5);
				globalMap.put("tFilterRow_5_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row17" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterRow_5", true);
				end_Hash.put("tFilterRow_5", System.currentTimeMillis());

				/**
				 * [tFilterRow_5 end ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_2 end ] start
				 */

				currentComponent = "tAdvancedFileOutputXML_2";

				if (nb_line_tAFOX_2 > 0) {
					for (int i_tAFOX_2 = endTabStrs_tAFOX_2.size() - 1; i_tAFOX_2 >= 0; i_tAFOX_2--) {
						if (endTabs_tAFOX_2[i_tAFOX_2] != null) {
							out_tAFOX_2.write(endTabs_tAFOX_2[i_tAFOX_2]);
						}
						out_tAFOX_2.newLine();
						out_tAFOX_2.write(endTabStrs_tAFOX_2.get(i_tAFOX_2));
					}
				}
				out_tAFOX_2.close();
				globalMap.put("tAdvancedFileOutputXML_2_NB_LINE",
						nb_line_tAFOX_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row18" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedFileOutputXML_2", true);
				end_Hash.put("tAdvancedFileOutputXML_2",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputXML_4Process(globalMap);

				/**
				 * [tAdvancedFileOutputXML_2 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				columnIndex_tFileOutputExcel_1 = 0;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 1;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 2;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 3;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 4;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 5;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 6;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 7;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 8;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 9;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 10;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 11;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 12;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 13;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 14;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 15;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 16;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 17;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 18;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 19;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 20;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 21;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 22;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 23;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 24;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 25;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 26;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 27;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 28;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 29;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 30;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 31;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 32;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 33;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 34;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 35;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 36;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 37;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 38;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 39;

				xlsxTool_tFileOutputExcel_1
						.setColAutoSize(columnIndex_tFileOutputExcel_1);

				xlsxTool_tFileOutputExcel_1.writeExcel(
						fileName_tFileOutputExcel_1, true);

				nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 - 1;

				globalMap.put("tFileOutputExcel_1_NB_LINE",
						nb_line_tFileOutputExcel_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("rechazados2"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_lookupOrigen");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_lookupFlagFoto");

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tConvertType_1 finally ] start
				 */

				currentComponent = "tConvertType_1";

				/**
				 * [tConvertType_1 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tWriteXMLField_1_Out finally ] start
				 */

				currentVirtualComponent = "tWriteXMLField_1";

				currentComponent = "tWriteXMLField_1_Out";

				java.util.Queue listGroupby_tWriteXMLField_1_Out = (java.util.Queue) globalMap
						.get("queue_tWriteXMLField_1_In");
				if (resourceMap.get("finish_tWriteXMLField_1_Out") == null) {
					globalMap
							.put("tWriteXMLField_1_In_FINISH_WITH_EXCEPTION"
									+ (listGroupby_tWriteXMLField_1_Out == null ? ""
											: listGroupby_tWriteXMLField_1_Out
													.hashCode()), "true");
				}

				if (listGroupby_tWriteXMLField_1_Out != null) {
					globalMap
							.put("tWriteXMLField_1_In_FINISH"
									+ (listGroupby_tWriteXMLField_1_Out == null ? ""
											: listGroupby_tWriteXMLField_1_Out
													.hashCode()), "true");
				}

				/**
				 * [tWriteXMLField_1_Out finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_4 finally ] start
				 */

				currentComponent = "tAdvancedFileOutputXML_4";

				/**
				 * [tAdvancedFileOutputXML_4 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_3 finally ] start
				 */

				currentComponent = "tAdvancedFileOutputXML_3";

				/**
				 * [tAdvancedFileOutputXML_3 finally ] stop
				 */

				/**
				 * [tFilterRow_4 finally ] start
				 */

				currentComponent = "tFilterRow_4";

				/**
				 * [tFilterRow_4 finally ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_1 finally ] start
				 */

				currentComponent = "tAdvancedFileOutputXML_1";

				/**
				 * [tAdvancedFileOutputXML_1 finally ] stop
				 */

				/**
				 * [tFilterRow_5 finally ] start
				 */

				currentComponent = "tFilterRow_5";

				/**
				 * [tFilterRow_5 finally ] stop
				 */

				/**
				 * [tAdvancedFileOutputXML_2 finally ] start
				 */

				currentComponent = "tAdvancedFileOutputXML_2";

				/**
				 * [tAdvancedFileOutputXML_2 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class row40Struct implements
			routines.system.IPersistableRow<row40Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String CodigoError;

		public String getCodigoError() {
			return this.CodigoError;
		}

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.CodigoError = readString(dis);

					this.MensajeError = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CodigoError, dos);

				// String

				writeString(this.MensajeError, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CodigoError=" + CodigoError);
			sb.append(",MensajeError=" + MensajeError);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row39Struct implements
			routines.system.IPersistableRow<row39Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public Integer IDCaso;

		public Integer getIDCaso() {
			return this.IDCaso;
		}

		public Integer RadNumber;

		public Integer getRadNumber() {
			return this.RadNumber;
		}

		public String NombreProceso;

		public String getNombreProceso() {
			return this.NombreProceso;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.IDCaso = readInteger(dis);

					this.RadNumber = readInteger(dis);

					this.NombreProceso = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCaso, dos);

				// Integer

				writeInteger(this.RadNumber, dos);

				// String

				writeString(this.NombreProceso, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCaso=" + String.valueOf(IDCaso));
			sb.append(",RadNumber=" + String.valueOf(RadNumber));
			sb.append(",NombreProceso=" + NombreProceso);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class creado1Struct implements
			routines.system.IPersistableRow<creado1Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public Integer IDCaso;

		public Integer getIDCaso() {
			return this.IDCaso;
		}

		public Integer RadNumber;

		public Integer getRadNumber() {
			return this.RadNumber;
		}

		public String NombreProceso;

		public String getNombreProceso() {
			return this.NombreProceso;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.IDCaso = readInteger(dis);

					this.RadNumber = readInteger(dis);

					this.NombreProceso = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCaso, dos);

				// Integer

				writeInteger(this.RadNumber, dos);

				// String

				writeString(this.NombreProceso, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCaso=" + String.valueOf(IDCaso));
			sb.append(",RadNumber=" + String.valueOf(RadNumber));
			sb.append(",NombreProceso=" + NombreProceso);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(creado1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fallidos1Struct implements
			routines.system.IPersistableRow<fallidos1Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String CodigoError;

		public String getCodigoError() {
			return this.CodigoError;
		}

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.CodigoError = readString(dis);

					this.MensajeError = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CodigoError, dos);

				// String

				writeString(this.MensajeError, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CodigoError=" + CodigoError);
			sb.append(",MensajeError=" + MensajeError);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fallidos1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row37Struct implements
			routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document createCases;

		public routines.system.Document getCreateCases() {
			return this.createCases;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = (routines.system.Document) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.createCases);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + String.valueOf(createCases));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLEnviado;

		public String getXMLEnviado() {
			return this.XMLEnviado;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLEnviado = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLEnviado, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLEnviado=" + XMLEnviado);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logxmlStruct implements
			routines.system.IPersistableRow<logxmlStruct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLEnviado;

		public String getXMLEnviado() {
			return this.XMLEnviado;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLEnviado = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLEnviado, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLEnviado=" + XMLEnviado);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logxmlStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String createCases;

		public String getCreateCases() {
			return this.createCases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.createCases, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + createCases);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String createCases;

		public String getCreateCases() {
			return this.createCases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.createCases, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + createCases);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				row19Struct row19 = new row19Struct();
				logxmlStruct logxml = new logxmlStruct();
				logxmlStruct row20 = logxml;
				row22Struct row22 = new row22Struct();
				row37Struct row37 = new row37Struct();
				creado1Struct creado1 = new creado1Struct();
				creado1Struct row39 = creado1;
				fallidos1Struct fallidos1 = new fallidos1Struct();
				fallidos1Struct row40 = fallidos1;

				/**
				 * [tXMLMap_4_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_4_TXMLMAP_OUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row37" + iterateId, 0,
								0);

					}
				}

				int tos_count_tXMLMap_4_TXMLMAP_OUT = 0;

				class BytesLimit65535_tXMLMap_4_TXMLMAP_OUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_4_TXMLMAP_OUT().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_4_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_4_TXMLMAP_OUT__Struct {
					boolean creacionCorrecta;
				}
				Var__tXMLMap_4_TXMLMAP_OUT__Struct Var__tXMLMap_4_TXMLMAP_OUT = new Var__tXMLMap_4_TXMLMAP_OUT__Struct();
				// ###############################
				// # Outputs initialization
				creado1Struct creado1_tmp = new creado1Struct();
				creado1Struct creado1_save = null;
				// the aggregate variable
				creado1Struct creado1_aggregate = null;
				fallidos1Struct fallidos1_tmp = new fallidos1Struct();
				fallidos1Struct fallidos1_save = null;
				// the aggregate variable
				fallidos1Struct fallidos1_aggregate = null;
				// init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_4 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_4",
						allOutsForAggregate_tXMLMap_4);
				// ###############################
				class TreeNode_API_tXMLMap_4_TXMLMAP_OUT {
					java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();

					void clear() {
						xpath_value_map.clear();
					}

					void put(String xpath, String value) {
						xpath_value_map.put(xpath, value);
					}

					String get_null(String xpath) {
						return null;
					}

					Integer get_Integer(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Integer(content);
					}

					String get_String(String xpath) {
						return xpath_value_map.get(xpath);
					}

					java.util.Date get_Date(String xpath, String pattern) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Date(content, pattern);
					}
				}
				TreeNode_API_tXMLMap_4_TXMLMAP_OUT treeNodeAPI_tXMLMap_4_TXMLMAP_OUT = new TreeNode_API_tXMLMap_4_TXMLMAP_OUT();
				NameSpaceTool nsTool_tXMLMap_4_TXMLMAP_OUT = new NameSpaceTool();
				int nb_line_tXMLMap_4_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_4_TXMLMAP_OUT xml_api_tXMLMap_4_TXMLMAP_OUT = new XML_API_tXMLMap_4_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_4_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				/**
				 * [tXMLMap_4_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tSOAP_4 begin ] start
				 */

				ok_Hash.put("tSOAP_4", false);
				start_Hash.put("tSOAP_4", System.currentTimeMillis());

				currentComponent = "tSOAP_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row22" + iterateId, 0,
								0);

					}
				}

				int tos_count_tSOAP_4 = 0;

				class BytesLimit65535_tSOAP_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSOAP_4().limitLog4jByte();
				org.talend.soap.SOAPUtil soapUtil_tSOAP_4 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_4 begin ] stop
				 */

				/**
				 * [tExtractXMLField_4 begin ] start
				 */

				ok_Hash.put("tExtractXMLField_4", false);
				start_Hash
						.put("tExtractXMLField_4", System.currentTimeMillis());

				currentComponent = "tExtractXMLField_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row20" + iterateId, 0,
								0);

					}
				}

				int tos_count_tExtractXMLField_4 = 0;

				class BytesLimit65535_tExtractXMLField_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractXMLField_4().limitLog4jByte();

				int nb_line_tExtractXMLField_4 = 0;

				class NameSpaceTool_tExtractXMLField_4 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					/**
					 * the regex for the xpath like that : case 1 :
					 * functionA(locationXPathExpression) case 2 :
					 * fn:functionA(locationXPathExpression) case 3 :
					 * functionA(functionB(locationXPathExpression)) case 4 :
					 * fn:functionA(fn:functionB(locationXPathExpression)) and
					 * like that.
					 */
					private java.util.regex.Pattern simpleFunctionPattern;
					private StringBuffer stringBuffer;
					private java.util.Map<String, String> resultCache;

					public String addDefaultNSPrefix(
							final String xpathExpression, String loopPath) {
						if (defualtNSPath.size() < 1) {
							return xpathExpression;
						}

						if (resultCache == null) {
							resultCache = new java.util.HashMap<String, String>();
						}

						String resultXpathExpression = resultCache
								.get(xpathExpression);
						if (resultXpathExpression != null) {
							return resultXpathExpression;
						}

						String locationPathExpression = xpathExpression;

						if (simpleFunctionPattern == null) {
							simpleFunctionPattern = java.util.regex.Pattern
									.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
						}

						boolean isSimpleFunctionXPath = simpleFunctionPattern
								.matcher(xpathExpression).matches();
						String tail = null;
						if (isSimpleFunctionXPath) {
							int start = xpathExpression.lastIndexOf('(');
							int end = xpathExpression.indexOf(')');
							if (start < end) {
								if (stringBuffer == null) {
									stringBuffer = new StringBuffer();
								}
								locationPathExpression = xpathExpression
										.substring(start + 1, end);
								stringBuffer.append(xpathExpression.substring(
										0, start + 1));
								tail = xpathExpression.substring(end);
							} else {
								isSimpleFunctionXPath = false;
							}
						}

						locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(
								locationPathExpression, loopPath);

						resultXpathExpression = locationPathExpression;

						if (isSimpleFunctionXPath) {
							stringBuffer.append(locationPathExpression);
							stringBuffer.append(tail);
							resultXpathExpression = stringBuffer.toString();
							stringBuffer.setLength(0);
						}

						resultCache.put(xpathExpression, resultXpathExpression);
						return resultXpathExpression;
					}

					private String addDefaultNSPrefixForLocationXPathExpression(
							String path, String loopPath) {
						String fullPath = loopPath;
						if (!path.equals(fullPath)) {
							for (String tmp : path.split("/")) {
								if (("..").equals(tmp)) {
									fullPath = fullPath.substring(0,
											fullPath.lastIndexOf("/"));
								} else {
									fullPath += "/" + tmp;
								}
							}
						}
						int[] indexs = new int[fullPath.split("/").length - 1];
						java.util.Arrays.fill(indexs, -1);
						int length = 0;
						for (int i = 0; i < defualtNSPath.size(); i++) {
							if (defualtNSPath.get(i).length() > length
									&& fullPath
											.startsWith(defualtNSPath.get(i))) {
								java.util.Arrays.fill(indexs, defualtNSPath
										.get(i).split("/").length - 2,
										indexs.length, i);
								length = defualtNSPath.get(i).length();
							}
						}

						StringBuilder newPath = new StringBuilder();
						String[] pathStrs = path.split("/");
						for (int i = 0; i < pathStrs.length; i++) {
							String tmp = pathStrs[i];
							if (newPath.length() > 0) {
								newPath.append("/");
							}
							if (tmp.length() > 0 && tmp.indexOf(":") == -1
									&& tmp.indexOf(".") == -1 /*
															 * &&
															 * tmp.indexOf("@")
															 * == -1
															 */) {
								int index = indexs[i + indexs.length
										- pathStrs.length];
								if (index >= 0) {
									// ==== add by wliu to support both filter
									// and functions==
									if (tmp.indexOf("[") > 0
											&& tmp.indexOf("]") > tmp
													.indexOf("[")) {// include
																	// filter
										String tmpStr = replaceElementWithNS(
												tmp, "pre" + index + ":");
										newPath.append(tmpStr);
									} else {
										if (tmp.indexOf("@") != -1
												|| tmp.indexOf("(") < tmp
														.indexOf(")")) { // include
																			// attribute
											newPath.append(tmp);
										} else {
											// ==add end=======
											newPath.append("pre").append(index)
													.append(":").append(tmp);
										}
									}
								} else {
									newPath.append(tmp);
								}
							} else {
								newPath.append(tmp);
							}
						}
						return newPath.toString();
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tExtractXMLField_4 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				XML_API_tExtractXMLField_4 xml_api_tExtractXMLField_4 = new XML_API_tExtractXMLField_4();

				/**
				 * [tExtractXMLField_4 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_12 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_12", false);
				start_Hash.put("tFileOutputExcel_12",
						System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_12";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("logxml" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_12 = 0;

				class BytesLimit65535_tFileOutputExcel_12 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_12().limitLog4jByte();

				int columnIndex_tFileOutputExcel_12 = 0;

				String fileName_tFileOutputExcel_12 = context.ExcelLogXML;
				int nb_line_tFileOutputExcel_12 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_12 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_12.setSheet("Creados");
				xlsxTool_tFileOutputExcel_12.setAppend(true, true);
				xlsxTool_tFileOutputExcel_12.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_12.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_12
						.prepareXlsxFile(fileName_tFileOutputExcel_12);

				xlsxTool_tFileOutputExcel_12.setFont("");

				/**
				 * [tFileOutputExcel_12 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row19" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					String Fecha;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				logxmlStruct logxml_tmp = new logxmlStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tReplace_4 begin ] start
				 */

				ok_Hash.put("tReplace_4", false);
				start_Hash.put("tReplace_4", System.currentTimeMillis());

				currentComponent = "tReplace_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tReplace_4 = 0;

				class BytesLimit65535_tReplace_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tReplace_4().limitLog4jByte();

				int nb_line_tReplace_4 = 0;

				/**
				 * [tReplace_4 begin ] stop
				 */

				/**
				 * [tFileInputXML_6 begin ] start
				 */

				ok_Hash.put("tFileInputXML_6", false);
				start_Hash.put("tFileInputXML_6", System.currentTimeMillis());

				currentComponent = "tFileInputXML_6";

				int tos_count_tFileInputXML_6 = 0;

				class BytesLimit65535_tFileInputXML_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputXML_6().limitLog4jByte();

				int nb_line_tFileInputXML_6 = 0;

				String os_tFileInputXML_6 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_6 = false;
				if (os_tFileInputXML_6.indexOf("windows") > -1
						|| os_tFileInputXML_6.indexOf("nt") > -1) {
					isWindows_tFileInputXML_6 = true;
				}
				class NameSpaceTool_tFileInputXML_6 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression,
							String basePath) {
						return util.addDefaultNSPrefix(relativeXpression,
								basePath);
					}

				}

				class XML_API_tFileInputXML_6 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_6 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_6 = null;
				try {
					filename_tFileInputXML_6 = context.XMLTempAgrupado;
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_6 != null
						&& filename_tFileInputXML_6 instanceof String
						&& filename_tFileInputXML_6.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_6) {
						filename_tFileInputXML_6 = filename_tFileInputXML_6
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_6 = true;
				org.dom4j.Document doc_tFileInputXML_6 = null;
				java.io.Closeable toClose_tFileInputXML_6 = null;
				try {
					if (filename_tFileInputXML_6 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_6 = (java.io.InputStream) filename_tFileInputXML_6;
						toClose_tFileInputXML_6 = inputStream_tFileInputXML_6;
						doc_tFileInputXML_6 = reader_tFileInputXML_6
								.read(inputStream_tFileInputXML_6);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_6 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_6)),
								"UTF-8");
						toClose_tFileInputXML_6 = unicodeReader_tFileInputXML_6;
						org.xml.sax.InputSource in_tFileInputXML_6 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_6);
						doc_tFileInputXML_6 = reader_tFileInputXML_6
								.read(in_tFileInputXML_6);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_6 = false;
				} finally {
					if (toClose_tFileInputXML_6 != null) {
						toClose_tFileInputXML_6.close();
					}
				}
				if (isValidFile_tFileInputXML_6) {
					NameSpaceTool_tFileInputXML_6 nsTool_tFileInputXML_6 = new NameSpaceTool_tFileInputXML_6();
					nsTool_tFileInputXML_6.countNSMap(doc_tFileInputXML_6
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_6 = nsTool_tFileInputXML_6.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_6 = doc_tFileInputXML_6
							.createXPath(nsTool_tFileInputXML_6
									.addDefaultNSPrefix("/"));
					x_tFileInputXML_6
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_6);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_6 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_6
							.selectNodes(doc_tFileInputXML_6);
					XML_API_tFileInputXML_6 xml_api_tFileInputXML_6 = new XML_API_tFileInputXML_6();
					String str_tFileInputXML_6 = "";
					org.dom4j.Node node_tFileInputXML_6 = null;

					// init all mapping xpaths
					java.util.Map<Integer, org.dom4j.XPath> xpaths_tFileInputXML_6 = new java.util.HashMap<Integer, org.dom4j.XPath>();
					class XPathUtil_tFileInputXML_6 {

						public void initXPaths_0(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_6 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("/",
											"/"));
							xpath_0.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(0, xpath_0);

						}

						public void initXPaths(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_6 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							initXPaths_0(xpaths, nsTool, xmlNameSpaceMap);

						}
					}
					XPathUtil_tFileInputXML_6 xPathUtil_tFileInputXML_6 = new XPathUtil_tFileInputXML_6();
					xPathUtil_tFileInputXML_6.initXPaths(
							xpaths_tFileInputXML_6, nsTool_tFileInputXML_6,
							xmlNameSpaceMap_tFileInputXML_6);
					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_6 : nodeList_tFileInputXML_6) {
						nb_line_tFileInputXML_6++;
						row12 = null;
						boolean whetherReject_tFileInputXML_6 = false;
						row12 = new row12Struct();
						try {
							Object obj0_tFileInputXML_6 = xpaths_tFileInputXML_6
									.get(0).evaluate(temp_tFileInputXML_6);
							if (obj0_tFileInputXML_6 == null) {
								node_tFileInputXML_6 = null;
								str_tFileInputXML_6 = null;

							} else if (obj0_tFileInputXML_6 instanceof org.dom4j.Node) {
								node_tFileInputXML_6 = (org.dom4j.Node) obj0_tFileInputXML_6;
								str_tFileInputXML_6 = node_tFileInputXML_6
										.asXML();
							} else if (obj0_tFileInputXML_6 instanceof String
									|| obj0_tFileInputXML_6 instanceof Number) {
								node_tFileInputXML_6 = temp_tFileInputXML_6;
								str_tFileInputXML_6 = String
										.valueOf(obj0_tFileInputXML_6);
							} else if (obj0_tFileInputXML_6 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_6 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_6;
								node_tFileInputXML_6 = nodes_tFileInputXML_6
										.size() > 0 ? nodes_tFileInputXML_6
										.get(0) : null;
								str_tFileInputXML_6 = node_tFileInputXML_6 == null ? null
										: node_tFileInputXML_6.asXML();
							}
							row12.createCases = str_tFileInputXML_6;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_6 = true;
							System.err.println(e.getMessage());
							row12 = null;
						}

						/**
						 * [tFileInputXML_6 begin ] stop
						 */

						/**
						 * [tFileInputXML_6 main ] start
						 */

						currentComponent = "tFileInputXML_6";

						tos_count_tFileInputXML_6++;

						/**
						 * [tFileInputXML_6 main ] stop
						 */
						// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tReplace_4 main ] start
							 */

							currentComponent = "tReplace_4";

							// row12
							// row12

							if (execStat) {
								runStat.updateStatOnConnection("row12"
										+ iterateId, 1, 1);
							}

							String searchStr_tReplace_4_1 = "<Entities>" + "";
							row12.createCases = StringUtils
									.replaceAllStrictly(
											row12.createCases,
											searchStr_tReplace_4_1,
											"<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'     xmlns:tem='http://tempuri.org/'>    <soapenv:Header></soapenv:Header>    <soapenv:Body>        <tem:createCases>            <tem:casesInfo>                <BizAgiWSParam>                    <domain>domain</domain>                    <userName>admon</userName>                    <Cases>"
													+ "", false, false);
							String searchStr_tReplace_4_2 = "</Entities>" + "";
							row12.createCases = StringUtils
									.replaceAllStrictly(
											row12.createCases,
											searchStr_tReplace_4_2,
											"</Cases>                </BizAgiWSParam>            </tem:casesInfo>        </tem:createCases>    </soapenv:Body></soapenv:Envelope>"
													+ "", false, false);
							String searchStr_tReplace_4_3 = "<TablaProceso>"
									+ "";
							row12.createCases = StringUtils
									.replaceAllStrictly(
											row12.createCases,
											searchStr_tReplace_4_3,
											"<Case>                            <Process>NombreProceso</Process>                            <Entities>                                <TablaProceso>"
													+ "", false, false);
							String searchStr_tReplace_4_4 = "</TablaProceso>"
									+ "";
							row12.createCases = StringUtils
									.replaceAllStrictly(
											row12.createCases,
											searchStr_tReplace_4_4,
											"</TablaProceso>                            </Entities>                        </Case>"
													+ "", false, false);
							String searchStr_tReplace_4_5 = "TablaProceso" + "";
							row12.createCases = StringUtils.replaceAllStrictly(
									row12.createCases, searchStr_tReplace_4_5,
									"M_GestiondeMuestras" + "", false, false);
							String searchStr_tReplace_4_6 = "NombreProceso"
									+ "";
							row12.createCases = StringUtils.replaceAllStrictly(
									row12.createCases, searchStr_tReplace_4_6,
									"PubGestionarMuestraCP" + "", false, false);
							row19.createCases = row12.createCases;

							nb_line_tReplace_4++;

							tos_count_tReplace_4++;

							/**
							 * [tReplace_4 main ] stop
							 */

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row19
							// row19

							if (execStat) {
								runStat.updateStatOnConnection("row19"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;
								Var.Fecha = TalendDate
										.getDate("dd/MM/yyyy hh:mm:ss aa");// ###############################
								// ###############################
								// # Output tables

								logxml = null;

								// # Output table : 'logxml'
								logxml_tmp.XMLEnviado = row19.createCases;
								logxml_tmp.Fecha = Var.Fecha;
								logxml = logxml_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "logxml"
							if (logxml != null) {

								/**
								 * [tFileOutputExcel_12 main ] start
								 */

								currentComponent = "tFileOutputExcel_12";

								// logxml
								// logxml

								if (execStat) {
									runStat.updateStatOnConnection("logxml"
											+ iterateId, 1, 1);
								}

								xlsxTool_tFileOutputExcel_12.addRow();

								if (logxml.XMLEnviado != null) {

									xlsxTool_tFileOutputExcel_12
											.addCellValue(String
													.valueOf(logxml.XMLEnviado));
								} else {
									xlsxTool_tFileOutputExcel_12
											.addCellNullValue();
								}

								if (logxml.Fecha != null) {

									xlsxTool_tFileOutputExcel_12
											.addCellValue(String
													.valueOf(logxml.Fecha));
								} else {
									xlsxTool_tFileOutputExcel_12
											.addCellNullValue();
								}

								nb_line_tFileOutputExcel_12++;

								row20 = logxml;

								tos_count_tFileOutputExcel_12++;

								/**
								 * [tFileOutputExcel_12 main ] stop
								 */

								/**
								 * [tExtractXMLField_4 main ] start
								 */

								currentComponent = "tExtractXMLField_4";

								// row20
								// row20

								if (execStat) {
									runStat.updateStatOnConnection("row20"
											+ iterateId, 1, 1);
								}

								String xmlStr_tExtractXMLField_4 = null;
								routines.system.Document xmlDocument_tExtractXMLField_4 = null;
								if (row20.XMLEnviado != null) {
									xmlStr_tExtractXMLField_4 = row20.XMLEnviado;
								}
								if (xmlStr_tExtractXMLField_4 != null) {// C_01
									row22 = null;
									NameSpaceTool_tExtractXMLField_4 nsTool_tExtractXMLField_4 = new NameSpaceTool_tExtractXMLField_4();
									org.dom4j.io.SAXReader reader_tExtractXMLField_4 = new org.dom4j.io.SAXReader();

									org.dom4j.Document doc_tExtractXMLField_4 = null;
									java.util.HashMap xmlNameSpaceMap_tExtractXMLField_4 = null;
									org.dom4j.XPath x_tExtractXMLField_4 = null;
									java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractXMLField_4 = null;
									String loopQuery_tExtractXMLField_4 = "/";

									boolean isStructError_tExtractXMLField_4 = true;

									try {

										doc_tExtractXMLField_4 = reader_tExtractXMLField_4
												.read(new java.io.StringReader(
														xmlStr_tExtractXMLField_4));

										nsTool_tExtractXMLField_4
												.countNSMap(doc_tExtractXMLField_4
														.getRootElement());
										xmlNameSpaceMap_tExtractXMLField_4 = nsTool_tExtractXMLField_4.xmlNameSpaceMap;

										x_tExtractXMLField_4 = doc_tExtractXMLField_4
												.createXPath(nsTool_tExtractXMLField_4
														.addDefaultNSPrefix(
																loopQuery_tExtractXMLField_4,
																loopQuery_tExtractXMLField_4));

										x_tExtractXMLField_4
												.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_4);

										nodeList_tExtractXMLField_4 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractXMLField_4
												.selectNodes(doc_tExtractXMLField_4);

										isStructError_tExtractXMLField_4 = false;

									} catch (java.lang.Exception ex_tExtractXMLField_4) {
										System.err
												.println(ex_tExtractXMLField_4
														.getMessage());
									}

									org.dom4j.Node node_tExtractXMLField_4 = null;
									String str_tExtractXMLField_4 = "";
									boolean resultIsNode_tExtractXMLField_4 = true;
									for (int i_tExtractXMLField_4 = 0; isStructError_tExtractXMLField_4
											|| (nodeList_tExtractXMLField_4 != null && i_tExtractXMLField_4 < nodeList_tExtractXMLField_4
													.size()); i_tExtractXMLField_4++) {

										if (!isStructError_tExtractXMLField_4) {
											row22 = null;
											row22 = new row22Struct();

											org.dom4j.tree.AbstractNode temp_tExtractXMLField_4 = nodeList_tExtractXMLField_4
													.get(i_tExtractXMLField_4);

											nb_line_tExtractXMLField_4++;
											try {
												org.dom4j.XPath xTmp0_tExtractXMLField_4 = temp_tExtractXMLField_4
														.createXPath(nsTool_tExtractXMLField_4
																.addDefaultNSPrefix(
																		"/",
																		loopQuery_tExtractXMLField_4));
												xTmp0_tExtractXMLField_4
														.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_4);

												Object obj0_tExtractXMLField_4 = xTmp0_tExtractXMLField_4
														.evaluate(temp_tExtractXMLField_4);
												if (obj0_tExtractXMLField_4 instanceof String
														|| obj0_tExtractXMLField_4 instanceof Number) {
													resultIsNode_tExtractXMLField_4 = false;
													str_tExtractXMLField_4 = String
															.valueOf(obj0_tExtractXMLField_4);
												} else {
													resultIsNode_tExtractXMLField_4 = true;
													node_tExtractXMLField_4 = xTmp0_tExtractXMLField_4
															.selectSingleNode(temp_tExtractXMLField_4);
													str_tExtractXMLField_4 = node_tExtractXMLField_4 == null ? null
															: node_tExtractXMLField_4
																	.asXML();
												}
												row22.createCases = ParserUtils
														.parseTo_Document(str_tExtractXMLField_4);
											} catch (java.lang.Exception ex_tExtractXMLField_4) {
												System.err
														.println(ex_tExtractXMLField_4
																.getMessage());
												row22 = null;
											}
										}

										isStructError_tExtractXMLField_4 = false;

										globalMap.put(
												"tExtractXMLField_4_NB_LINE",
												nb_line_tExtractXMLField_4);

										tos_count_tExtractXMLField_4++;

										/**
										 * [tExtractXMLField_4 main ] stop
										 */
										// Start of branch "row22"
										if (row22 != null) {

											/**
											 * [tSOAP_4 main ] start
											 */

											currentComponent = "tSOAP_4";

											// row22
											// row22

											if (execStat) {
												runStat.updateStatOnConnection(
														"row22" + iterateId, 1,
														1);
											}

											String document_tSOAP_4 = soapUtil_tSOAP_4
													.extractContentAsDocument(
															org.talend.soap.SOAPUtil.SOAP11,
															"http://"
																	+ context.BIZhost
																	+ "/"
																	+ context.BIZprocesoDD
																	+ "/webservices/workflowenginesoa.asmx",
															"http://tempuri.org/createCases",
															row22.createCases
																	.toString());

											// for output

											row37 = new row37Struct();

											row37.Soap = ParserUtils
													.parseTo_Document(document_tSOAP_4);

											tos_count_tSOAP_4++;

											/**
											 * [tSOAP_4 main ] stop
											 */

											/**
											 * [tXMLMap_4_TXMLMAP_OUT main ]
											 * start
											 */

											currentVirtualComponent = "tXMLMap_4";

											currentComponent = "tXMLMap_4_TXMLMAP_OUT";

											// row37
											// row37

											if (execStat) {
												runStat.updateStatOnConnection(
														"row37" + iterateId, 1,
														1);
											}

											boolean rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
											boolean rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
											boolean mainRowRejected_tXMLMap_4_TXMLMAP_OUT = false;
											boolean isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;

											// init document to flat tool
											routines.system.DocumentToFlat docToFlat_tXMLMap_4_TXMLMAP_OUT = new routines.system.DocumentToFlat();
											docToFlat_tXMLMap_4_TXMLMAP_OUT
													.setOriginalLoop("/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process");
											docToFlat_tXMLMap_4_TXMLMAP_OUT
													.setIsOptional(false);
											if (row37.Soap == null
													|| row37.Soap.getDocument() == null) {
												throw new RuntimeException(
														"row37.Soap can't be empty");
											}
											org.dom4j.Document doc_tXMLMap_4_TXMLMAP_OUT = row37.Soap
													.getDocument();
											docToFlat_tXMLMap_4_TXMLMAP_OUT
													.setDoc(doc_tXMLMap_4_TXMLMAP_OUT);
											docToFlat_tXMLMap_4_TXMLMAP_OUT
													.setDefineNS(false);
											docToFlat_tXMLMap_4_TXMLMAP_OUT
													.setNamespaceTool(nsTool_tXMLMap_4_TXMLMAP_OUT);

											// old version, find NS from doc
											nsTool_tXMLMap_4_TXMLMAP_OUT
													.countNSMap(doc_tXMLMap_4_TXMLMAP_OUT
															.getRootElement());
											java.util.HashMap<String, String> xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT = nsTool_tXMLMap_4_TXMLMAP_OUT.xmlNameSpaceMap;

											docToFlat_tXMLMap_4_TXMLMAP_OUT
													.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT);

											String[] absolutePathMappings_tXMLMap_4_TXMLMAP_OUT = new String[6];
											String[] relativePathMappings_tXMLMap_4_TXMLMAP_OUT = new String[6];

											absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[0] = "row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processRadNumber";
											relativePathMappings_tXMLMap_4_TXMLMAP_OUT[0] = "processRadNumber";

											absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[1] = "row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassCreationDate";
											relativePathMappings_tXMLMap_4_TXMLMAP_OUT[1] = "processWorkflowClass/workflowClassCreationDate";

											absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[2] = "row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId";
											relativePathMappings_tXMLMap_4_TXMLMAP_OUT[2] = "processId";

											absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[3] = "row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorMessage";
											relativePathMappings_tXMLMap_4_TXMLMAP_OUT[3] = "processError/errorMessage";

											absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[4] = "row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassDisplayName";
											relativePathMappings_tXMLMap_4_TXMLMAP_OUT[4] = "processWorkflowClass/workflowClassDisplayName";

											absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[5] = "row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorCode";
											relativePathMappings_tXMLMap_4_TXMLMAP_OUT[5] = "processError/errorCode";

											docToFlat_tXMLMap_4_TXMLMAP_OUT
													.setAbsolutePathMappings(absolutePathMappings_tXMLMap_4_TXMLMAP_OUT);
											docToFlat_tXMLMap_4_TXMLMAP_OUT
													.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_4_TXMLMAP_OUT);
											// generate document to flat data
											docToFlat_tXMLMap_4_TXMLMAP_OUT
													.flat();
											// get flat data
											java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_4_TXMLMAP_OUT = docToFlat_tXMLMap_4_TXMLMAP_OUT
													.getResultSet();

											for (java.util.Map<String, String> oneRow_tXMLMap_4_TXMLMAP_OUT : resultSet_tXMLMap_4_TXMLMAP_OUT) { // G_TXM_M_001
												nb_line_tXMLMap_4_TXMLMAP_OUT++;
												rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
												rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
												mainRowRejected_tXMLMap_4_TXMLMAP_OUT = false;
												isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;

												treeNodeAPI_tXMLMap_4_TXMLMAP_OUT
														.clear();
												for (java.util.Map.Entry<String, String> entry_tXMLMap_4_TXMLMAP_OUT : oneRow_tXMLMap_4_TXMLMAP_OUT
														.entrySet()) {
													treeNodeAPI_tXMLMap_4_TXMLMAP_OUT
															.put(entry_tXMLMap_4_TXMLMAP_OUT
																	.getKey(),
																	entry_tXMLMap_4_TXMLMAP_OUT
																			.getValue());
												}

												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tXMLMap_4_TXMLMAP_OUT__Struct Var = Var__tXMLMap_4_TXMLMAP_OUT;

													Var.creacionCorrecta = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT
															.get_Integer("row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId") != null
															&& treeNodeAPI_tXMLMap_4_TXMLMAP_OUT
																	.get_Integer("row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId") != 0;
													// ###############################
													// # Output tables

													creado1 = null;
													fallidos1 = null;

													boolean rejected_tXMLMap_4_TXMLMAP_OUT = true;

													// # Output table :
													// 'creado1'
													// # Filter conditions
													if (

													Var.creacionCorrecta

													) {
														rejected_tXMLMap_4_TXMLMAP_OUT = false;

														creado1_tmp = new creado1Struct();
														creado1_tmp.IDCaso = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT
																.get_Integer("row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId");
														creado1_tmp.RadNumber = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT
																.get_Integer("row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processRadNumber");
														creado1_tmp.NombreProceso = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT
																.get_String("row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassDisplayName");
														creado1_tmp.Fecha = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT
																.get_String("row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassCreationDate");
														allOutsForAggregate_tXMLMap_4
																.add(creado1_tmp);

													} // closing filter/reject
														// ###### START REJECTS
														// #####

													// # Output reject table :
													// 'fallidos1'
													// # Filter conditions
													if (rejected_tXMLMap_4_TXMLMAP_OUT) {

														fallidos1_tmp = new fallidos1Struct();
														fallidos1_tmp.CodigoError = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT
																.get_String("row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorCode");
														fallidos1_tmp.MensajeError = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT
																.get_String("row37.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorMessage");
														allOutsForAggregate_tXMLMap_4
																.add(fallidos1_tmp);

													} // closing filter/reject
														// ###############################

												} // end of Var scope

												rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;

											}// G_TXM_M_001 close

											tos_count_tXMLMap_4_TXMLMAP_OUT++;

											/**
											 * [tXMLMap_4_TXMLMAP_OUT main ]
											 * stop
											 */

										} // End of branch "row22"

										// end for
									}

								} // C_01

							} // End of branch "logxml"

						} // End of branch "row12"

						/**
						 * [tFileInputXML_6 end ] start
						 */

						currentComponent = "tFileInputXML_6";

					}
				}
				globalMap.put("tFileInputXML_6_NB_LINE",
						nb_line_tFileInputXML_6);

				ok_Hash.put("tFileInputXML_6", true);
				end_Hash.put("tFileInputXML_6", System.currentTimeMillis());

				/**
				 * [tFileInputXML_6 end ] stop
				 */

				/**
				 * [tReplace_4 end ] start
				 */

				currentComponent = "tReplace_4";

				globalMap.put("tReplace_4_NB_LINE", nb_line_tReplace_4);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tReplace_4", true);
				end_Hash.put("tReplace_4", System.currentTimeMillis());

				/**
				 * [tReplace_4 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row19" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_12 end ] start
				 */

				currentComponent = "tFileOutputExcel_12";

				xlsxTool_tFileOutputExcel_12.writeExcel(
						fileName_tFileOutputExcel_12, true);

				globalMap.put("tFileOutputExcel_12_NB_LINE",
						nb_line_tFileOutputExcel_12);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("logxml" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_12", true);
				end_Hash.put("tFileOutputExcel_12", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_12 end ] stop
				 */

				/**
				 * [tExtractXMLField_4 end ] start
				 */

				currentComponent = "tExtractXMLField_4";

				globalMap.put("tExtractXMLField_4_NB_LINE",
						nb_line_tExtractXMLField_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row20" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tExtractXMLField_4", true);
				end_Hash.put("tExtractXMLField_4", System.currentTimeMillis());

				/**
				 * [tExtractXMLField_4 end ] stop
				 */

				/**
				 * [tSOAP_4 end ] start
				 */

				currentComponent = "tSOAP_4";

				soapUtil_tSOAP_4.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row22" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tSOAP_4", true);
				end_Hash.put("tSOAP_4", System.currentTimeMillis());

				/**
				 * [tSOAP_4 end ] stop
				 */

				/**
				 * [tXMLMap_4_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row37" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_4_TXMLMAP_OUT",
						System.currentTimeMillis());

				/**
				 * [tXMLMap_4_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_2", false);
				start_Hash
						.put("tFileOutputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row39" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_2 = 0;

				class BytesLimit65535_tFileOutputExcel_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_2().limitLog4jByte();

				int columnIndex_tFileOutputExcel_2 = 0;

				String fileName_tFileOutputExcel_2 = context.ExcelLogCreados;
				int nb_line_tFileOutputExcel_2 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_2.setSheet("Creados");
				xlsxTool_tFileOutputExcel_2.setAppend(true, true);
				xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_2.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_2
						.prepareXlsxFile(fileName_tFileOutputExcel_2);

				xlsxTool_tFileOutputExcel_2.setFont("");

				/**
				 * [tFileOutputExcel_2 begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("creado1" + iterateId,
								0, 0);

					}
				}

				int tos_count_tLogRow_4 = 0;

				class BytesLimit65535_tLogRow_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_4().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
				java.io.PrintStream consoleOut_tLogRow_4 = null;

				StringBuilder sbHeader_tLogRow_4 = new StringBuilder();

				sbHeader_tLogRow_4.append("IDCaso");

				sbHeader_tLogRow_4.append("\t");

				sbHeader_tLogRow_4.append("RadNumber");

				sbHeader_tLogRow_4.append("\t");

				sbHeader_tLogRow_4.append("NombreProceso");

				sbHeader_tLogRow_4.append("\t");

				sbHeader_tLogRow_4.append("Fecha");

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_4 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
				}
				consoleOut_tLogRow_4.println(sbHeader_tLogRow_4.toString());
				consoleOut_tLogRow_4.flush();

				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
				// /////////////////////

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_3", false);
				start_Hash
						.put("tFileOutputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row40" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_3 = 0;

				class BytesLimit65535_tFileOutputExcel_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_3().limitLog4jByte();

				int columnIndex_tFileOutputExcel_3 = 0;

				String fileName_tFileOutputExcel_3 = context.ExcelLogFallidos;
				int nb_line_tFileOutputExcel_3 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_3.setSheet("Fallidos");
				xlsxTool_tFileOutputExcel_3.setAppend(true, true);
				xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_3.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_3
						.prepareXlsxFile(fileName_tFileOutputExcel_3);

				xlsxTool_tFileOutputExcel_3.setFont("");

				/**
				 * [tFileOutputExcel_3 begin ] stop
				 */

				/**
				 * [tLogRow_9 begin ] start
				 */

				ok_Hash.put("tLogRow_9", false);
				start_Hash.put("tLogRow_9", System.currentTimeMillis());

				currentComponent = "tLogRow_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("fallidos1" + iterateId,
								0, 0);

					}
				}

				int tos_count_tLogRow_9 = 0;

				class BytesLimit65535_tLogRow_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_9().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = "|";
				java.io.PrintStream consoleOut_tLogRow_9 = null;

				StringBuilder strBuffer_tLogRow_9 = null;
				int nb_line_tLogRow_9 = 0;
				// /////////////////////

				/**
				 * [tLogRow_9 begin ] stop
				 */

				/**
				 * [tXMLMap_4_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_4_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_4_TXMLMAP_IN",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_IN";

				int tos_count_tXMLMap_4_TXMLMAP_IN = 0;

				class BytesLimit65535_tXMLMap_4_TXMLMAP_IN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_4_TXMLMAP_IN().limitLog4jByte();
				java.util.List<Object> outs_tXMLMap_4 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_4");
				for (Object row_out_tXMLMap_4_TXMLMAP_IN : outs_tXMLMap_4) {// TD512

					/**
					 * [tXMLMap_4_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_4_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_4";

					currentComponent = "tXMLMap_4_TXMLMAP_IN";

					creado1 = null;
					if (row_out_tXMLMap_4_TXMLMAP_IN != null
							&& row_out_tXMLMap_4_TXMLMAP_IN instanceof creado1Struct) {
						creado1 = (creado1Struct) row_out_tXMLMap_4_TXMLMAP_IN;
					}
					fallidos1 = null;
					if (row_out_tXMLMap_4_TXMLMAP_IN != null
							&& row_out_tXMLMap_4_TXMLMAP_IN instanceof fallidos1Struct) {
						fallidos1 = (fallidos1Struct) row_out_tXMLMap_4_TXMLMAP_IN;
					}

					tos_count_tXMLMap_4_TXMLMAP_IN++;

					/**
					 * [tXMLMap_4_TXMLMAP_IN main ] stop
					 */
					// Start of branch "creado1"
					if (creado1 != null) {

						/**
						 * [tLogRow_4 main ] start
						 */

						currentComponent = "tLogRow_4";

						// creado1
						// creado1

						if (execStat) {
							runStat.updateStatOnConnection("creado1"
									+ iterateId, 1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_4 = new StringBuilder();

						if (creado1.IDCaso != null) { //

							strBuffer_tLogRow_4.append(String
									.valueOf(creado1.IDCaso));

						} //

						strBuffer_tLogRow_4.append("|");

						if (creado1.RadNumber != null) { //

							strBuffer_tLogRow_4.append(String
									.valueOf(creado1.RadNumber));

						} //

						strBuffer_tLogRow_4.append("|");

						if (creado1.NombreProceso != null) { //

							strBuffer_tLogRow_4.append(String
									.valueOf(creado1.NombreProceso));

						} //

						strBuffer_tLogRow_4.append("|");

						if (creado1.Fecha != null) { //

							strBuffer_tLogRow_4.append(String
									.valueOf(creado1.Fecha));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_4 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_4);
						}
						consoleOut_tLogRow_4.println(strBuffer_tLogRow_4
								.toString());
						consoleOut_tLogRow_4.flush();
						nb_line_tLogRow_4++;
						// ////

						// ////

						// /////////////////////

						row39 = creado1;

						tos_count_tLogRow_4++;

						/**
						 * [tLogRow_4 main ] stop
						 */

						/**
						 * [tFileOutputExcel_2 main ] start
						 */

						currentComponent = "tFileOutputExcel_2";

						// row39
						// row39

						if (execStat) {
							runStat.updateStatOnConnection("row39" + iterateId,
									1, 1);
						}

						xlsxTool_tFileOutputExcel_2.addRow();

						if (row39.IDCaso != null) {

							xlsxTool_tFileOutputExcel_2.addCellValue(Double
									.parseDouble(String.valueOf(row39.IDCaso)));
						} else {
							xlsxTool_tFileOutputExcel_2.addCellNullValue();
						}

						if (row39.RadNumber != null) {

							xlsxTool_tFileOutputExcel_2.addCellValue(Double
									.parseDouble(String
											.valueOf(row39.RadNumber)));
						} else {
							xlsxTool_tFileOutputExcel_2.addCellNullValue();
						}

						if (row39.NombreProceso != null) {

							xlsxTool_tFileOutputExcel_2.addCellValue(String
									.valueOf(row39.NombreProceso));
						} else {
							xlsxTool_tFileOutputExcel_2.addCellNullValue();
						}

						if (row39.Fecha != null) {

							xlsxTool_tFileOutputExcel_2.addCellValue(String
									.valueOf(row39.Fecha));
						} else {
							xlsxTool_tFileOutputExcel_2.addCellNullValue();
						}

						nb_line_tFileOutputExcel_2++;

						tos_count_tFileOutputExcel_2++;

						/**
						 * [tFileOutputExcel_2 main ] stop
						 */

					} // End of branch "creado1"

					// Start of branch "fallidos1"
					if (fallidos1 != null) {

						/**
						 * [tLogRow_9 main ] start
						 */

						currentComponent = "tLogRow_9";

						// fallidos1
						// fallidos1

						if (execStat) {
							runStat.updateStatOnConnection("fallidos1"
									+ iterateId, 1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_9 = new StringBuilder();

						if (fallidos1.CodigoError != null) { //

							strBuffer_tLogRow_9.append(String
									.valueOf(fallidos1.CodigoError));

						} //

						strBuffer_tLogRow_9.append("|");

						if (fallidos1.MensajeError != null) { //

							strBuffer_tLogRow_9.append(String
									.valueOf(fallidos1.MensajeError));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_9 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_9);
						}
						consoleOut_tLogRow_9.println(strBuffer_tLogRow_9
								.toString());
						consoleOut_tLogRow_9.flush();
						nb_line_tLogRow_9++;
						// ////

						// ////

						// /////////////////////

						row40 = fallidos1;

						tos_count_tLogRow_9++;

						/**
						 * [tLogRow_9 main ] stop
						 */

						/**
						 * [tFileOutputExcel_3 main ] start
						 */

						currentComponent = "tFileOutputExcel_3";

						// row40
						// row40

						if (execStat) {
							runStat.updateStatOnConnection("row40" + iterateId,
									1, 1);
						}

						xlsxTool_tFileOutputExcel_3.addRow();

						if (row40.CodigoError != null) {

							xlsxTool_tFileOutputExcel_3.addCellValue(String
									.valueOf(row40.CodigoError));
						} else {
							xlsxTool_tFileOutputExcel_3.addCellNullValue();
						}

						if (row40.MensajeError != null) {

							xlsxTool_tFileOutputExcel_3.addCellValue(String
									.valueOf(row40.MensajeError));
						} else {
							xlsxTool_tFileOutputExcel_3.addCellNullValue();
						}

						nb_line_tFileOutputExcel_3++;

						tos_count_tFileOutputExcel_3++;

						/**
						 * [tFileOutputExcel_3 main ] stop
						 */

					} // End of branch "fallidos1"

					/**
					 * [tXMLMap_4_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_4";

					currentComponent = "tXMLMap_4_TXMLMAP_IN";

				}// TD512

				ok_Hash.put("tXMLMap_4_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_4_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

				// ////
				// ////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("creado1" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 end ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				xlsxTool_tFileOutputExcel_2.writeExcel(
						fileName_tFileOutputExcel_2, true);

				globalMap.put("tFileOutputExcel_2_NB_LINE",
						nb_line_tFileOutputExcel_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row39" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_2", true);
				end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_2 end ] stop
				 */

				/**
				 * [tLogRow_9 end ] start
				 */

				currentComponent = "tLogRow_9";

				// ////
				// ////
				globalMap.put("tLogRow_9_NB_LINE", nb_line_tLogRow_9);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("fallidos1" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tLogRow_9", true);
				end_Hash.put("tLogRow_9", System.currentTimeMillis());

				/**
				 * [tLogRow_9 end ] stop
				 */

				/**
				 * [tFileOutputExcel_3 end ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				xlsxTool_tFileOutputExcel_3.writeExcel(
						fileName_tFileOutputExcel_3, true);

				globalMap.put("tFileOutputExcel_3_NB_LINE",
						nb_line_tFileOutputExcel_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row40" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_3", true);
				end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_6 finally ] start
				 */

				currentComponent = "tFileInputXML_6";

				/**
				 * [tFileInputXML_6 finally ] stop
				 */

				/**
				 * [tReplace_4 finally ] start
				 */

				currentComponent = "tReplace_4";

				/**
				 * [tReplace_4 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_12 finally ] start
				 */

				currentComponent = "tFileOutputExcel_12";

				/**
				 * [tFileOutputExcel_12 finally ] stop
				 */

				/**
				 * [tExtractXMLField_4 finally ] start
				 */

				currentComponent = "tExtractXMLField_4";

				/**
				 * [tExtractXMLField_4 finally ] stop
				 */

				/**
				 * [tSOAP_4 finally ] start
				 */

				currentComponent = "tSOAP_4";

				/**
				 * [tSOAP_4 finally ] stop
				 */

				/**
				 * [tXMLMap_4_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_OUT";

				/**
				 * [tXMLMap_4_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_4_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_IN";

				/**
				 * [tXMLMap_4_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_2 finally ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				/**
				 * [tFileOutputExcel_2 finally ] stop
				 */

				/**
				 * [tLogRow_9 finally ] start
				 */

				currentComponent = "tLogRow_9";

				/**
				 * [tLogRow_9 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_3 finally ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				/**
				 * [tFileOutputExcel_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_6_SUBPROCESS_STATE", 1);
	}

	public static class row42Struct implements
			routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String CodigoError;

		public String getCodigoError() {
			return this.CodigoError;
		}

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.CodigoError = readString(dis);

					this.MensajeError = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CodigoError, dos);

				// String

				writeString(this.MensajeError, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CodigoError=" + CodigoError);
			sb.append(",MensajeError=" + MensajeError);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public Integer IDCaso;

		public Integer getIDCaso() {
			return this.IDCaso;
		}

		public Integer RadNumber;

		public Integer getRadNumber() {
			return this.RadNumber;
		}

		public String NombreProceso;

		public String getNombreProceso() {
			return this.NombreProceso;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.IDCaso = readInteger(dis);

					this.RadNumber = readInteger(dis);

					this.NombreProceso = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCaso, dos);

				// Integer

				writeInteger(this.RadNumber, dos);

				// String

				writeString(this.NombreProceso, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCaso=" + String.valueOf(IDCaso));
			sb.append(",RadNumber=" + String.valueOf(RadNumber));
			sb.append(",NombreProceso=" + NombreProceso);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class creado2Struct implements
			routines.system.IPersistableRow<creado2Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public Integer IDCaso;

		public Integer getIDCaso() {
			return this.IDCaso;
		}

		public Integer RadNumber;

		public Integer getRadNumber() {
			return this.RadNumber;
		}

		public String NombreProceso;

		public String getNombreProceso() {
			return this.NombreProceso;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.IDCaso = readInteger(dis);

					this.RadNumber = readInteger(dis);

					this.NombreProceso = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCaso, dos);

				// Integer

				writeInteger(this.RadNumber, dos);

				// String

				writeString(this.NombreProceso, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCaso=" + String.valueOf(IDCaso));
			sb.append(",RadNumber=" + String.valueOf(RadNumber));
			sb.append(",NombreProceso=" + NombreProceso);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(creado2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fallidos2Struct implements
			routines.system.IPersistableRow<fallidos2Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String CodigoError;

		public String getCodigoError() {
			return this.CodigoError;
		}

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.CodigoError = readString(dis);

					this.MensajeError = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CodigoError, dos);

				// String

				writeString(this.MensajeError, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CodigoError=" + CodigoError);
			sb.append(",MensajeError=" + MensajeError);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fallidos2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row35Struct implements
			routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements
			routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document createCases;

		public routines.system.Document getCreateCases() {
			return this.createCases;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = (routines.system.Document) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.createCases);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + String.valueOf(createCases));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements
			routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLEnviado;

		public String getXMLEnviado() {
			return this.XMLEnviado;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLEnviado = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLEnviado, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLEnviado=" + XMLEnviado);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logxml2Struct implements
			routines.system.IPersistableRow<logxml2Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLEnviado;

		public String getXMLEnviado() {
			return this.XMLEnviado;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLEnviado = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLEnviado, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLEnviado=" + XMLEnviado);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logxml2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String createCases;

		public String getCreateCases() {
			return this.createCases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.createCases, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + createCases);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String createCases;

		public String getCreateCases() {
			return this.createCases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.createCases, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + createCases);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();
				row32Struct row32 = new row32Struct();
				logxml2Struct logxml2 = new logxml2Struct();
				logxml2Struct row33 = logxml2;
				row34Struct row34 = new row34Struct();
				row35Struct row35 = new row35Struct();
				creado2Struct creado2 = new creado2Struct();
				creado2Struct row41 = creado2;
				fallidos2Struct fallidos2 = new fallidos2Struct();
				fallidos2Struct row42 = fallidos2;

				/**
				 * [tXMLMap_6_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_6_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_6_TXMLMAP_OUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_6";

				currentComponent = "tXMLMap_6_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row35" + iterateId, 0,
								0);

					}
				}

				int tos_count_tXMLMap_6_TXMLMAP_OUT = 0;

				class BytesLimit65535_tXMLMap_6_TXMLMAP_OUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_6_TXMLMAP_OUT().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_6_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_6_TXMLMAP_OUT__Struct {
					boolean creacionCorrecta;
				}
				Var__tXMLMap_6_TXMLMAP_OUT__Struct Var__tXMLMap_6_TXMLMAP_OUT = new Var__tXMLMap_6_TXMLMAP_OUT__Struct();
				// ###############################
				// # Outputs initialization
				creado2Struct creado2_tmp = new creado2Struct();
				creado2Struct creado2_save = null;
				// the aggregate variable
				creado2Struct creado2_aggregate = null;
				fallidos2Struct fallidos2_tmp = new fallidos2Struct();
				fallidos2Struct fallidos2_save = null;
				// the aggregate variable
				fallidos2Struct fallidos2_aggregate = null;
				// init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_6 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_6",
						allOutsForAggregate_tXMLMap_6);
				// ###############################
				class TreeNode_API_tXMLMap_6_TXMLMAP_OUT {
					java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();

					void clear() {
						xpath_value_map.clear();
					}

					void put(String xpath, String value) {
						xpath_value_map.put(xpath, value);
					}

					String get_null(String xpath) {
						return null;
					}

					Integer get_Integer(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Integer(content);
					}

					String get_String(String xpath) {
						return xpath_value_map.get(xpath);
					}

					java.util.Date get_Date(String xpath, String pattern) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Date(content, pattern);
					}
				}
				TreeNode_API_tXMLMap_6_TXMLMAP_OUT treeNodeAPI_tXMLMap_6_TXMLMAP_OUT = new TreeNode_API_tXMLMap_6_TXMLMAP_OUT();
				NameSpaceTool nsTool_tXMLMap_6_TXMLMAP_OUT = new NameSpaceTool();
				int nb_line_tXMLMap_6_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_6_TXMLMAP_OUT xml_api_tXMLMap_6_TXMLMAP_OUT = new XML_API_tXMLMap_6_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_6_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				/**
				 * [tXMLMap_6_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tSOAP_7 begin ] start
				 */

				ok_Hash.put("tSOAP_7", false);
				start_Hash.put("tSOAP_7", System.currentTimeMillis());

				currentComponent = "tSOAP_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row34" + iterateId, 0,
								0);

					}
				}

				int tos_count_tSOAP_7 = 0;

				class BytesLimit65535_tSOAP_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSOAP_7().limitLog4jByte();
				org.talend.soap.SOAPUtil soapUtil_tSOAP_7 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_7 begin ] stop
				 */

				/**
				 * [tExtractXMLField_3 begin ] start
				 */

				ok_Hash.put("tExtractXMLField_3", false);
				start_Hash
						.put("tExtractXMLField_3", System.currentTimeMillis());

				currentComponent = "tExtractXMLField_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row33" + iterateId, 0,
								0);

					}
				}

				int tos_count_tExtractXMLField_3 = 0;

				class BytesLimit65535_tExtractXMLField_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractXMLField_3().limitLog4jByte();

				int nb_line_tExtractXMLField_3 = 0;

				class NameSpaceTool_tExtractXMLField_3 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					/**
					 * the regex for the xpath like that : case 1 :
					 * functionA(locationXPathExpression) case 2 :
					 * fn:functionA(locationXPathExpression) case 3 :
					 * functionA(functionB(locationXPathExpression)) case 4 :
					 * fn:functionA(fn:functionB(locationXPathExpression)) and
					 * like that.
					 */
					private java.util.regex.Pattern simpleFunctionPattern;
					private StringBuffer stringBuffer;
					private java.util.Map<String, String> resultCache;

					public String addDefaultNSPrefix(
							final String xpathExpression, String loopPath) {
						if (defualtNSPath.size() < 1) {
							return xpathExpression;
						}

						if (resultCache == null) {
							resultCache = new java.util.HashMap<String, String>();
						}

						String resultXpathExpression = resultCache
								.get(xpathExpression);
						if (resultXpathExpression != null) {
							return resultXpathExpression;
						}

						String locationPathExpression = xpathExpression;

						if (simpleFunctionPattern == null) {
							simpleFunctionPattern = java.util.regex.Pattern
									.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
						}

						boolean isSimpleFunctionXPath = simpleFunctionPattern
								.matcher(xpathExpression).matches();
						String tail = null;
						if (isSimpleFunctionXPath) {
							int start = xpathExpression.lastIndexOf('(');
							int end = xpathExpression.indexOf(')');
							if (start < end) {
								if (stringBuffer == null) {
									stringBuffer = new StringBuffer();
								}
								locationPathExpression = xpathExpression
										.substring(start + 1, end);
								stringBuffer.append(xpathExpression.substring(
										0, start + 1));
								tail = xpathExpression.substring(end);
							} else {
								isSimpleFunctionXPath = false;
							}
						}

						locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(
								locationPathExpression, loopPath);

						resultXpathExpression = locationPathExpression;

						if (isSimpleFunctionXPath) {
							stringBuffer.append(locationPathExpression);
							stringBuffer.append(tail);
							resultXpathExpression = stringBuffer.toString();
							stringBuffer.setLength(0);
						}

						resultCache.put(xpathExpression, resultXpathExpression);
						return resultXpathExpression;
					}

					private String addDefaultNSPrefixForLocationXPathExpression(
							String path, String loopPath) {
						String fullPath = loopPath;
						if (!path.equals(fullPath)) {
							for (String tmp : path.split("/")) {
								if (("..").equals(tmp)) {
									fullPath = fullPath.substring(0,
											fullPath.lastIndexOf("/"));
								} else {
									fullPath += "/" + tmp;
								}
							}
						}
						int[] indexs = new int[fullPath.split("/").length - 1];
						java.util.Arrays.fill(indexs, -1);
						int length = 0;
						for (int i = 0; i < defualtNSPath.size(); i++) {
							if (defualtNSPath.get(i).length() > length
									&& fullPath
											.startsWith(defualtNSPath.get(i))) {
								java.util.Arrays.fill(indexs, defualtNSPath
										.get(i).split("/").length - 2,
										indexs.length, i);
								length = defualtNSPath.get(i).length();
							}
						}

						StringBuilder newPath = new StringBuilder();
						String[] pathStrs = path.split("/");
						for (int i = 0; i < pathStrs.length; i++) {
							String tmp = pathStrs[i];
							if (newPath.length() > 0) {
								newPath.append("/");
							}
							if (tmp.length() > 0 && tmp.indexOf(":") == -1
									&& tmp.indexOf(".") == -1 /*
															 * &&
															 * tmp.indexOf("@")
															 * == -1
															 */) {
								int index = indexs[i + indexs.length
										- pathStrs.length];
								if (index >= 0) {
									// ==== add by wliu to support both filter
									// and functions==
									if (tmp.indexOf("[") > 0
											&& tmp.indexOf("]") > tmp
													.indexOf("[")) {// include
																	// filter
										String tmpStr = replaceElementWithNS(
												tmp, "pre" + index + ":");
										newPath.append(tmpStr);
									} else {
										if (tmp.indexOf("@") != -1
												|| tmp.indexOf("(") < tmp
														.indexOf(")")) { // include
																			// attribute
											newPath.append(tmp);
										} else {
											// ==add end=======
											newPath.append("pre").append(index)
													.append(":").append(tmp);
										}
									}
								} else {
									newPath.append(tmp);
								}
							} else {
								newPath.append(tmp);
							}
						}
						return newPath.toString();
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tExtractXMLField_3 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				XML_API_tExtractXMLField_3 xml_api_tExtractXMLField_3 = new XML_API_tExtractXMLField_3();

				/**
				 * [tExtractXMLField_3 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_13 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_13", false);
				start_Hash.put("tFileOutputExcel_13",
						System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_13";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("logxml2" + iterateId,
								0, 0);

					}
				}

				int tos_count_tFileOutputExcel_13 = 0;

				class BytesLimit65535_tFileOutputExcel_13 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_13().limitLog4jByte();

				int columnIndex_tFileOutputExcel_13 = 0;

				String fileName_tFileOutputExcel_13 = context.ExcelLogXML;
				int nb_line_tFileOutputExcel_13 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_13 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_13.setSheet("Creados");
				xlsxTool_tFileOutputExcel_13.setAppend(true, true);
				xlsxTool_tFileOutputExcel_13.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_13.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_13
						.prepareXlsxFile(fileName_tFileOutputExcel_13);

				xlsxTool_tFileOutputExcel_13.setFont("");

				/**
				 * [tFileOutputExcel_13 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row32" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_2 = 0;

				class BytesLimit65535_tMap_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_2().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
					String Fecha;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				logxml2Struct logxml2_tmp = new logxml2Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tReplace_3 begin ] start
				 */

				ok_Hash.put("tReplace_3", false);
				start_Hash.put("tReplace_3", System.currentTimeMillis());

				currentComponent = "tReplace_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row14" + iterateId, 0,
								0);

					}
				}

				int tos_count_tReplace_3 = 0;

				class BytesLimit65535_tReplace_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tReplace_3().limitLog4jByte();

				int nb_line_tReplace_3 = 0;

				/**
				 * [tReplace_3 begin ] stop
				 */

				/**
				 * [tFileInputXML_5 begin ] start
				 */

				ok_Hash.put("tFileInputXML_5", false);
				start_Hash.put("tFileInputXML_5", System.currentTimeMillis());

				currentComponent = "tFileInputXML_5";

				int tos_count_tFileInputXML_5 = 0;

				class BytesLimit65535_tFileInputXML_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputXML_5().limitLog4jByte();

				int nb_line_tFileInputXML_5 = 0;

				String os_tFileInputXML_5 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_5 = false;
				if (os_tFileInputXML_5.indexOf("windows") > -1
						|| os_tFileInputXML_5.indexOf("nt") > -1) {
					isWindows_tFileInputXML_5 = true;
				}
				class NameSpaceTool_tFileInputXML_5 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression,
							String basePath) {
						return util.addDefaultNSPrefix(relativeXpression,
								basePath);
					}

				}

				class XML_API_tFileInputXML_5 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_5 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_5 = null;
				try {
					filename_tFileInputXML_5 = context.XMLTempAgrupado;
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_5 != null
						&& filename_tFileInputXML_5 instanceof String
						&& filename_tFileInputXML_5.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_5) {
						filename_tFileInputXML_5 = filename_tFileInputXML_5
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_5 = true;
				org.dom4j.Document doc_tFileInputXML_5 = null;
				java.io.Closeable toClose_tFileInputXML_5 = null;
				try {
					if (filename_tFileInputXML_5 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_5 = (java.io.InputStream) filename_tFileInputXML_5;
						toClose_tFileInputXML_5 = inputStream_tFileInputXML_5;
						doc_tFileInputXML_5 = reader_tFileInputXML_5
								.read(inputStream_tFileInputXML_5);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_5 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_5)),
								"UTF-8");
						toClose_tFileInputXML_5 = unicodeReader_tFileInputXML_5;
						org.xml.sax.InputSource in_tFileInputXML_5 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_5);
						doc_tFileInputXML_5 = reader_tFileInputXML_5
								.read(in_tFileInputXML_5);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_5 = false;
				} finally {
					if (toClose_tFileInputXML_5 != null) {
						toClose_tFileInputXML_5.close();
					}
				}
				if (isValidFile_tFileInputXML_5) {
					NameSpaceTool_tFileInputXML_5 nsTool_tFileInputXML_5 = new NameSpaceTool_tFileInputXML_5();
					nsTool_tFileInputXML_5.countNSMap(doc_tFileInputXML_5
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_5 = nsTool_tFileInputXML_5.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_5 = doc_tFileInputXML_5
							.createXPath(nsTool_tFileInputXML_5
									.addDefaultNSPrefix("/"));
					x_tFileInputXML_5
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_5);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_5 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_5
							.selectNodes(doc_tFileInputXML_5);
					XML_API_tFileInputXML_5 xml_api_tFileInputXML_5 = new XML_API_tFileInputXML_5();
					String str_tFileInputXML_5 = "";
					org.dom4j.Node node_tFileInputXML_5 = null;

					// init all mapping xpaths
					java.util.Map<Integer, org.dom4j.XPath> xpaths_tFileInputXML_5 = new java.util.HashMap<Integer, org.dom4j.XPath>();
					class XPathUtil_tFileInputXML_5 {

						public void initXPaths_0(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_5 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("/",
											"/"));
							xpath_0.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(0, xpath_0);

						}

						public void initXPaths(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_5 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							initXPaths_0(xpaths, nsTool, xmlNameSpaceMap);

						}
					}
					XPathUtil_tFileInputXML_5 xPathUtil_tFileInputXML_5 = new XPathUtil_tFileInputXML_5();
					xPathUtil_tFileInputXML_5.initXPaths(
							xpaths_tFileInputXML_5, nsTool_tFileInputXML_5,
							xmlNameSpaceMap_tFileInputXML_5);
					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_5 : nodeList_tFileInputXML_5) {
						nb_line_tFileInputXML_5++;
						row14 = null;
						boolean whetherReject_tFileInputXML_5 = false;
						row14 = new row14Struct();
						try {
							Object obj0_tFileInputXML_5 = xpaths_tFileInputXML_5
									.get(0).evaluate(temp_tFileInputXML_5);
							if (obj0_tFileInputXML_5 == null) {
								node_tFileInputXML_5 = null;
								str_tFileInputXML_5 = null;

							} else if (obj0_tFileInputXML_5 instanceof org.dom4j.Node) {
								node_tFileInputXML_5 = (org.dom4j.Node) obj0_tFileInputXML_5;
								str_tFileInputXML_5 = node_tFileInputXML_5
										.asXML();
							} else if (obj0_tFileInputXML_5 instanceof String
									|| obj0_tFileInputXML_5 instanceof Number) {
								node_tFileInputXML_5 = temp_tFileInputXML_5;
								str_tFileInputXML_5 = String
										.valueOf(obj0_tFileInputXML_5);
							} else if (obj0_tFileInputXML_5 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_5;
								node_tFileInputXML_5 = nodes_tFileInputXML_5
										.size() > 0 ? nodes_tFileInputXML_5
										.get(0) : null;
								str_tFileInputXML_5 = node_tFileInputXML_5 == null ? null
										: node_tFileInputXML_5.asXML();
							}
							row14.createCases = str_tFileInputXML_5;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_5 = true;
							System.err.println(e.getMessage());
							row14 = null;
						}

						/**
						 * [tFileInputXML_5 begin ] stop
						 */

						/**
						 * [tFileInputXML_5 main ] start
						 */

						currentComponent = "tFileInputXML_5";

						tos_count_tFileInputXML_5++;

						/**
						 * [tFileInputXML_5 main ] stop
						 */
						// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tReplace_3 main ] start
							 */

							currentComponent = "tReplace_3";

							// row14
							// row14

							if (execStat) {
								runStat.updateStatOnConnection("row14"
										+ iterateId, 1, 1);
							}

							String searchStr_tReplace_3_1 = "<Entities>" + "";
							row14.createCases = StringUtils
									.replaceAllStrictly(
											row14.createCases,
											searchStr_tReplace_3_1,
											"<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'     xmlns:tem='http://tempuri.org/'>    <soapenv:Header></soapenv:Header>    <soapenv:Body>        <tem:createCases>            <tem:casesInfo>                <BizAgiWSParam>                    <domain>domain</domain>                    <userName>admon</userName>                    <Cases>"
													+ "", false, false);
							String searchStr_tReplace_3_2 = "</Entities>" + "";
							row14.createCases = StringUtils
									.replaceAllStrictly(
											row14.createCases,
											searchStr_tReplace_3_2,
											"</Cases>                </BizAgiWSParam>            </tem:casesInfo>        </tem:createCases>    </soapenv:Body></soapenv:Envelope>"
													+ "", false, false);
							String searchStr_tReplace_3_3 = "<TablaProceso>"
									+ "";
							row14.createCases = StringUtils
									.replaceAllStrictly(
											row14.createCases,
											searchStr_tReplace_3_3,
											"<Case>                            <Process>NombreProceso</Process>                            <Entities>                                <TablaProceso>"
													+ "", false, false);
							String searchStr_tReplace_3_4 = "</TablaProceso>"
									+ "";
							row14.createCases = StringUtils
									.replaceAllStrictly(
											row14.createCases,
											searchStr_tReplace_3_4,
											"</TablaProceso>                            </Entities>                        </Case>"
													+ "", false, false);
							String searchStr_tReplace_3_5 = "TablaProceso" + "";
							row14.createCases = StringUtils.replaceAllStrictly(
									row14.createCases, searchStr_tReplace_3_5,
									"M_GestiondeMuestrasEM" + "", false, false);
							String searchStr_tReplace_3_6 = "NombreProceso"
									+ "";
							row14.createCases = StringUtils.replaceAllStrictly(
									row14.createCases, searchStr_tReplace_3_6,
									"PubGestionarMuestraEM" + "", false, false);
							row32.createCases = row14.createCases;

							nb_line_tReplace_3++;

							tos_count_tReplace_3++;

							/**
							 * [tReplace_3 main ] stop
							 */

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							// row32
							// row32

							if (execStat) {
								runStat.updateStatOnConnection("row32"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;
								Var.Fecha = TalendDate
										.getDate("dd/MM/yyyy hh:mm:ss aa");// ###############################
								// ###############################
								// # Output tables

								logxml2 = null;

								// # Output table : 'logxml2'
								logxml2_tmp.XMLEnviado = row32.createCases;
								logxml2_tmp.Fecha = Var.Fecha;
								logxml2 = logxml2_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "logxml2"
							if (logxml2 != null) {

								/**
								 * [tFileOutputExcel_13 main ] start
								 */

								currentComponent = "tFileOutputExcel_13";

								// logxml2
								// logxml2

								if (execStat) {
									runStat.updateStatOnConnection("logxml2"
											+ iterateId, 1, 1);
								}

								xlsxTool_tFileOutputExcel_13.addRow();

								if (logxml2.XMLEnviado != null) {

									xlsxTool_tFileOutputExcel_13
											.addCellValue(String
													.valueOf(logxml2.XMLEnviado));
								} else {
									xlsxTool_tFileOutputExcel_13
											.addCellNullValue();
								}

								if (logxml2.Fecha != null) {

									xlsxTool_tFileOutputExcel_13
											.addCellValue(String
													.valueOf(logxml2.Fecha));
								} else {
									xlsxTool_tFileOutputExcel_13
											.addCellNullValue();
								}

								nb_line_tFileOutputExcel_13++;

								row33 = logxml2;

								tos_count_tFileOutputExcel_13++;

								/**
								 * [tFileOutputExcel_13 main ] stop
								 */

								/**
								 * [tExtractXMLField_3 main ] start
								 */

								currentComponent = "tExtractXMLField_3";

								// row33
								// row33

								if (execStat) {
									runStat.updateStatOnConnection("row33"
											+ iterateId, 1, 1);
								}

								String xmlStr_tExtractXMLField_3 = null;
								routines.system.Document xmlDocument_tExtractXMLField_3 = null;
								if (row33.XMLEnviado != null) {
									xmlStr_tExtractXMLField_3 = row33.XMLEnviado;
								}
								if (xmlStr_tExtractXMLField_3 != null) {// C_01
									row34 = null;
									NameSpaceTool_tExtractXMLField_3 nsTool_tExtractXMLField_3 = new NameSpaceTool_tExtractXMLField_3();
									org.dom4j.io.SAXReader reader_tExtractXMLField_3 = new org.dom4j.io.SAXReader();

									org.dom4j.Document doc_tExtractXMLField_3 = null;
									java.util.HashMap xmlNameSpaceMap_tExtractXMLField_3 = null;
									org.dom4j.XPath x_tExtractXMLField_3 = null;
									java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractXMLField_3 = null;
									String loopQuery_tExtractXMLField_3 = "/";

									boolean isStructError_tExtractXMLField_3 = true;

									try {

										doc_tExtractXMLField_3 = reader_tExtractXMLField_3
												.read(new java.io.StringReader(
														xmlStr_tExtractXMLField_3));

										nsTool_tExtractXMLField_3
												.countNSMap(doc_tExtractXMLField_3
														.getRootElement());
										xmlNameSpaceMap_tExtractXMLField_3 = nsTool_tExtractXMLField_3.xmlNameSpaceMap;

										x_tExtractXMLField_3 = doc_tExtractXMLField_3
												.createXPath(nsTool_tExtractXMLField_3
														.addDefaultNSPrefix(
																loopQuery_tExtractXMLField_3,
																loopQuery_tExtractXMLField_3));

										x_tExtractXMLField_3
												.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_3);

										nodeList_tExtractXMLField_3 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractXMLField_3
												.selectNodes(doc_tExtractXMLField_3);

										isStructError_tExtractXMLField_3 = false;

									} catch (java.lang.Exception ex_tExtractXMLField_3) {
										System.err
												.println(ex_tExtractXMLField_3
														.getMessage());
									}

									org.dom4j.Node node_tExtractXMLField_3 = null;
									String str_tExtractXMLField_3 = "";
									boolean resultIsNode_tExtractXMLField_3 = true;
									for (int i_tExtractXMLField_3 = 0; isStructError_tExtractXMLField_3
											|| (nodeList_tExtractXMLField_3 != null && i_tExtractXMLField_3 < nodeList_tExtractXMLField_3
													.size()); i_tExtractXMLField_3++) {

										if (!isStructError_tExtractXMLField_3) {
											row34 = null;
											row34 = new row34Struct();

											org.dom4j.tree.AbstractNode temp_tExtractXMLField_3 = nodeList_tExtractXMLField_3
													.get(i_tExtractXMLField_3);

											nb_line_tExtractXMLField_3++;
											try {
												org.dom4j.XPath xTmp0_tExtractXMLField_3 = temp_tExtractXMLField_3
														.createXPath(nsTool_tExtractXMLField_3
																.addDefaultNSPrefix(
																		"/",
																		loopQuery_tExtractXMLField_3));
												xTmp0_tExtractXMLField_3
														.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_3);

												Object obj0_tExtractXMLField_3 = xTmp0_tExtractXMLField_3
														.evaluate(temp_tExtractXMLField_3);
												if (obj0_tExtractXMLField_3 instanceof String
														|| obj0_tExtractXMLField_3 instanceof Number) {
													resultIsNode_tExtractXMLField_3 = false;
													str_tExtractXMLField_3 = String
															.valueOf(obj0_tExtractXMLField_3);
												} else {
													resultIsNode_tExtractXMLField_3 = true;
													node_tExtractXMLField_3 = xTmp0_tExtractXMLField_3
															.selectSingleNode(temp_tExtractXMLField_3);
													str_tExtractXMLField_3 = node_tExtractXMLField_3 == null ? null
															: node_tExtractXMLField_3
																	.asXML();
												}
												row34.createCases = ParserUtils
														.parseTo_Document(str_tExtractXMLField_3);
											} catch (java.lang.Exception ex_tExtractXMLField_3) {
												System.err
														.println(ex_tExtractXMLField_3
																.getMessage());
												row34 = null;
											}
										}

										isStructError_tExtractXMLField_3 = false;

										globalMap.put(
												"tExtractXMLField_3_NB_LINE",
												nb_line_tExtractXMLField_3);

										tos_count_tExtractXMLField_3++;

										/**
										 * [tExtractXMLField_3 main ] stop
										 */
										// Start of branch "row34"
										if (row34 != null) {

											/**
											 * [tSOAP_7 main ] start
											 */

											currentComponent = "tSOAP_7";

											// row34
											// row34

											if (execStat) {
												runStat.updateStatOnConnection(
														"row34" + iterateId, 1,
														1);
											}

											String document_tSOAP_7 = soapUtil_tSOAP_7
													.extractContentAsDocument(
															org.talend.soap.SOAPUtil.SOAP11,
															"http://"
																	+ context.BIZhost
																	+ "/"
																	+ context.BIZprocesoDD
																	+ "/webservices/workflowenginesoa.asmx",
															"http://tempuri.org/createCases",
															row34.createCases
																	.toString());

											// for output

											row35 = new row35Struct();

											row35.Soap = ParserUtils
													.parseTo_Document(document_tSOAP_7);

											tos_count_tSOAP_7++;

											/**
											 * [tSOAP_7 main ] stop
											 */

											/**
											 * [tXMLMap_6_TXMLMAP_OUT main ]
											 * start
											 */

											currentVirtualComponent = "tXMLMap_6";

											currentComponent = "tXMLMap_6_TXMLMAP_OUT";

											// row35
											// row35

											if (execStat) {
												runStat.updateStatOnConnection(
														"row35" + iterateId, 1,
														1);
											}

											boolean rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
											boolean rejectedDocInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
											boolean mainRowRejected_tXMLMap_6_TXMLMAP_OUT = false;
											boolean isMatchDocRowtXMLMap_6_TXMLMAP_OUT = false;

											// init document to flat tool
											routines.system.DocumentToFlat docToFlat_tXMLMap_6_TXMLMAP_OUT = new routines.system.DocumentToFlat();
											docToFlat_tXMLMap_6_TXMLMAP_OUT
													.setOriginalLoop("/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process");
											docToFlat_tXMLMap_6_TXMLMAP_OUT
													.setIsOptional(false);
											if (row35.Soap == null
													|| row35.Soap.getDocument() == null) {
												throw new RuntimeException(
														"row35.Soap can't be empty");
											}
											org.dom4j.Document doc_tXMLMap_6_TXMLMAP_OUT = row35.Soap
													.getDocument();
											docToFlat_tXMLMap_6_TXMLMAP_OUT
													.setDoc(doc_tXMLMap_6_TXMLMAP_OUT);
											docToFlat_tXMLMap_6_TXMLMAP_OUT
													.setDefineNS(false);
											docToFlat_tXMLMap_6_TXMLMAP_OUT
													.setNamespaceTool(nsTool_tXMLMap_6_TXMLMAP_OUT);

											// old version, find NS from doc
											nsTool_tXMLMap_6_TXMLMAP_OUT
													.countNSMap(doc_tXMLMap_6_TXMLMAP_OUT
															.getRootElement());
											java.util.HashMap<String, String> xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT = nsTool_tXMLMap_6_TXMLMAP_OUT.xmlNameSpaceMap;

											docToFlat_tXMLMap_6_TXMLMAP_OUT
													.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT);

											String[] absolutePathMappings_tXMLMap_6_TXMLMAP_OUT = new String[6];
											String[] relativePathMappings_tXMLMap_6_TXMLMAP_OUT = new String[6];

											absolutePathMappings_tXMLMap_6_TXMLMAP_OUT[0] = "row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassDisplayName";
											relativePathMappings_tXMLMap_6_TXMLMAP_OUT[0] = "processWorkflowClass/workflowClassDisplayName";

											absolutePathMappings_tXMLMap_6_TXMLMAP_OUT[1] = "row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processRadNumber";
											relativePathMappings_tXMLMap_6_TXMLMAP_OUT[1] = "processRadNumber";

											absolutePathMappings_tXMLMap_6_TXMLMAP_OUT[2] = "row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorMessage";
											relativePathMappings_tXMLMap_6_TXMLMAP_OUT[2] = "processError/errorMessage";

											absolutePathMappings_tXMLMap_6_TXMLMAP_OUT[3] = "row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId";
											relativePathMappings_tXMLMap_6_TXMLMAP_OUT[3] = "processId";

											absolutePathMappings_tXMLMap_6_TXMLMAP_OUT[4] = "row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorCode";
											relativePathMappings_tXMLMap_6_TXMLMAP_OUT[4] = "processError/errorCode";

											absolutePathMappings_tXMLMap_6_TXMLMAP_OUT[5] = "row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassCreationDate";
											relativePathMappings_tXMLMap_6_TXMLMAP_OUT[5] = "processWorkflowClass/workflowClassCreationDate";

											docToFlat_tXMLMap_6_TXMLMAP_OUT
													.setAbsolutePathMappings(absolutePathMappings_tXMLMap_6_TXMLMAP_OUT);
											docToFlat_tXMLMap_6_TXMLMAP_OUT
													.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_6_TXMLMAP_OUT);
											// generate document to flat data
											docToFlat_tXMLMap_6_TXMLMAP_OUT
													.flat();
											// get flat data
											java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_6_TXMLMAP_OUT = docToFlat_tXMLMap_6_TXMLMAP_OUT
													.getResultSet();

											for (java.util.Map<String, String> oneRow_tXMLMap_6_TXMLMAP_OUT : resultSet_tXMLMap_6_TXMLMAP_OUT) { // G_TXM_M_001
												nb_line_tXMLMap_6_TXMLMAP_OUT++;
												rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
												rejectedDocInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
												mainRowRejected_tXMLMap_6_TXMLMAP_OUT = false;
												isMatchDocRowtXMLMap_6_TXMLMAP_OUT = false;

												treeNodeAPI_tXMLMap_6_TXMLMAP_OUT
														.clear();
												for (java.util.Map.Entry<String, String> entry_tXMLMap_6_TXMLMAP_OUT : oneRow_tXMLMap_6_TXMLMAP_OUT
														.entrySet()) {
													treeNodeAPI_tXMLMap_6_TXMLMAP_OUT
															.put(entry_tXMLMap_6_TXMLMAP_OUT
																	.getKey(),
																	entry_tXMLMap_6_TXMLMAP_OUT
																			.getValue());
												}

												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tXMLMap_6_TXMLMAP_OUT__Struct Var = Var__tXMLMap_6_TXMLMAP_OUT;

													Var.creacionCorrecta = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT
															.get_Integer("row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId") != null
															&& treeNodeAPI_tXMLMap_6_TXMLMAP_OUT
																	.get_Integer("row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId") != 0;
													// ###############################
													// # Output tables

													creado2 = null;
													fallidos2 = null;

													boolean rejected_tXMLMap_6_TXMLMAP_OUT = true;

													// # Output table :
													// 'creado2'
													// # Filter conditions
													if (

													Var.creacionCorrecta

													) {
														rejected_tXMLMap_6_TXMLMAP_OUT = false;

														creado2_tmp = new creado2Struct();
														creado2_tmp.IDCaso = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT
																.get_Integer("row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId");
														creado2_tmp.RadNumber = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT
																.get_Integer("row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processRadNumber");
														creado2_tmp.NombreProceso = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT
																.get_String("row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassDisplayName");
														creado2_tmp.Fecha = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT
																.get_String("row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassCreationDate");
														allOutsForAggregate_tXMLMap_6
																.add(creado2_tmp);

													} // closing filter/reject
														// ###### START REJECTS
														// #####

													// # Output reject table :
													// 'fallidos2'
													// # Filter conditions
													if (rejected_tXMLMap_6_TXMLMAP_OUT) {

														fallidos2_tmp = new fallidos2Struct();
														fallidos2_tmp.CodigoError = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT
																.get_String("row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorCode");
														fallidos2_tmp.MensajeError = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT
																.get_String("row35.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorMessage");
														allOutsForAggregate_tXMLMap_6
																.add(fallidos2_tmp);

													} // closing filter/reject
														// ###############################

												} // end of Var scope

												rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;

											}// G_TXM_M_001 close

											tos_count_tXMLMap_6_TXMLMAP_OUT++;

											/**
											 * [tXMLMap_6_TXMLMAP_OUT main ]
											 * stop
											 */

										} // End of branch "row34"

										// end for
									}

								} // C_01

							} // End of branch "logxml2"

						} // End of branch "row14"

						/**
						 * [tFileInputXML_5 end ] start
						 */

						currentComponent = "tFileInputXML_5";

					}
				}
				globalMap.put("tFileInputXML_5_NB_LINE",
						nb_line_tFileInputXML_5);

				ok_Hash.put("tFileInputXML_5", true);
				end_Hash.put("tFileInputXML_5", System.currentTimeMillis());

				/**
				 * [tFileInputXML_5 end ] stop
				 */

				/**
				 * [tReplace_3 end ] start
				 */

				currentComponent = "tReplace_3";

				globalMap.put("tReplace_3_NB_LINE", nb_line_tReplace_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row14" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tReplace_3", true);
				end_Hash.put("tReplace_3", System.currentTimeMillis());

				/**
				 * [tReplace_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row32" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputExcel_13 end ] start
				 */

				currentComponent = "tFileOutputExcel_13";

				xlsxTool_tFileOutputExcel_13.writeExcel(
						fileName_tFileOutputExcel_13, true);

				globalMap.put("tFileOutputExcel_13_NB_LINE",
						nb_line_tFileOutputExcel_13);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("logxml2" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_13", true);
				end_Hash.put("tFileOutputExcel_13", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_13 end ] stop
				 */

				/**
				 * [tExtractXMLField_3 end ] start
				 */

				currentComponent = "tExtractXMLField_3";

				globalMap.put("tExtractXMLField_3_NB_LINE",
						nb_line_tExtractXMLField_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row33" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tExtractXMLField_3", true);
				end_Hash.put("tExtractXMLField_3", System.currentTimeMillis());

				/**
				 * [tExtractXMLField_3 end ] stop
				 */

				/**
				 * [tSOAP_7 end ] start
				 */

				currentComponent = "tSOAP_7";

				soapUtil_tSOAP_7.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row34" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tSOAP_7", true);
				end_Hash.put("tSOAP_7", System.currentTimeMillis());

				/**
				 * [tSOAP_7 end ] stop
				 */

				/**
				 * [tXMLMap_6_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_6";

				currentComponent = "tXMLMap_6_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row35" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tXMLMap_6_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_6_TXMLMAP_OUT",
						System.currentTimeMillis());

				/**
				 * [tXMLMap_6_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputExcel_4 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_4", false);
				start_Hash
						.put("tFileOutputExcel_4", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row41" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_4 = 0;

				class BytesLimit65535_tFileOutputExcel_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_4().limitLog4jByte();

				int columnIndex_tFileOutputExcel_4 = 0;

				String fileName_tFileOutputExcel_4 = context.ExcelLogCreados;
				int nb_line_tFileOutputExcel_4 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_4 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_4.setSheet("Creados");
				xlsxTool_tFileOutputExcel_4.setAppend(true, true);
				xlsxTool_tFileOutputExcel_4.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_4.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_4
						.prepareXlsxFile(fileName_tFileOutputExcel_4);

				xlsxTool_tFileOutputExcel_4.setFont("");

				/**
				 * [tFileOutputExcel_4 begin ] stop
				 */

				/**
				 * [tLogRow_14 begin ] start
				 */

				ok_Hash.put("tLogRow_14", false);
				start_Hash.put("tLogRow_14", System.currentTimeMillis());

				currentComponent = "tLogRow_14";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("creado2" + iterateId,
								0, 0);

					}
				}

				int tos_count_tLogRow_14 = 0;

				class BytesLimit65535_tLogRow_14 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_14().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_14 = "|";
				java.io.PrintStream consoleOut_tLogRow_14 = null;

				StringBuilder sbHeader_tLogRow_14 = new StringBuilder();

				sbHeader_tLogRow_14.append("IDCaso");

				sbHeader_tLogRow_14.append("\t");

				sbHeader_tLogRow_14.append("RadNumber");

				sbHeader_tLogRow_14.append("\t");

				sbHeader_tLogRow_14.append("NombreProceso");

				sbHeader_tLogRow_14.append("\t");

				sbHeader_tLogRow_14.append("Fecha");

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_14 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_14);
				}
				consoleOut_tLogRow_14.println(sbHeader_tLogRow_14.toString());
				consoleOut_tLogRow_14.flush();

				StringBuilder strBuffer_tLogRow_14 = null;
				int nb_line_tLogRow_14 = 0;
				// /////////////////////

				/**
				 * [tLogRow_14 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_5 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_5", false);
				start_Hash
						.put("tFileOutputExcel_5", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row42" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_5 = 0;

				class BytesLimit65535_tFileOutputExcel_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_5().limitLog4jByte();

				int columnIndex_tFileOutputExcel_5 = 0;

				String fileName_tFileOutputExcel_5 = context.ExcelLogFallidos;
				int nb_line_tFileOutputExcel_5 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_5 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_5.setSheet("Fallidos");
				xlsxTool_tFileOutputExcel_5.setAppend(true, true);
				xlsxTool_tFileOutputExcel_5.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_5.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_5
						.prepareXlsxFile(fileName_tFileOutputExcel_5);

				xlsxTool_tFileOutputExcel_5.setFont("");

				/**
				 * [tFileOutputExcel_5 begin ] stop
				 */

				/**
				 * [tLogRow_15 begin ] start
				 */

				ok_Hash.put("tLogRow_15", false);
				start_Hash.put("tLogRow_15", System.currentTimeMillis());

				currentComponent = "tLogRow_15";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("fallidos2" + iterateId,
								0, 0);

					}
				}

				int tos_count_tLogRow_15 = 0;

				class BytesLimit65535_tLogRow_15 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_15().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_15 = "|";
				java.io.PrintStream consoleOut_tLogRow_15 = null;

				StringBuilder sbHeader_tLogRow_15 = new StringBuilder();

				sbHeader_tLogRow_15.append("CodigoError");

				sbHeader_tLogRow_15.append("\t");

				sbHeader_tLogRow_15.append("MensajeError");

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_15 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_15 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_15);
				}
				consoleOut_tLogRow_15.println(sbHeader_tLogRow_15.toString());
				consoleOut_tLogRow_15.flush();

				StringBuilder strBuffer_tLogRow_15 = null;
				int nb_line_tLogRow_15 = 0;
				// /////////////////////

				/**
				 * [tLogRow_15 begin ] stop
				 */

				/**
				 * [tXMLMap_6_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_6_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_6_TXMLMAP_IN",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_6";

				currentComponent = "tXMLMap_6_TXMLMAP_IN";

				int tos_count_tXMLMap_6_TXMLMAP_IN = 0;

				class BytesLimit65535_tXMLMap_6_TXMLMAP_IN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_6_TXMLMAP_IN().limitLog4jByte();
				java.util.List<Object> outs_tXMLMap_6 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_6");
				for (Object row_out_tXMLMap_6_TXMLMAP_IN : outs_tXMLMap_6) {// TD512

					/**
					 * [tXMLMap_6_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_6_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_6";

					currentComponent = "tXMLMap_6_TXMLMAP_IN";

					creado2 = null;
					if (row_out_tXMLMap_6_TXMLMAP_IN != null
							&& row_out_tXMLMap_6_TXMLMAP_IN instanceof creado2Struct) {
						creado2 = (creado2Struct) row_out_tXMLMap_6_TXMLMAP_IN;
					}
					fallidos2 = null;
					if (row_out_tXMLMap_6_TXMLMAP_IN != null
							&& row_out_tXMLMap_6_TXMLMAP_IN instanceof fallidos2Struct) {
						fallidos2 = (fallidos2Struct) row_out_tXMLMap_6_TXMLMAP_IN;
					}

					tos_count_tXMLMap_6_TXMLMAP_IN++;

					/**
					 * [tXMLMap_6_TXMLMAP_IN main ] stop
					 */
					// Start of branch "creado2"
					if (creado2 != null) {

						/**
						 * [tLogRow_14 main ] start
						 */

						currentComponent = "tLogRow_14";

						// creado2
						// creado2

						if (execStat) {
							runStat.updateStatOnConnection("creado2"
									+ iterateId, 1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_14 = new StringBuilder();

						if (creado2.IDCaso != null) { //

							strBuffer_tLogRow_14.append(String
									.valueOf(creado2.IDCaso));

						} //

						strBuffer_tLogRow_14.append("|");

						if (creado2.RadNumber != null) { //

							strBuffer_tLogRow_14.append(String
									.valueOf(creado2.RadNumber));

						} //

						strBuffer_tLogRow_14.append("|");

						if (creado2.NombreProceso != null) { //

							strBuffer_tLogRow_14.append(String
									.valueOf(creado2.NombreProceso));

						} //

						strBuffer_tLogRow_14.append("|");

						if (creado2.Fecha != null) { //

							strBuffer_tLogRow_14.append(String
									.valueOf(creado2.Fecha));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_14 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_14);
						}
						consoleOut_tLogRow_14.println(strBuffer_tLogRow_14
								.toString());
						consoleOut_tLogRow_14.flush();
						nb_line_tLogRow_14++;
						// ////

						// ////

						// /////////////////////

						row41 = creado2;

						tos_count_tLogRow_14++;

						/**
						 * [tLogRow_14 main ] stop
						 */

						/**
						 * [tFileOutputExcel_4 main ] start
						 */

						currentComponent = "tFileOutputExcel_4";

						// row41
						// row41

						if (execStat) {
							runStat.updateStatOnConnection("row41" + iterateId,
									1, 1);
						}

						xlsxTool_tFileOutputExcel_4.addRow();

						if (row41.IDCaso != null) {

							xlsxTool_tFileOutputExcel_4.addCellValue(Double
									.parseDouble(String.valueOf(row41.IDCaso)));
						} else {
							xlsxTool_tFileOutputExcel_4.addCellNullValue();
						}

						if (row41.RadNumber != null) {

							xlsxTool_tFileOutputExcel_4.addCellValue(Double
									.parseDouble(String
											.valueOf(row41.RadNumber)));
						} else {
							xlsxTool_tFileOutputExcel_4.addCellNullValue();
						}

						if (row41.NombreProceso != null) {

							xlsxTool_tFileOutputExcel_4.addCellValue(String
									.valueOf(row41.NombreProceso));
						} else {
							xlsxTool_tFileOutputExcel_4.addCellNullValue();
						}

						if (row41.Fecha != null) {

							xlsxTool_tFileOutputExcel_4.addCellValue(String
									.valueOf(row41.Fecha));
						} else {
							xlsxTool_tFileOutputExcel_4.addCellNullValue();
						}

						nb_line_tFileOutputExcel_4++;

						tos_count_tFileOutputExcel_4++;

						/**
						 * [tFileOutputExcel_4 main ] stop
						 */

					} // End of branch "creado2"

					// Start of branch "fallidos2"
					if (fallidos2 != null) {

						/**
						 * [tLogRow_15 main ] start
						 */

						currentComponent = "tLogRow_15";

						// fallidos2
						// fallidos2

						if (execStat) {
							runStat.updateStatOnConnection("fallidos2"
									+ iterateId, 1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_15 = new StringBuilder();

						if (fallidos2.CodigoError != null) { //

							strBuffer_tLogRow_15.append(String
									.valueOf(fallidos2.CodigoError));

						} //

						strBuffer_tLogRow_15.append("|");

						if (fallidos2.MensajeError != null) { //

							strBuffer_tLogRow_15.append(String
									.valueOf(fallidos2.MensajeError));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_15 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_15 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_15);
						}
						consoleOut_tLogRow_15.println(strBuffer_tLogRow_15
								.toString());
						consoleOut_tLogRow_15.flush();
						nb_line_tLogRow_15++;
						// ////

						// ////

						// /////////////////////

						row42 = fallidos2;

						tos_count_tLogRow_15++;

						/**
						 * [tLogRow_15 main ] stop
						 */

						/**
						 * [tFileOutputExcel_5 main ] start
						 */

						currentComponent = "tFileOutputExcel_5";

						// row42
						// row42

						if (execStat) {
							runStat.updateStatOnConnection("row42" + iterateId,
									1, 1);
						}

						xlsxTool_tFileOutputExcel_5.addRow();

						if (row42.CodigoError != null) {

							xlsxTool_tFileOutputExcel_5.addCellValue(String
									.valueOf(row42.CodigoError));
						} else {
							xlsxTool_tFileOutputExcel_5.addCellNullValue();
						}

						if (row42.MensajeError != null) {

							xlsxTool_tFileOutputExcel_5.addCellValue(String
									.valueOf(row42.MensajeError));
						} else {
							xlsxTool_tFileOutputExcel_5.addCellNullValue();
						}

						nb_line_tFileOutputExcel_5++;

						tos_count_tFileOutputExcel_5++;

						/**
						 * [tFileOutputExcel_5 main ] stop
						 */

					} // End of branch "fallidos2"

					/**
					 * [tXMLMap_6_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_6";

					currentComponent = "tXMLMap_6_TXMLMAP_IN";

				}// TD512

				ok_Hash.put("tXMLMap_6_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_6_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_6_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tLogRow_14 end ] start
				 */

				currentComponent = "tLogRow_14";

				// ////
				// ////
				globalMap.put("tLogRow_14_NB_LINE", nb_line_tLogRow_14);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("creado2" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tLogRow_14", true);
				end_Hash.put("tLogRow_14", System.currentTimeMillis());

				/**
				 * [tLogRow_14 end ] stop
				 */

				/**
				 * [tFileOutputExcel_4 end ] start
				 */

				currentComponent = "tFileOutputExcel_4";

				xlsxTool_tFileOutputExcel_4.writeExcel(
						fileName_tFileOutputExcel_4, true);

				globalMap.put("tFileOutputExcel_4_NB_LINE",
						nb_line_tFileOutputExcel_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row41" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_4", true);
				end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_4 end ] stop
				 */

				/**
				 * [tLogRow_15 end ] start
				 */

				currentComponent = "tLogRow_15";

				// ////
				// ////
				globalMap.put("tLogRow_15_NB_LINE", nb_line_tLogRow_15);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("fallidos2" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tLogRow_15", true);
				end_Hash.put("tLogRow_15", System.currentTimeMillis());

				/**
				 * [tLogRow_15 end ] stop
				 */

				/**
				 * [tFileOutputExcel_5 end ] start
				 */

				currentComponent = "tFileOutputExcel_5";

				xlsxTool_tFileOutputExcel_5.writeExcel(
						fileName_tFileOutputExcel_5, true);

				globalMap.put("tFileOutputExcel_5_NB_LINE",
						nb_line_tFileOutputExcel_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row42" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_5", true);
				end_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_5 finally ] start
				 */

				currentComponent = "tFileInputXML_5";

				/**
				 * [tFileInputXML_5 finally ] stop
				 */

				/**
				 * [tReplace_3 finally ] start
				 */

				currentComponent = "tReplace_3";

				/**
				 * [tReplace_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_13 finally ] start
				 */

				currentComponent = "tFileOutputExcel_13";

				/**
				 * [tFileOutputExcel_13 finally ] stop
				 */

				/**
				 * [tExtractXMLField_3 finally ] start
				 */

				currentComponent = "tExtractXMLField_3";

				/**
				 * [tExtractXMLField_3 finally ] stop
				 */

				/**
				 * [tSOAP_7 finally ] start
				 */

				currentComponent = "tSOAP_7";

				/**
				 * [tSOAP_7 finally ] stop
				 */

				/**
				 * [tXMLMap_6_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_6";

				currentComponent = "tXMLMap_6_TXMLMAP_OUT";

				/**
				 * [tXMLMap_6_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_6_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_6";

				currentComponent = "tXMLMap_6_TXMLMAP_IN";

				/**
				 * [tXMLMap_6_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tLogRow_14 finally ] start
				 */

				currentComponent = "tLogRow_14";

				/**
				 * [tLogRow_14 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_4 finally ] start
				 */

				currentComponent = "tFileOutputExcel_4";

				/**
				 * [tFileOutputExcel_4 finally ] stop
				 */

				/**
				 * [tLogRow_15 finally ] start
				 */

				currentComponent = "tLogRow_15";

				/**
				 * [tLogRow_15 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_5 finally ] start
				 */

				currentComponent = "tFileOutputExcel_5";

				/**
				 * [tFileOutputExcel_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_5_SUBPROCESS_STATE", 1);
	}

	public static class row44Struct implements
			routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String CodigoError;

		public String getCodigoError() {
			return this.CodigoError;
		}

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.CodigoError = readString(dis);

					this.MensajeError = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CodigoError, dos);

				// String

				writeString(this.MensajeError, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CodigoError=" + CodigoError);
			sb.append(",MensajeError=" + MensajeError);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row43Struct implements
			routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public Integer IDCaso;

		public Integer getIDCaso() {
			return this.IDCaso;
		}

		public Integer RadNumber;

		public Integer getRadNumber() {
			return this.RadNumber;
		}

		public String NombreProceso;

		public String getNombreProceso() {
			return this.NombreProceso;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.IDCaso = readInteger(dis);

					this.RadNumber = readInteger(dis);

					this.NombreProceso = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCaso, dos);

				// Integer

				writeInteger(this.RadNumber, dos);

				// String

				writeString(this.NombreProceso, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCaso=" + String.valueOf(IDCaso));
			sb.append(",RadNumber=" + String.valueOf(RadNumber));
			sb.append(",NombreProceso=" + NombreProceso);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class creados3Struct implements
			routines.system.IPersistableRow<creados3Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public Integer IDCaso;

		public Integer getIDCaso() {
			return this.IDCaso;
		}

		public Integer RadNumber;

		public Integer getRadNumber() {
			return this.RadNumber;
		}

		public String NombreProceso;

		public String getNombreProceso() {
			return this.NombreProceso;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.IDCaso = readInteger(dis);

					this.RadNumber = readInteger(dis);

					this.NombreProceso = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCaso, dos);

				// Integer

				writeInteger(this.RadNumber, dos);

				// String

				writeString(this.NombreProceso, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCaso=" + String.valueOf(IDCaso));
			sb.append(",RadNumber=" + String.valueOf(RadNumber));
			sb.append(",NombreProceso=" + NombreProceso);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(creados3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fallidos3Struct implements
			routines.system.IPersistableRow<fallidos3Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String CodigoError;

		public String getCodigoError() {
			return this.CodigoError;
		}

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.CodigoError = readString(dis);

					this.MensajeError = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CodigoError, dos);

				// String

				writeString(this.MensajeError, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CodigoError=" + CodigoError);
			sb.append(",MensajeError=" + MensajeError);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fallidos3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document createCases;

		public routines.system.Document getCreateCases() {
			return this.createCases;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = (routines.system.Document) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.createCases);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + String.valueOf(createCases));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLEnviado;

		public String getXMLEnviado() {
			return this.XMLEnviado;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLEnviado = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLEnviado, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLEnviado=" + XMLEnviado);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logxml3Struct implements
			routines.system.IPersistableRow<logxml3Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLEnviado;

		public String getXMLEnviado() {
			return this.XMLEnviado;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLEnviado = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLEnviado, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLEnviado=" + XMLEnviado);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logxml3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String createCases;

		public String getCreateCases() {
			return this.createCases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.createCases, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + createCases);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String createCases;

		public String getCreateCases() {
			return this.createCases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.createCases, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + createCases);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();
				row21Struct row21 = new row21Struct();
				logxml3Struct logxml3 = new logxml3Struct();
				logxml3Struct row23 = logxml3;
				row24Struct row24 = new row24Struct();
				row30Struct row30 = new row30Struct();
				creados3Struct creados3 = new creados3Struct();
				creados3Struct row43 = creados3;
				fallidos3Struct fallidos3 = new fallidos3Struct();
				fallidos3Struct row44 = fallidos3;

				/**
				 * [tXMLMap_5_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_5_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_5_TXMLMAP_OUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_5";

				currentComponent = "tXMLMap_5_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row30" + iterateId, 0,
								0);

					}
				}

				int tos_count_tXMLMap_5_TXMLMAP_OUT = 0;

				class BytesLimit65535_tXMLMap_5_TXMLMAP_OUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_5_TXMLMAP_OUT().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_5_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_5_TXMLMAP_OUT__Struct {
					boolean creacionCorrecta;
				}
				Var__tXMLMap_5_TXMLMAP_OUT__Struct Var__tXMLMap_5_TXMLMAP_OUT = new Var__tXMLMap_5_TXMLMAP_OUT__Struct();
				// ###############################
				// # Outputs initialization
				creados3Struct creados3_tmp = new creados3Struct();
				creados3Struct creados3_save = null;
				// the aggregate variable
				creados3Struct creados3_aggregate = null;
				fallidos3Struct fallidos3_tmp = new fallidos3Struct();
				fallidos3Struct fallidos3_save = null;
				// the aggregate variable
				fallidos3Struct fallidos3_aggregate = null;
				// init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_5 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_5",
						allOutsForAggregate_tXMLMap_5);
				// ###############################
				class TreeNode_API_tXMLMap_5_TXMLMAP_OUT {
					java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();

					void clear() {
						xpath_value_map.clear();
					}

					void put(String xpath, String value) {
						xpath_value_map.put(xpath, value);
					}

					String get_null(String xpath) {
						return null;
					}

					Integer get_Integer(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Integer(content);
					}

					String get_String(String xpath) {
						return xpath_value_map.get(xpath);
					}

					java.util.Date get_Date(String xpath, String pattern) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Date(content, pattern);
					}
				}
				TreeNode_API_tXMLMap_5_TXMLMAP_OUT treeNodeAPI_tXMLMap_5_TXMLMAP_OUT = new TreeNode_API_tXMLMap_5_TXMLMAP_OUT();
				NameSpaceTool nsTool_tXMLMap_5_TXMLMAP_OUT = new NameSpaceTool();
				int nb_line_tXMLMap_5_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_5_TXMLMAP_OUT xml_api_tXMLMap_5_TXMLMAP_OUT = new XML_API_tXMLMap_5_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_5_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				/**
				 * [tXMLMap_5_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tSOAP_5 begin ] start
				 */

				ok_Hash.put("tSOAP_5", false);
				start_Hash.put("tSOAP_5", System.currentTimeMillis());

				currentComponent = "tSOAP_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row24" + iterateId, 0,
								0);

					}
				}

				int tos_count_tSOAP_5 = 0;

				class BytesLimit65535_tSOAP_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSOAP_5().limitLog4jByte();
				org.talend.soap.SOAPUtil soapUtil_tSOAP_5 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_5 begin ] stop
				 */

				/**
				 * [tExtractXMLField_2 begin ] start
				 */

				ok_Hash.put("tExtractXMLField_2", false);
				start_Hash
						.put("tExtractXMLField_2", System.currentTimeMillis());

				currentComponent = "tExtractXMLField_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row23" + iterateId, 0,
								0);

					}
				}

				int tos_count_tExtractXMLField_2 = 0;

				class BytesLimit65535_tExtractXMLField_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractXMLField_2().limitLog4jByte();

				int nb_line_tExtractXMLField_2 = 0;

				class NameSpaceTool_tExtractXMLField_2 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					/**
					 * the regex for the xpath like that : case 1 :
					 * functionA(locationXPathExpression) case 2 :
					 * fn:functionA(locationXPathExpression) case 3 :
					 * functionA(functionB(locationXPathExpression)) case 4 :
					 * fn:functionA(fn:functionB(locationXPathExpression)) and
					 * like that.
					 */
					private java.util.regex.Pattern simpleFunctionPattern;
					private StringBuffer stringBuffer;
					private java.util.Map<String, String> resultCache;

					public String addDefaultNSPrefix(
							final String xpathExpression, String loopPath) {
						if (defualtNSPath.size() < 1) {
							return xpathExpression;
						}

						if (resultCache == null) {
							resultCache = new java.util.HashMap<String, String>();
						}

						String resultXpathExpression = resultCache
								.get(xpathExpression);
						if (resultXpathExpression != null) {
							return resultXpathExpression;
						}

						String locationPathExpression = xpathExpression;

						if (simpleFunctionPattern == null) {
							simpleFunctionPattern = java.util.regex.Pattern
									.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
						}

						boolean isSimpleFunctionXPath = simpleFunctionPattern
								.matcher(xpathExpression).matches();
						String tail = null;
						if (isSimpleFunctionXPath) {
							int start = xpathExpression.lastIndexOf('(');
							int end = xpathExpression.indexOf(')');
							if (start < end) {
								if (stringBuffer == null) {
									stringBuffer = new StringBuffer();
								}
								locationPathExpression = xpathExpression
										.substring(start + 1, end);
								stringBuffer.append(xpathExpression.substring(
										0, start + 1));
								tail = xpathExpression.substring(end);
							} else {
								isSimpleFunctionXPath = false;
							}
						}

						locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(
								locationPathExpression, loopPath);

						resultXpathExpression = locationPathExpression;

						if (isSimpleFunctionXPath) {
							stringBuffer.append(locationPathExpression);
							stringBuffer.append(tail);
							resultXpathExpression = stringBuffer.toString();
							stringBuffer.setLength(0);
						}

						resultCache.put(xpathExpression, resultXpathExpression);
						return resultXpathExpression;
					}

					private String addDefaultNSPrefixForLocationXPathExpression(
							String path, String loopPath) {
						String fullPath = loopPath;
						if (!path.equals(fullPath)) {
							for (String tmp : path.split("/")) {
								if (("..").equals(tmp)) {
									fullPath = fullPath.substring(0,
											fullPath.lastIndexOf("/"));
								} else {
									fullPath += "/" + tmp;
								}
							}
						}
						int[] indexs = new int[fullPath.split("/").length - 1];
						java.util.Arrays.fill(indexs, -1);
						int length = 0;
						for (int i = 0; i < defualtNSPath.size(); i++) {
							if (defualtNSPath.get(i).length() > length
									&& fullPath
											.startsWith(defualtNSPath.get(i))) {
								java.util.Arrays.fill(indexs, defualtNSPath
										.get(i).split("/").length - 2,
										indexs.length, i);
								length = defualtNSPath.get(i).length();
							}
						}

						StringBuilder newPath = new StringBuilder();
						String[] pathStrs = path.split("/");
						for (int i = 0; i < pathStrs.length; i++) {
							String tmp = pathStrs[i];
							if (newPath.length() > 0) {
								newPath.append("/");
							}
							if (tmp.length() > 0 && tmp.indexOf(":") == -1
									&& tmp.indexOf(".") == -1 /*
															 * &&
															 * tmp.indexOf("@")
															 * == -1
															 */) {
								int index = indexs[i + indexs.length
										- pathStrs.length];
								if (index >= 0) {
									// ==== add by wliu to support both filter
									// and functions==
									if (tmp.indexOf("[") > 0
											&& tmp.indexOf("]") > tmp
													.indexOf("[")) {// include
																	// filter
										String tmpStr = replaceElementWithNS(
												tmp, "pre" + index + ":");
										newPath.append(tmpStr);
									} else {
										if (tmp.indexOf("@") != -1
												|| tmp.indexOf("(") < tmp
														.indexOf(")")) { // include
																			// attribute
											newPath.append(tmp);
										} else {
											// ==add end=======
											newPath.append("pre").append(index)
													.append(":").append(tmp);
										}
									}
								} else {
									newPath.append(tmp);
								}
							} else {
								newPath.append(tmp);
							}
						}
						return newPath.toString();
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tExtractXMLField_2 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				XML_API_tExtractXMLField_2 xml_api_tExtractXMLField_2 = new XML_API_tExtractXMLField_2();

				/**
				 * [tExtractXMLField_2 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_14 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_14", false);
				start_Hash.put("tFileOutputExcel_14",
						System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_14";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("logxml3" + iterateId,
								0, 0);

					}
				}

				int tos_count_tFileOutputExcel_14 = 0;

				class BytesLimit65535_tFileOutputExcel_14 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_14().limitLog4jByte();

				int columnIndex_tFileOutputExcel_14 = 0;

				String fileName_tFileOutputExcel_14 = context.ExcelLogXML;
				int nb_line_tFileOutputExcel_14 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_14 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_14.setSheet("Creados");
				xlsxTool_tFileOutputExcel_14.setAppend(true, true);
				xlsxTool_tFileOutputExcel_14.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_14.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_14
						.prepareXlsxFile(fileName_tFileOutputExcel_14);

				xlsxTool_tFileOutputExcel_14.setFont("");

				/**
				 * [tFileOutputExcel_14 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row21" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_5 = 0;

				class BytesLimit65535_tMap_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_5().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
					String Fecha;
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				logxml3Struct logxml3_tmp = new logxml3Struct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tReplace_2 begin ] start
				 */

				ok_Hash.put("tReplace_2", false);
				start_Hash.put("tReplace_2", System.currentTimeMillis());

				currentComponent = "tReplace_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row16" + iterateId, 0,
								0);

					}
				}

				int tos_count_tReplace_2 = 0;

				class BytesLimit65535_tReplace_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tReplace_2().limitLog4jByte();

				int nb_line_tReplace_2 = 0;

				/**
				 * [tReplace_2 begin ] stop
				 */

				/**
				 * [tFileInputXML_3 begin ] start
				 */

				ok_Hash.put("tFileInputXML_3", false);
				start_Hash.put("tFileInputXML_3", System.currentTimeMillis());

				currentComponent = "tFileInputXML_3";

				int tos_count_tFileInputXML_3 = 0;

				class BytesLimit65535_tFileInputXML_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputXML_3().limitLog4jByte();

				int nb_line_tFileInputXML_3 = 0;

				String os_tFileInputXML_3 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_3 = false;
				if (os_tFileInputXML_3.indexOf("windows") > -1
						|| os_tFileInputXML_3.indexOf("nt") > -1) {
					isWindows_tFileInputXML_3 = true;
				}
				class NameSpaceTool_tFileInputXML_3 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression,
							String basePath) {
						return util.addDefaultNSPrefix(relativeXpression,
								basePath);
					}

				}

				class XML_API_tFileInputXML_3 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_3 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_3 = null;
				try {
					filename_tFileInputXML_3 = context.XMLTempAgrupado;
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_3 != null
						&& filename_tFileInputXML_3 instanceof String
						&& filename_tFileInputXML_3.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_3) {
						filename_tFileInputXML_3 = filename_tFileInputXML_3
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_3 = true;
				org.dom4j.Document doc_tFileInputXML_3 = null;
				java.io.Closeable toClose_tFileInputXML_3 = null;
				try {
					if (filename_tFileInputXML_3 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_3 = (java.io.InputStream) filename_tFileInputXML_3;
						toClose_tFileInputXML_3 = inputStream_tFileInputXML_3;
						doc_tFileInputXML_3 = reader_tFileInputXML_3
								.read(inputStream_tFileInputXML_3);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_3 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_3)),
								"UTF-8");
						toClose_tFileInputXML_3 = unicodeReader_tFileInputXML_3;
						org.xml.sax.InputSource in_tFileInputXML_3 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_3);
						doc_tFileInputXML_3 = reader_tFileInputXML_3
								.read(in_tFileInputXML_3);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_3 = false;
				} finally {
					if (toClose_tFileInputXML_3 != null) {
						toClose_tFileInputXML_3.close();
					}
				}
				if (isValidFile_tFileInputXML_3) {
					NameSpaceTool_tFileInputXML_3 nsTool_tFileInputXML_3 = new NameSpaceTool_tFileInputXML_3();
					nsTool_tFileInputXML_3.countNSMap(doc_tFileInputXML_3
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_3 = nsTool_tFileInputXML_3.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_3 = doc_tFileInputXML_3
							.createXPath(nsTool_tFileInputXML_3
									.addDefaultNSPrefix("/"));
					x_tFileInputXML_3
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_3 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_3
							.selectNodes(doc_tFileInputXML_3);
					XML_API_tFileInputXML_3 xml_api_tFileInputXML_3 = new XML_API_tFileInputXML_3();
					String str_tFileInputXML_3 = "";
					org.dom4j.Node node_tFileInputXML_3 = null;

					// init all mapping xpaths
					java.util.Map<Integer, org.dom4j.XPath> xpaths_tFileInputXML_3 = new java.util.HashMap<Integer, org.dom4j.XPath>();
					class XPathUtil_tFileInputXML_3 {

						public void initXPaths_0(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_3 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("/",
											"/"));
							xpath_0.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(0, xpath_0);

						}

						public void initXPaths(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_3 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							initXPaths_0(xpaths, nsTool, xmlNameSpaceMap);

						}
					}
					XPathUtil_tFileInputXML_3 xPathUtil_tFileInputXML_3 = new XPathUtil_tFileInputXML_3();
					xPathUtil_tFileInputXML_3.initXPaths(
							xpaths_tFileInputXML_3, nsTool_tFileInputXML_3,
							xmlNameSpaceMap_tFileInputXML_3);
					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_3 : nodeList_tFileInputXML_3) {
						nb_line_tFileInputXML_3++;
						row16 = null;
						boolean whetherReject_tFileInputXML_3 = false;
						row16 = new row16Struct();
						try {
							Object obj0_tFileInputXML_3 = xpaths_tFileInputXML_3
									.get(0).evaluate(temp_tFileInputXML_3);
							if (obj0_tFileInputXML_3 == null) {
								node_tFileInputXML_3 = null;
								str_tFileInputXML_3 = null;

							} else if (obj0_tFileInputXML_3 instanceof org.dom4j.Node) {
								node_tFileInputXML_3 = (org.dom4j.Node) obj0_tFileInputXML_3;
								str_tFileInputXML_3 = node_tFileInputXML_3
										.asXML();
							} else if (obj0_tFileInputXML_3 instanceof String
									|| obj0_tFileInputXML_3 instanceof Number) {
								node_tFileInputXML_3 = temp_tFileInputXML_3;
								str_tFileInputXML_3 = String
										.valueOf(obj0_tFileInputXML_3);
							} else if (obj0_tFileInputXML_3 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_3;
								node_tFileInputXML_3 = nodes_tFileInputXML_3
										.size() > 0 ? nodes_tFileInputXML_3
										.get(0) : null;
								str_tFileInputXML_3 = node_tFileInputXML_3 == null ? null
										: node_tFileInputXML_3.asXML();
							}
							row16.createCases = str_tFileInputXML_3;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_3 = true;
							System.err.println(e.getMessage());
							row16 = null;
						}

						/**
						 * [tFileInputXML_3 begin ] stop
						 */

						/**
						 * [tFileInputXML_3 main ] start
						 */

						currentComponent = "tFileInputXML_3";

						tos_count_tFileInputXML_3++;

						/**
						 * [tFileInputXML_3 main ] stop
						 */
						// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tReplace_2 main ] start
							 */

							currentComponent = "tReplace_2";

							// row16
							// row16

							if (execStat) {
								runStat.updateStatOnConnection("row16"
										+ iterateId, 1, 1);
							}

							String searchStr_tReplace_2_1 = "<Entities>" + "";
							row16.createCases = StringUtils
									.replaceAllStrictly(
											row16.createCases,
											searchStr_tReplace_2_1,
											"<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'     xmlns:tem='http://tempuri.org/'>    <soapenv:Header></soapenv:Header>    <soapenv:Body>        <tem:createCases>            <tem:casesInfo>                <BizAgiWSParam>                    <domain>domain</domain>                    <userName>admon</userName>                    <Cases>"
													+ "", false, false);
							String searchStr_tReplace_2_2 = "</Entities>" + "";
							row16.createCases = StringUtils
									.replaceAllStrictly(
											row16.createCases,
											searchStr_tReplace_2_2,
											"</Cases>                </BizAgiWSParam>            </tem:casesInfo>        </tem:createCases>    </soapenv:Body></soapenv:Envelope>"
													+ "", false, false);
							String searchStr_tReplace_2_3 = "<TablaProceso>"
									+ "";
							row16.createCases = StringUtils
									.replaceAllStrictly(
											row16.createCases,
											searchStr_tReplace_2_3,
											"<Case>                            <Process>NombreProceso</Process>                            <Entities>                                <TablaProceso>"
													+ "", false, false);
							String searchStr_tReplace_2_4 = "</TablaProceso>"
									+ "";
							row16.createCases = StringUtils
									.replaceAllStrictly(
											row16.createCases,
											searchStr_tReplace_2_4,
											"</TablaProceso>                            </Entities>                        </Case>"
													+ "", false, false);
							String searchStr_tReplace_2_5 = "TablaProceso" + "";
							row16.createCases = StringUtils.replaceAllStrictly(
									row16.createCases, searchStr_tReplace_2_5,
									"M_GestiondeMuestras" + "", false, false);
							String searchStr_tReplace_2_6 = "NombreProceso"
									+ "";
							row16.createCases = StringUtils.replaceAllStrictly(
									row16.createCases, searchStr_tReplace_2_6,
									"PubGestiondeMuestras" + "", false, false);
							row21.createCases = row16.createCases;

							nb_line_tReplace_2++;

							tos_count_tReplace_2++;

							/**
							 * [tReplace_2 main ] stop
							 */

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							// row21
							// row21

							if (execStat) {
								runStat.updateStatOnConnection("row21"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;
								Var.Fecha = TalendDate
										.getDate("dd/MM/yyyy hh:mm:ss aa");// ###############################
								// ###############################
								// # Output tables

								logxml3 = null;

								// # Output table : 'logxml3'
								logxml3_tmp.XMLEnviado = row21.createCases;
								logxml3_tmp.Fecha = Var.Fecha;
								logxml3 = logxml3_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */
							// Start of branch "logxml3"
							if (logxml3 != null) {

								/**
								 * [tFileOutputExcel_14 main ] start
								 */

								currentComponent = "tFileOutputExcel_14";

								// logxml3
								// logxml3

								if (execStat) {
									runStat.updateStatOnConnection("logxml3"
											+ iterateId, 1, 1);
								}

								xlsxTool_tFileOutputExcel_14.addRow();

								if (logxml3.XMLEnviado != null) {

									xlsxTool_tFileOutputExcel_14
											.addCellValue(String
													.valueOf(logxml3.XMLEnviado));
								} else {
									xlsxTool_tFileOutputExcel_14
											.addCellNullValue();
								}

								if (logxml3.Fecha != null) {

									xlsxTool_tFileOutputExcel_14
											.addCellValue(String
													.valueOf(logxml3.Fecha));
								} else {
									xlsxTool_tFileOutputExcel_14
											.addCellNullValue();
								}

								nb_line_tFileOutputExcel_14++;

								row23 = logxml3;

								tos_count_tFileOutputExcel_14++;

								/**
								 * [tFileOutputExcel_14 main ] stop
								 */

								/**
								 * [tExtractXMLField_2 main ] start
								 */

								currentComponent = "tExtractXMLField_2";

								// row23
								// row23

								if (execStat) {
									runStat.updateStatOnConnection("row23"
											+ iterateId, 1, 1);
								}

								String xmlStr_tExtractXMLField_2 = null;
								routines.system.Document xmlDocument_tExtractXMLField_2 = null;
								if (row23.XMLEnviado != null) {
									xmlStr_tExtractXMLField_2 = row23.XMLEnviado;
								}
								if (xmlStr_tExtractXMLField_2 != null) {// C_01
									row24 = null;
									NameSpaceTool_tExtractXMLField_2 nsTool_tExtractXMLField_2 = new NameSpaceTool_tExtractXMLField_2();
									org.dom4j.io.SAXReader reader_tExtractXMLField_2 = new org.dom4j.io.SAXReader();

									org.dom4j.Document doc_tExtractXMLField_2 = null;
									java.util.HashMap xmlNameSpaceMap_tExtractXMLField_2 = null;
									org.dom4j.XPath x_tExtractXMLField_2 = null;
									java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractXMLField_2 = null;
									String loopQuery_tExtractXMLField_2 = "/";

									boolean isStructError_tExtractXMLField_2 = true;

									try {

										doc_tExtractXMLField_2 = reader_tExtractXMLField_2
												.read(new java.io.StringReader(
														xmlStr_tExtractXMLField_2));

										nsTool_tExtractXMLField_2
												.countNSMap(doc_tExtractXMLField_2
														.getRootElement());
										xmlNameSpaceMap_tExtractXMLField_2 = nsTool_tExtractXMLField_2.xmlNameSpaceMap;

										x_tExtractXMLField_2 = doc_tExtractXMLField_2
												.createXPath(nsTool_tExtractXMLField_2
														.addDefaultNSPrefix(
																loopQuery_tExtractXMLField_2,
																loopQuery_tExtractXMLField_2));

										x_tExtractXMLField_2
												.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_2);

										nodeList_tExtractXMLField_2 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractXMLField_2
												.selectNodes(doc_tExtractXMLField_2);

										isStructError_tExtractXMLField_2 = false;

									} catch (java.lang.Exception ex_tExtractXMLField_2) {
										System.err
												.println(ex_tExtractXMLField_2
														.getMessage());
									}

									org.dom4j.Node node_tExtractXMLField_2 = null;
									String str_tExtractXMLField_2 = "";
									boolean resultIsNode_tExtractXMLField_2 = true;
									for (int i_tExtractXMLField_2 = 0; isStructError_tExtractXMLField_2
											|| (nodeList_tExtractXMLField_2 != null && i_tExtractXMLField_2 < nodeList_tExtractXMLField_2
													.size()); i_tExtractXMLField_2++) {

										if (!isStructError_tExtractXMLField_2) {
											row24 = null;
											row24 = new row24Struct();

											org.dom4j.tree.AbstractNode temp_tExtractXMLField_2 = nodeList_tExtractXMLField_2
													.get(i_tExtractXMLField_2);

											nb_line_tExtractXMLField_2++;
											try {
												org.dom4j.XPath xTmp0_tExtractXMLField_2 = temp_tExtractXMLField_2
														.createXPath(nsTool_tExtractXMLField_2
																.addDefaultNSPrefix(
																		"/",
																		loopQuery_tExtractXMLField_2));
												xTmp0_tExtractXMLField_2
														.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_2);

												Object obj0_tExtractXMLField_2 = xTmp0_tExtractXMLField_2
														.evaluate(temp_tExtractXMLField_2);
												if (obj0_tExtractXMLField_2 instanceof String
														|| obj0_tExtractXMLField_2 instanceof Number) {
													resultIsNode_tExtractXMLField_2 = false;
													str_tExtractXMLField_2 = String
															.valueOf(obj0_tExtractXMLField_2);
												} else {
													resultIsNode_tExtractXMLField_2 = true;
													node_tExtractXMLField_2 = xTmp0_tExtractXMLField_2
															.selectSingleNode(temp_tExtractXMLField_2);
													str_tExtractXMLField_2 = node_tExtractXMLField_2 == null ? null
															: node_tExtractXMLField_2
																	.asXML();
												}
												row24.createCases = ParserUtils
														.parseTo_Document(str_tExtractXMLField_2);
											} catch (java.lang.Exception ex_tExtractXMLField_2) {
												System.err
														.println(ex_tExtractXMLField_2
																.getMessage());
												row24 = null;
											}
										}

										isStructError_tExtractXMLField_2 = false;

										globalMap.put(
												"tExtractXMLField_2_NB_LINE",
												nb_line_tExtractXMLField_2);

										tos_count_tExtractXMLField_2++;

										/**
										 * [tExtractXMLField_2 main ] stop
										 */
										// Start of branch "row24"
										if (row24 != null) {

											/**
											 * [tSOAP_5 main ] start
											 */

											currentComponent = "tSOAP_5";

											// row24
											// row24

											if (execStat) {
												runStat.updateStatOnConnection(
														"row24" + iterateId, 1,
														1);
											}

											String document_tSOAP_5 = soapUtil_tSOAP_5
													.extractContentAsDocument(
															org.talend.soap.SOAPUtil.SOAP11,
															"http://"
																	+ context.BIZhost
																	+ "/"
																	+ context.BIZprocesoDD
																	+ "/webservices/workflowenginesoa.asmx",
															"http://tempuri.org/createCases",
															row24.createCases
																	.toString());

											// for output

											row30 = new row30Struct();

											row30.Soap = ParserUtils
													.parseTo_Document(document_tSOAP_5);

											tos_count_tSOAP_5++;

											/**
											 * [tSOAP_5 main ] stop
											 */

											/**
											 * [tXMLMap_5_TXMLMAP_OUT main ]
											 * start
											 */

											currentVirtualComponent = "tXMLMap_5";

											currentComponent = "tXMLMap_5_TXMLMAP_OUT";

											// row30
											// row30

											if (execStat) {
												runStat.updateStatOnConnection(
														"row30" + iterateId, 1,
														1);
											}

											boolean rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
											boolean rejectedDocInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
											boolean mainRowRejected_tXMLMap_5_TXMLMAP_OUT = false;
											boolean isMatchDocRowtXMLMap_5_TXMLMAP_OUT = false;

											// init document to flat tool
											routines.system.DocumentToFlat docToFlat_tXMLMap_5_TXMLMAP_OUT = new routines.system.DocumentToFlat();
											docToFlat_tXMLMap_5_TXMLMAP_OUT
													.setOriginalLoop("/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process");
											docToFlat_tXMLMap_5_TXMLMAP_OUT
													.setIsOptional(false);
											if (row30.Soap == null
													|| row30.Soap.getDocument() == null) {
												throw new RuntimeException(
														"row30.Soap can't be empty");
											}
											org.dom4j.Document doc_tXMLMap_5_TXMLMAP_OUT = row30.Soap
													.getDocument();
											docToFlat_tXMLMap_5_TXMLMAP_OUT
													.setDoc(doc_tXMLMap_5_TXMLMAP_OUT);
											docToFlat_tXMLMap_5_TXMLMAP_OUT
													.setDefineNS(false);
											docToFlat_tXMLMap_5_TXMLMAP_OUT
													.setNamespaceTool(nsTool_tXMLMap_5_TXMLMAP_OUT);

											// old version, find NS from doc
											nsTool_tXMLMap_5_TXMLMAP_OUT
													.countNSMap(doc_tXMLMap_5_TXMLMAP_OUT
															.getRootElement());
											java.util.HashMap<String, String> xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT = nsTool_tXMLMap_5_TXMLMAP_OUT.xmlNameSpaceMap;

											docToFlat_tXMLMap_5_TXMLMAP_OUT
													.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT);

											String[] absolutePathMappings_tXMLMap_5_TXMLMAP_OUT = new String[6];
											String[] relativePathMappings_tXMLMap_5_TXMLMAP_OUT = new String[6];

											absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[0] = "row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processRadNumber";
											relativePathMappings_tXMLMap_5_TXMLMAP_OUT[0] = "processRadNumber";

											absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[1] = "row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassCreationDate";
											relativePathMappings_tXMLMap_5_TXMLMAP_OUT[1] = "processWorkflowClass/workflowClassCreationDate";

											absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[2] = "row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorMessage";
											relativePathMappings_tXMLMap_5_TXMLMAP_OUT[2] = "processError/errorMessage";

											absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[3] = "row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorCode";
											relativePathMappings_tXMLMap_5_TXMLMAP_OUT[3] = "processError/errorCode";

											absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[4] = "row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassDisplayName";
											relativePathMappings_tXMLMap_5_TXMLMAP_OUT[4] = "processWorkflowClass/workflowClassDisplayName";

											absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[5] = "row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId";
											relativePathMappings_tXMLMap_5_TXMLMAP_OUT[5] = "processId";

											docToFlat_tXMLMap_5_TXMLMAP_OUT
													.setAbsolutePathMappings(absolutePathMappings_tXMLMap_5_TXMLMAP_OUT);
											docToFlat_tXMLMap_5_TXMLMAP_OUT
													.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_5_TXMLMAP_OUT);
											// generate document to flat data
											docToFlat_tXMLMap_5_TXMLMAP_OUT
													.flat();
											// get flat data
											java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_5_TXMLMAP_OUT = docToFlat_tXMLMap_5_TXMLMAP_OUT
													.getResultSet();

											for (java.util.Map<String, String> oneRow_tXMLMap_5_TXMLMAP_OUT : resultSet_tXMLMap_5_TXMLMAP_OUT) { // G_TXM_M_001
												nb_line_tXMLMap_5_TXMLMAP_OUT++;
												rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
												rejectedDocInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
												mainRowRejected_tXMLMap_5_TXMLMAP_OUT = false;
												isMatchDocRowtXMLMap_5_TXMLMAP_OUT = false;

												treeNodeAPI_tXMLMap_5_TXMLMAP_OUT
														.clear();
												for (java.util.Map.Entry<String, String> entry_tXMLMap_5_TXMLMAP_OUT : oneRow_tXMLMap_5_TXMLMAP_OUT
														.entrySet()) {
													treeNodeAPI_tXMLMap_5_TXMLMAP_OUT
															.put(entry_tXMLMap_5_TXMLMAP_OUT
																	.getKey(),
																	entry_tXMLMap_5_TXMLMAP_OUT
																			.getValue());
												}

												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tXMLMap_5_TXMLMAP_OUT__Struct Var = Var__tXMLMap_5_TXMLMAP_OUT;

													Var.creacionCorrecta = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT
															.get_Integer("row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId") != null
															&& treeNodeAPI_tXMLMap_5_TXMLMAP_OUT
																	.get_Integer("row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId") != 0;
													// ###############################
													// # Output tables

													creados3 = null;
													fallidos3 = null;

													boolean rejected_tXMLMap_5_TXMLMAP_OUT = true;

													// # Output table :
													// 'creados3'
													// # Filter conditions
													if (

													Var.creacionCorrecta

													) {
														rejected_tXMLMap_5_TXMLMAP_OUT = false;

														creados3_tmp = new creados3Struct();
														creados3_tmp.IDCaso = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT
																.get_Integer("row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId");
														creados3_tmp.RadNumber = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT
																.get_Integer("row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processRadNumber");
														creados3_tmp.NombreProceso = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT
																.get_String("row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassDisplayName");
														creados3_tmp.Fecha = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT
																.get_String("row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassCreationDate");
														allOutsForAggregate_tXMLMap_5
																.add(creados3_tmp);

													} // closing filter/reject
														// ###### START REJECTS
														// #####

													// # Output reject table :
													// 'fallidos3'
													// # Filter conditions
													if (rejected_tXMLMap_5_TXMLMAP_OUT) {

														fallidos3_tmp = new fallidos3Struct();
														fallidos3_tmp.CodigoError = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT
																.get_String("row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorCode");
														fallidos3_tmp.MensajeError = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT
																.get_String("row30.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorMessage");
														allOutsForAggregate_tXMLMap_5
																.add(fallidos3_tmp);

													} // closing filter/reject
														// ###############################

												} // end of Var scope

												rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;

											}// G_TXM_M_001 close

											tos_count_tXMLMap_5_TXMLMAP_OUT++;

											/**
											 * [tXMLMap_5_TXMLMAP_OUT main ]
											 * stop
											 */

										} // End of branch "row24"

										// end for
									}

								} // C_01

							} // End of branch "logxml3"

						} // End of branch "row16"

						/**
						 * [tFileInputXML_3 end ] start
						 */

						currentComponent = "tFileInputXML_3";

					}
				}
				globalMap.put("tFileInputXML_3_NB_LINE",
						nb_line_tFileInputXML_3);

				ok_Hash.put("tFileInputXML_3", true);
				end_Hash.put("tFileInputXML_3", System.currentTimeMillis());

				/**
				 * [tFileInputXML_3 end ] stop
				 */

				/**
				 * [tReplace_2 end ] start
				 */

				currentComponent = "tReplace_2";

				globalMap.put("tReplace_2_NB_LINE", nb_line_tReplace_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row16" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tReplace_2", true);
				end_Hash.put("tReplace_2", System.currentTimeMillis());

				/**
				 * [tReplace_2 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row21" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tFileOutputExcel_14 end ] start
				 */

				currentComponent = "tFileOutputExcel_14";

				xlsxTool_tFileOutputExcel_14.writeExcel(
						fileName_tFileOutputExcel_14, true);

				globalMap.put("tFileOutputExcel_14_NB_LINE",
						nb_line_tFileOutputExcel_14);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("logxml3" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_14", true);
				end_Hash.put("tFileOutputExcel_14", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_14 end ] stop
				 */

				/**
				 * [tExtractXMLField_2 end ] start
				 */

				currentComponent = "tExtractXMLField_2";

				globalMap.put("tExtractXMLField_2_NB_LINE",
						nb_line_tExtractXMLField_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row23" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tExtractXMLField_2", true);
				end_Hash.put("tExtractXMLField_2", System.currentTimeMillis());

				/**
				 * [tExtractXMLField_2 end ] stop
				 */

				/**
				 * [tSOAP_5 end ] start
				 */

				currentComponent = "tSOAP_5";

				soapUtil_tSOAP_5.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row24" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tSOAP_5", true);
				end_Hash.put("tSOAP_5", System.currentTimeMillis());

				/**
				 * [tSOAP_5 end ] stop
				 */

				/**
				 * [tXMLMap_5_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_5";

				currentComponent = "tXMLMap_5_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row30" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tXMLMap_5_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_5_TXMLMAP_OUT",
						System.currentTimeMillis());

				/**
				 * [tXMLMap_5_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputExcel_6 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_6", false);
				start_Hash
						.put("tFileOutputExcel_6", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row43" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_6 = 0;

				class BytesLimit65535_tFileOutputExcel_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_6().limitLog4jByte();

				int columnIndex_tFileOutputExcel_6 = 0;

				String fileName_tFileOutputExcel_6 = context.ExcelLogCreados;
				int nb_line_tFileOutputExcel_6 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_6 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_6.setSheet("Creados");
				xlsxTool_tFileOutputExcel_6.setAppend(true, true);
				xlsxTool_tFileOutputExcel_6.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_6.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_6
						.prepareXlsxFile(fileName_tFileOutputExcel_6);

				xlsxTool_tFileOutputExcel_6.setFont("");

				/**
				 * [tFileOutputExcel_6 begin ] stop
				 */

				/**
				 * [tLogRow_10 begin ] start
				 */

				ok_Hash.put("tLogRow_10", false);
				start_Hash.put("tLogRow_10", System.currentTimeMillis());

				currentComponent = "tLogRow_10";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("creados3" + iterateId,
								0, 0);

					}
				}

				int tos_count_tLogRow_10 = 0;

				class BytesLimit65535_tLogRow_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_10().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_10 = "|";
				java.io.PrintStream consoleOut_tLogRow_10 = null;

				StringBuilder sbHeader_tLogRow_10 = new StringBuilder();

				sbHeader_tLogRow_10.append("IDCaso");

				sbHeader_tLogRow_10.append("\t");

				sbHeader_tLogRow_10.append("RadNumber");

				sbHeader_tLogRow_10.append("\t");

				sbHeader_tLogRow_10.append("NombreProceso");

				sbHeader_tLogRow_10.append("\t");

				sbHeader_tLogRow_10.append("Fecha");

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_10 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_10);
				}
				consoleOut_tLogRow_10.println(sbHeader_tLogRow_10.toString());
				consoleOut_tLogRow_10.flush();

				StringBuilder strBuffer_tLogRow_10 = null;
				int nb_line_tLogRow_10 = 0;
				// /////////////////////

				/**
				 * [tLogRow_10 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_7 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_7", false);
				start_Hash
						.put("tFileOutputExcel_7", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row44" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_7 = 0;

				class BytesLimit65535_tFileOutputExcel_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_7().limitLog4jByte();

				int columnIndex_tFileOutputExcel_7 = 0;

				String fileName_tFileOutputExcel_7 = context.ExcelLogFallidos;
				int nb_line_tFileOutputExcel_7 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_7 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_7.setSheet("Fallidos");
				xlsxTool_tFileOutputExcel_7.setAppend(true, true);
				xlsxTool_tFileOutputExcel_7.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_7.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_7
						.prepareXlsxFile(fileName_tFileOutputExcel_7);

				xlsxTool_tFileOutputExcel_7.setFont("");

				/**
				 * [tFileOutputExcel_7 begin ] stop
				 */

				/**
				 * [tLogRow_11 begin ] start
				 */

				ok_Hash.put("tLogRow_11", false);
				start_Hash.put("tLogRow_11", System.currentTimeMillis());

				currentComponent = "tLogRow_11";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("fallidos3" + iterateId,
								0, 0);

					}
				}

				int tos_count_tLogRow_11 = 0;

				class BytesLimit65535_tLogRow_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_11().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_11 = "|";
				java.io.PrintStream consoleOut_tLogRow_11 = null;

				StringBuilder sbHeader_tLogRow_11 = new StringBuilder();

				sbHeader_tLogRow_11.append("CodigoError");

				sbHeader_tLogRow_11.append("\t");

				sbHeader_tLogRow_11.append("MensajeError");

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_11 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_11);
				}
				consoleOut_tLogRow_11.println(sbHeader_tLogRow_11.toString());
				consoleOut_tLogRow_11.flush();

				StringBuilder strBuffer_tLogRow_11 = null;
				int nb_line_tLogRow_11 = 0;
				// /////////////////////

				/**
				 * [tLogRow_11 begin ] stop
				 */

				/**
				 * [tXMLMap_5_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_5_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_5_TXMLMAP_IN",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_5";

				currentComponent = "tXMLMap_5_TXMLMAP_IN";

				int tos_count_tXMLMap_5_TXMLMAP_IN = 0;

				class BytesLimit65535_tXMLMap_5_TXMLMAP_IN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_5_TXMLMAP_IN().limitLog4jByte();
				java.util.List<Object> outs_tXMLMap_5 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_5");
				for (Object row_out_tXMLMap_5_TXMLMAP_IN : outs_tXMLMap_5) {// TD512

					/**
					 * [tXMLMap_5_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_5_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_5";

					currentComponent = "tXMLMap_5_TXMLMAP_IN";

					creados3 = null;
					if (row_out_tXMLMap_5_TXMLMAP_IN != null
							&& row_out_tXMLMap_5_TXMLMAP_IN instanceof creados3Struct) {
						creados3 = (creados3Struct) row_out_tXMLMap_5_TXMLMAP_IN;
					}
					fallidos3 = null;
					if (row_out_tXMLMap_5_TXMLMAP_IN != null
							&& row_out_tXMLMap_5_TXMLMAP_IN instanceof fallidos3Struct) {
						fallidos3 = (fallidos3Struct) row_out_tXMLMap_5_TXMLMAP_IN;
					}

					tos_count_tXMLMap_5_TXMLMAP_IN++;

					/**
					 * [tXMLMap_5_TXMLMAP_IN main ] stop
					 */
					// Start of branch "creados3"
					if (creados3 != null) {

						/**
						 * [tLogRow_10 main ] start
						 */

						currentComponent = "tLogRow_10";

						// creados3
						// creados3

						if (execStat) {
							runStat.updateStatOnConnection("creados3"
									+ iterateId, 1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_10 = new StringBuilder();

						if (creados3.IDCaso != null) { //

							strBuffer_tLogRow_10.append(String
									.valueOf(creados3.IDCaso));

						} //

						strBuffer_tLogRow_10.append("|");

						if (creados3.RadNumber != null) { //

							strBuffer_tLogRow_10.append(String
									.valueOf(creados3.RadNumber));

						} //

						strBuffer_tLogRow_10.append("|");

						if (creados3.NombreProceso != null) { //

							strBuffer_tLogRow_10.append(String
									.valueOf(creados3.NombreProceso));

						} //

						strBuffer_tLogRow_10.append("|");

						if (creados3.Fecha != null) { //

							strBuffer_tLogRow_10.append(String
									.valueOf(creados3.Fecha));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_10 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_10);
						}
						consoleOut_tLogRow_10.println(strBuffer_tLogRow_10
								.toString());
						consoleOut_tLogRow_10.flush();
						nb_line_tLogRow_10++;
						// ////

						// ////

						// /////////////////////

						row43 = creados3;

						tos_count_tLogRow_10++;

						/**
						 * [tLogRow_10 main ] stop
						 */

						/**
						 * [tFileOutputExcel_6 main ] start
						 */

						currentComponent = "tFileOutputExcel_6";

						// row43
						// row43

						if (execStat) {
							runStat.updateStatOnConnection("row43" + iterateId,
									1, 1);
						}

						xlsxTool_tFileOutputExcel_6.addRow();

						if (row43.IDCaso != null) {

							xlsxTool_tFileOutputExcel_6.addCellValue(Double
									.parseDouble(String.valueOf(row43.IDCaso)));
						} else {
							xlsxTool_tFileOutputExcel_6.addCellNullValue();
						}

						if (row43.RadNumber != null) {

							xlsxTool_tFileOutputExcel_6.addCellValue(Double
									.parseDouble(String
											.valueOf(row43.RadNumber)));
						} else {
							xlsxTool_tFileOutputExcel_6.addCellNullValue();
						}

						if (row43.NombreProceso != null) {

							xlsxTool_tFileOutputExcel_6.addCellValue(String
									.valueOf(row43.NombreProceso));
						} else {
							xlsxTool_tFileOutputExcel_6.addCellNullValue();
						}

						if (row43.Fecha != null) {

							xlsxTool_tFileOutputExcel_6.addCellValue(String
									.valueOf(row43.Fecha));
						} else {
							xlsxTool_tFileOutputExcel_6.addCellNullValue();
						}

						nb_line_tFileOutputExcel_6++;

						tos_count_tFileOutputExcel_6++;

						/**
						 * [tFileOutputExcel_6 main ] stop
						 */

					} // End of branch "creados3"

					// Start of branch "fallidos3"
					if (fallidos3 != null) {

						/**
						 * [tLogRow_11 main ] start
						 */

						currentComponent = "tLogRow_11";

						// fallidos3
						// fallidos3

						if (execStat) {
							runStat.updateStatOnConnection("fallidos3"
									+ iterateId, 1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_11 = new StringBuilder();

						if (fallidos3.CodigoError != null) { //

							strBuffer_tLogRow_11.append(String
									.valueOf(fallidos3.CodigoError));

						} //

						strBuffer_tLogRow_11.append("|");

						if (fallidos3.MensajeError != null) { //

							strBuffer_tLogRow_11.append(String
									.valueOf(fallidos3.MensajeError));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_11 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_11);
						}
						consoleOut_tLogRow_11.println(strBuffer_tLogRow_11
								.toString());
						consoleOut_tLogRow_11.flush();
						nb_line_tLogRow_11++;
						// ////

						// ////

						// /////////////////////

						row44 = fallidos3;

						tos_count_tLogRow_11++;

						/**
						 * [tLogRow_11 main ] stop
						 */

						/**
						 * [tFileOutputExcel_7 main ] start
						 */

						currentComponent = "tFileOutputExcel_7";

						// row44
						// row44

						if (execStat) {
							runStat.updateStatOnConnection("row44" + iterateId,
									1, 1);
						}

						xlsxTool_tFileOutputExcel_7.addRow();

						if (row44.CodigoError != null) {

							xlsxTool_tFileOutputExcel_7.addCellValue(String
									.valueOf(row44.CodigoError));
						} else {
							xlsxTool_tFileOutputExcel_7.addCellNullValue();
						}

						if (row44.MensajeError != null) {

							xlsxTool_tFileOutputExcel_7.addCellValue(String
									.valueOf(row44.MensajeError));
						} else {
							xlsxTool_tFileOutputExcel_7.addCellNullValue();
						}

						nb_line_tFileOutputExcel_7++;

						tos_count_tFileOutputExcel_7++;

						/**
						 * [tFileOutputExcel_7 main ] stop
						 */

					} // End of branch "fallidos3"

					/**
					 * [tXMLMap_5_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_5";

					currentComponent = "tXMLMap_5_TXMLMAP_IN";

				}// TD512

				ok_Hash.put("tXMLMap_5_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_5_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_5_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tLogRow_10 end ] start
				 */

				currentComponent = "tLogRow_10";

				// ////
				// ////
				globalMap.put("tLogRow_10_NB_LINE", nb_line_tLogRow_10);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("creados3" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tLogRow_10", true);
				end_Hash.put("tLogRow_10", System.currentTimeMillis());

				/**
				 * [tLogRow_10 end ] stop
				 */

				/**
				 * [tFileOutputExcel_6 end ] start
				 */

				currentComponent = "tFileOutputExcel_6";

				xlsxTool_tFileOutputExcel_6.writeExcel(
						fileName_tFileOutputExcel_6, true);

				globalMap.put("tFileOutputExcel_6_NB_LINE",
						nb_line_tFileOutputExcel_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row43" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_6", true);
				end_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_6 end ] stop
				 */

				/**
				 * [tLogRow_11 end ] start
				 */

				currentComponent = "tLogRow_11";

				// ////
				// ////
				globalMap.put("tLogRow_11_NB_LINE", nb_line_tLogRow_11);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("fallidos3" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tLogRow_11", true);
				end_Hash.put("tLogRow_11", System.currentTimeMillis());

				/**
				 * [tLogRow_11 end ] stop
				 */

				/**
				 * [tFileOutputExcel_7 end ] start
				 */

				currentComponent = "tFileOutputExcel_7";

				xlsxTool_tFileOutputExcel_7.writeExcel(
						fileName_tFileOutputExcel_7, true);

				globalMap.put("tFileOutputExcel_7_NB_LINE",
						nb_line_tFileOutputExcel_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row44" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_7", true);
				end_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_3 finally ] start
				 */

				currentComponent = "tFileInputXML_3";

				/**
				 * [tFileInputXML_3 finally ] stop
				 */

				/**
				 * [tReplace_2 finally ] start
				 */

				currentComponent = "tReplace_2";

				/**
				 * [tReplace_2 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_14 finally ] start
				 */

				currentComponent = "tFileOutputExcel_14";

				/**
				 * [tFileOutputExcel_14 finally ] stop
				 */

				/**
				 * [tExtractXMLField_2 finally ] start
				 */

				currentComponent = "tExtractXMLField_2";

				/**
				 * [tExtractXMLField_2 finally ] stop
				 */

				/**
				 * [tSOAP_5 finally ] start
				 */

				currentComponent = "tSOAP_5";

				/**
				 * [tSOAP_5 finally ] stop
				 */

				/**
				 * [tXMLMap_5_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_5";

				currentComponent = "tXMLMap_5_TXMLMAP_OUT";

				/**
				 * [tXMLMap_5_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_5_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_5";

				currentComponent = "tXMLMap_5_TXMLMAP_IN";

				/**
				 * [tXMLMap_5_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tLogRow_10 finally ] start
				 */

				currentComponent = "tLogRow_10";

				/**
				 * [tLogRow_10 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_6 finally ] start
				 */

				currentComponent = "tFileOutputExcel_6";

				/**
				 * [tFileOutputExcel_6 finally ] stop
				 */

				/**
				 * [tLogRow_11 finally ] start
				 */

				currentComponent = "tLogRow_11";

				/**
				 * [tLogRow_11 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_7 finally ] start
				 */

				currentComponent = "tFileOutputExcel_7";

				/**
				 * [tFileOutputExcel_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_3_SUBPROCESS_STATE", 1);
	}

	public static class row46Struct implements
			routines.system.IPersistableRow<row46Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String CodigoError;

		public String getCodigoError() {
			return this.CodigoError;
		}

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.CodigoError = readString(dis);

					this.MensajeError = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CodigoError, dos);

				// String

				writeString(this.MensajeError, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CodigoError=" + CodigoError);
			sb.append(",MensajeError=" + MensajeError);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row46Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row45Struct implements
			routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public Integer IDCaso;

		public Integer getIDCaso() {
			return this.IDCaso;
		}

		public Integer RadNumber;

		public Integer getRadNumber() {
			return this.RadNumber;
		}

		public String NombreProceso;

		public String getNombreProceso() {
			return this.NombreProceso;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.IDCaso = readInteger(dis);

					this.RadNumber = readInteger(dis);

					this.NombreProceso = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCaso, dos);

				// Integer

				writeInteger(this.RadNumber, dos);

				// String

				writeString(this.NombreProceso, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCaso=" + String.valueOf(IDCaso));
			sb.append(",RadNumber=" + String.valueOf(RadNumber));
			sb.append(",NombreProceso=" + NombreProceso);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class creados4Struct implements
			routines.system.IPersistableRow<creados4Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public Integer IDCaso;

		public Integer getIDCaso() {
			return this.IDCaso;
		}

		public Integer RadNumber;

		public Integer getRadNumber() {
			return this.RadNumber;
		}

		public String NombreProceso;

		public String getNombreProceso() {
			return this.NombreProceso;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.IDCaso = readInteger(dis);

					this.RadNumber = readInteger(dis);

					this.NombreProceso = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCaso, dos);

				// Integer

				writeInteger(this.RadNumber, dos);

				// String

				writeString(this.NombreProceso, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCaso=" + String.valueOf(IDCaso));
			sb.append(",RadNumber=" + String.valueOf(RadNumber));
			sb.append(",NombreProceso=" + NombreProceso);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(creados4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fallidos4Struct implements
			routines.system.IPersistableRow<fallidos4Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String CodigoError;

		public String getCodigoError() {
			return this.CodigoError;
		}

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.CodigoError = readString(dis);

					this.MensajeError = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CodigoError, dos);

				// String

				writeString(this.MensajeError, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CodigoError=" + CodigoError);
			sb.append(",MensajeError=" + MensajeError);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fallidos4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document createCases;

		public routines.system.Document getCreateCases() {
			return this.createCases;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = (routines.system.Document) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.createCases);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + String.valueOf(createCases));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLEnviado;

		public String getXMLEnviado() {
			return this.XMLEnviado;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLEnviado = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLEnviado, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLEnviado=" + XMLEnviado);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logxml4Struct implements
			routines.system.IPersistableRow<logxml4Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLEnviado;

		public String getXMLEnviado() {
			return this.XMLEnviado;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLEnviado = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLEnviado, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLEnviado=" + XMLEnviado);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logxml4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String createCases;

		public String getCreateCases() {
			return this.createCases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.createCases, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + createCases);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String createCases;

		public String getCreateCases() {
			return this.createCases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.createCases = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.createCases, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("createCases=" + createCases);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();
				row26Struct row26 = new row26Struct();
				logxml4Struct logxml4 = new logxml4Struct();
				logxml4Struct row28 = logxml4;
				row29Struct row29 = new row29Struct();
				row27Struct row27 = new row27Struct();
				creados4Struct creados4 = new creados4Struct();
				creados4Struct row45 = creados4;
				fallidos4Struct fallidos4 = new fallidos4Struct();
				fallidos4Struct row46 = fallidos4;

				/**
				 * [tXMLMap_7_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_7_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_7_TXMLMAP_OUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_7";

				currentComponent = "tXMLMap_7_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row27" + iterateId, 0,
								0);

					}
				}

				int tos_count_tXMLMap_7_TXMLMAP_OUT = 0;

				class BytesLimit65535_tXMLMap_7_TXMLMAP_OUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_7_TXMLMAP_OUT().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_7_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_7_TXMLMAP_OUT__Struct {
					boolean creacionCorrecta;
				}
				Var__tXMLMap_7_TXMLMAP_OUT__Struct Var__tXMLMap_7_TXMLMAP_OUT = new Var__tXMLMap_7_TXMLMAP_OUT__Struct();
				// ###############################
				// # Outputs initialization
				creados4Struct creados4_tmp = new creados4Struct();
				creados4Struct creados4_save = null;
				// the aggregate variable
				creados4Struct creados4_aggregate = null;
				fallidos4Struct fallidos4_tmp = new fallidos4Struct();
				fallidos4Struct fallidos4_save = null;
				// the aggregate variable
				fallidos4Struct fallidos4_aggregate = null;
				// init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_7 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_7",
						allOutsForAggregate_tXMLMap_7);
				// ###############################
				class TreeNode_API_tXMLMap_7_TXMLMAP_OUT {
					java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();

					void clear() {
						xpath_value_map.clear();
					}

					void put(String xpath, String value) {
						xpath_value_map.put(xpath, value);
					}

					String get_null(String xpath) {
						return null;
					}

					Integer get_Integer(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Integer(content);
					}

					String get_String(String xpath) {
						return xpath_value_map.get(xpath);
					}

					java.util.Date get_Date(String xpath, String pattern) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Date(content, pattern);
					}
				}
				TreeNode_API_tXMLMap_7_TXMLMAP_OUT treeNodeAPI_tXMLMap_7_TXMLMAP_OUT = new TreeNode_API_tXMLMap_7_TXMLMAP_OUT();
				NameSpaceTool nsTool_tXMLMap_7_TXMLMAP_OUT = new NameSpaceTool();
				int nb_line_tXMLMap_7_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_7_TXMLMAP_OUT xml_api_tXMLMap_7_TXMLMAP_OUT = new XML_API_tXMLMap_7_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_7_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				/**
				 * [tXMLMap_7_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tSOAP_6 begin ] start
				 */

				ok_Hash.put("tSOAP_6", false);
				start_Hash.put("tSOAP_6", System.currentTimeMillis());

				currentComponent = "tSOAP_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row29" + iterateId, 0,
								0);

					}
				}

				int tos_count_tSOAP_6 = 0;

				class BytesLimit65535_tSOAP_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSOAP_6().limitLog4jByte();
				org.talend.soap.SOAPUtil soapUtil_tSOAP_6 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_6 begin ] stop
				 */

				/**
				 * [tExtractXMLField_1 begin ] start
				 */

				ok_Hash.put("tExtractXMLField_1", false);
				start_Hash
						.put("tExtractXMLField_1", System.currentTimeMillis());

				currentComponent = "tExtractXMLField_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row28" + iterateId, 0,
								0);

					}
				}

				int tos_count_tExtractXMLField_1 = 0;

				class BytesLimit65535_tExtractXMLField_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractXMLField_1().limitLog4jByte();

				int nb_line_tExtractXMLField_1 = 0;

				class NameSpaceTool_tExtractXMLField_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					/**
					 * the regex for the xpath like that : case 1 :
					 * functionA(locationXPathExpression) case 2 :
					 * fn:functionA(locationXPathExpression) case 3 :
					 * functionA(functionB(locationXPathExpression)) case 4 :
					 * fn:functionA(fn:functionB(locationXPathExpression)) and
					 * like that.
					 */
					private java.util.regex.Pattern simpleFunctionPattern;
					private StringBuffer stringBuffer;
					private java.util.Map<String, String> resultCache;

					public String addDefaultNSPrefix(
							final String xpathExpression, String loopPath) {
						if (defualtNSPath.size() < 1) {
							return xpathExpression;
						}

						if (resultCache == null) {
							resultCache = new java.util.HashMap<String, String>();
						}

						String resultXpathExpression = resultCache
								.get(xpathExpression);
						if (resultXpathExpression != null) {
							return resultXpathExpression;
						}

						String locationPathExpression = xpathExpression;

						if (simpleFunctionPattern == null) {
							simpleFunctionPattern = java.util.regex.Pattern
									.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
						}

						boolean isSimpleFunctionXPath = simpleFunctionPattern
								.matcher(xpathExpression).matches();
						String tail = null;
						if (isSimpleFunctionXPath) {
							int start = xpathExpression.lastIndexOf('(');
							int end = xpathExpression.indexOf(')');
							if (start < end) {
								if (stringBuffer == null) {
									stringBuffer = new StringBuffer();
								}
								locationPathExpression = xpathExpression
										.substring(start + 1, end);
								stringBuffer.append(xpathExpression.substring(
										0, start + 1));
								tail = xpathExpression.substring(end);
							} else {
								isSimpleFunctionXPath = false;
							}
						}

						locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(
								locationPathExpression, loopPath);

						resultXpathExpression = locationPathExpression;

						if (isSimpleFunctionXPath) {
							stringBuffer.append(locationPathExpression);
							stringBuffer.append(tail);
							resultXpathExpression = stringBuffer.toString();
							stringBuffer.setLength(0);
						}

						resultCache.put(xpathExpression, resultXpathExpression);
						return resultXpathExpression;
					}

					private String addDefaultNSPrefixForLocationXPathExpression(
							String path, String loopPath) {
						String fullPath = loopPath;
						if (!path.equals(fullPath)) {
							for (String tmp : path.split("/")) {
								if (("..").equals(tmp)) {
									fullPath = fullPath.substring(0,
											fullPath.lastIndexOf("/"));
								} else {
									fullPath += "/" + tmp;
								}
							}
						}
						int[] indexs = new int[fullPath.split("/").length - 1];
						java.util.Arrays.fill(indexs, -1);
						int length = 0;
						for (int i = 0; i < defualtNSPath.size(); i++) {
							if (defualtNSPath.get(i).length() > length
									&& fullPath
											.startsWith(defualtNSPath.get(i))) {
								java.util.Arrays.fill(indexs, defualtNSPath
										.get(i).split("/").length - 2,
										indexs.length, i);
								length = defualtNSPath.get(i).length();
							}
						}

						StringBuilder newPath = new StringBuilder();
						String[] pathStrs = path.split("/");
						for (int i = 0; i < pathStrs.length; i++) {
							String tmp = pathStrs[i];
							if (newPath.length() > 0) {
								newPath.append("/");
							}
							if (tmp.length() > 0 && tmp.indexOf(":") == -1
									&& tmp.indexOf(".") == -1 /*
															 * &&
															 * tmp.indexOf("@")
															 * == -1
															 */) {
								int index = indexs[i + indexs.length
										- pathStrs.length];
								if (index >= 0) {
									// ==== add by wliu to support both filter
									// and functions==
									if (tmp.indexOf("[") > 0
											&& tmp.indexOf("]") > tmp
													.indexOf("[")) {// include
																	// filter
										String tmpStr = replaceElementWithNS(
												tmp, "pre" + index + ":");
										newPath.append(tmpStr);
									} else {
										if (tmp.indexOf("@") != -1
												|| tmp.indexOf("(") < tmp
														.indexOf(")")) { // include
																			// attribute
											newPath.append(tmp);
										} else {
											// ==add end=======
											newPath.append("pre").append(index)
													.append(":").append(tmp);
										}
									}
								} else {
									newPath.append(tmp);
								}
							} else {
								newPath.append(tmp);
							}
						}
						return newPath.toString();
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tExtractXMLField_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				XML_API_tExtractXMLField_1 xml_api_tExtractXMLField_1 = new XML_API_tExtractXMLField_1();

				/**
				 * [tExtractXMLField_1 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_15 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_15", false);
				start_Hash.put("tFileOutputExcel_15",
						System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_15";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("logxml4" + iterateId,
								0, 0);

					}
				}

				int tos_count_tFileOutputExcel_15 = 0;

				class BytesLimit65535_tFileOutputExcel_15 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_15().limitLog4jByte();

				int columnIndex_tFileOutputExcel_15 = 0;

				String fileName_tFileOutputExcel_15 = context.ExcelLogXML;
				int nb_line_tFileOutputExcel_15 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_15 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_15.setSheet("Creados");
				xlsxTool_tFileOutputExcel_15.setAppend(true, true);
				xlsxTool_tFileOutputExcel_15.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_15.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_15
						.prepareXlsxFile(fileName_tFileOutputExcel_15);

				xlsxTool_tFileOutputExcel_15.setFont("");

				/**
				 * [tFileOutputExcel_15 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row26" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_6 = 0;

				class BytesLimit65535_tMap_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_6().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
					String Fecha;
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				logxml4Struct logxml4_tmp = new logxml4Struct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tReplace_1 begin ] start
				 */

				ok_Hash.put("tReplace_1", false);
				start_Hash.put("tReplace_1", System.currentTimeMillis());

				currentComponent = "tReplace_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row25" + iterateId, 0,
								0);

					}
				}

				int tos_count_tReplace_1 = 0;

				class BytesLimit65535_tReplace_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tReplace_1().limitLog4jByte();

				int nb_line_tReplace_1 = 0;

				/**
				 * [tReplace_1 begin ] stop
				 */

				/**
				 * [tFileInputXML_4 begin ] start
				 */

				ok_Hash.put("tFileInputXML_4", false);
				start_Hash.put("tFileInputXML_4", System.currentTimeMillis());

				currentComponent = "tFileInputXML_4";

				int tos_count_tFileInputXML_4 = 0;

				class BytesLimit65535_tFileInputXML_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputXML_4().limitLog4jByte();

				int nb_line_tFileInputXML_4 = 0;

				String os_tFileInputXML_4 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_4 = false;
				if (os_tFileInputXML_4.indexOf("windows") > -1
						|| os_tFileInputXML_4.indexOf("nt") > -1) {
					isWindows_tFileInputXML_4 = true;
				}
				class NameSpaceTool_tFileInputXML_4 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression,
							String basePath) {
						return util.addDefaultNSPrefix(relativeXpression,
								basePath);
					}

				}

				class XML_API_tFileInputXML_4 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_4 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_4 = null;
				try {
					filename_tFileInputXML_4 = context.XMLTempAgrupado;
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_4 != null
						&& filename_tFileInputXML_4 instanceof String
						&& filename_tFileInputXML_4.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_4) {
						filename_tFileInputXML_4 = filename_tFileInputXML_4
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_4 = true;
				org.dom4j.Document doc_tFileInputXML_4 = null;
				java.io.Closeable toClose_tFileInputXML_4 = null;
				try {
					if (filename_tFileInputXML_4 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_4 = (java.io.InputStream) filename_tFileInputXML_4;
						toClose_tFileInputXML_4 = inputStream_tFileInputXML_4;
						doc_tFileInputXML_4 = reader_tFileInputXML_4
								.read(inputStream_tFileInputXML_4);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_4 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_4)),
								"UTF-8");
						toClose_tFileInputXML_4 = unicodeReader_tFileInputXML_4;
						org.xml.sax.InputSource in_tFileInputXML_4 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_4);
						doc_tFileInputXML_4 = reader_tFileInputXML_4
								.read(in_tFileInputXML_4);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_4 = false;
				} finally {
					if (toClose_tFileInputXML_4 != null) {
						toClose_tFileInputXML_4.close();
					}
				}
				if (isValidFile_tFileInputXML_4) {
					NameSpaceTool_tFileInputXML_4 nsTool_tFileInputXML_4 = new NameSpaceTool_tFileInputXML_4();
					nsTool_tFileInputXML_4.countNSMap(doc_tFileInputXML_4
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_4 = nsTool_tFileInputXML_4.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_4 = doc_tFileInputXML_4
							.createXPath(nsTool_tFileInputXML_4
									.addDefaultNSPrefix("/"));
					x_tFileInputXML_4
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_4);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_4 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_4
							.selectNodes(doc_tFileInputXML_4);
					XML_API_tFileInputXML_4 xml_api_tFileInputXML_4 = new XML_API_tFileInputXML_4();
					String str_tFileInputXML_4 = "";
					org.dom4j.Node node_tFileInputXML_4 = null;

					// init all mapping xpaths
					java.util.Map<Integer, org.dom4j.XPath> xpaths_tFileInputXML_4 = new java.util.HashMap<Integer, org.dom4j.XPath>();
					class XPathUtil_tFileInputXML_4 {

						public void initXPaths_0(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_4 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("/",
											"/"));
							xpath_0.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(0, xpath_0);

						}

						public void initXPaths(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_4 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							initXPaths_0(xpaths, nsTool, xmlNameSpaceMap);

						}
					}
					XPathUtil_tFileInputXML_4 xPathUtil_tFileInputXML_4 = new XPathUtil_tFileInputXML_4();
					xPathUtil_tFileInputXML_4.initXPaths(
							xpaths_tFileInputXML_4, nsTool_tFileInputXML_4,
							xmlNameSpaceMap_tFileInputXML_4);
					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_4 : nodeList_tFileInputXML_4) {
						nb_line_tFileInputXML_4++;
						row25 = null;
						boolean whetherReject_tFileInputXML_4 = false;
						row25 = new row25Struct();
						try {
							Object obj0_tFileInputXML_4 = xpaths_tFileInputXML_4
									.get(0).evaluate(temp_tFileInputXML_4);
							if (obj0_tFileInputXML_4 == null) {
								node_tFileInputXML_4 = null;
								str_tFileInputXML_4 = null;

							} else if (obj0_tFileInputXML_4 instanceof org.dom4j.Node) {
								node_tFileInputXML_4 = (org.dom4j.Node) obj0_tFileInputXML_4;
								str_tFileInputXML_4 = node_tFileInputXML_4
										.asXML();
							} else if (obj0_tFileInputXML_4 instanceof String
									|| obj0_tFileInputXML_4 instanceof Number) {
								node_tFileInputXML_4 = temp_tFileInputXML_4;
								str_tFileInputXML_4 = String
										.valueOf(obj0_tFileInputXML_4);
							} else if (obj0_tFileInputXML_4 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_4 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_4;
								node_tFileInputXML_4 = nodes_tFileInputXML_4
										.size() > 0 ? nodes_tFileInputXML_4
										.get(0) : null;
								str_tFileInputXML_4 = node_tFileInputXML_4 == null ? null
										: node_tFileInputXML_4.asXML();
							}
							row25.createCases = str_tFileInputXML_4;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_4 = true;
							System.err.println(e.getMessage());
							row25 = null;
						}

						/**
						 * [tFileInputXML_4 begin ] stop
						 */

						/**
						 * [tFileInputXML_4 main ] start
						 */

						currentComponent = "tFileInputXML_4";

						tos_count_tFileInputXML_4++;

						/**
						 * [tFileInputXML_4 main ] stop
						 */
						// Start of branch "row25"
						if (row25 != null) {

							/**
							 * [tReplace_1 main ] start
							 */

							currentComponent = "tReplace_1";

							// row25
							// row25

							if (execStat) {
								runStat.updateStatOnConnection("row25"
										+ iterateId, 1, 1);
							}

							String searchStr_tReplace_1_1 = "<Entities>" + "";
							row25.createCases = StringUtils
									.replaceAllStrictly(
											row25.createCases,
											searchStr_tReplace_1_1,
											"<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'     xmlns:tem='http://tempuri.org/'>    <soapenv:Header></soapenv:Header>    <soapenv:Body>        <tem:createCases>            <tem:casesInfo>                <BizAgiWSParam>                    <domain>domain</domain>                    <userName>admon</userName>                    <Cases>"
													+ "", false, false);
							String searchStr_tReplace_1_2 = "</Entities>" + "";
							row25.createCases = StringUtils
									.replaceAllStrictly(
											row25.createCases,
											searchStr_tReplace_1_2,
											"</Cases>                </BizAgiWSParam>            </tem:casesInfo>        </tem:createCases>    </soapenv:Body></soapenv:Envelope>"
													+ "", false, false);
							String searchStr_tReplace_1_3 = "<TablaProceso>"
									+ "";
							row25.createCases = StringUtils
									.replaceAllStrictly(
											row25.createCases,
											searchStr_tReplace_1_3,
											"<Case>                            <Process>NombreProceso</Process>                            <Entities>                                <TablaProceso>"
													+ "", false, false);
							String searchStr_tReplace_1_4 = "</TablaProceso>"
									+ "";
							row25.createCases = StringUtils
									.replaceAllStrictly(
											row25.createCases,
											searchStr_tReplace_1_4,
											"</TablaProceso>                            </Entities>                        </Case>"
													+ "", false, false);
							String searchStr_tReplace_1_5 = "TablaProceso" + "";
							row25.createCases = StringUtils.replaceAllStrictly(
									row25.createCases, searchStr_tReplace_1_5,
									"M_GestiondeMuestrasEM" + "", false, false);
							String searchStr_tReplace_1_6 = "NombreProceso"
									+ "";
							row25.createCases = StringUtils.replaceAllStrictly(
									row25.createCases, searchStr_tReplace_1_6,
									"PubGestionarMuestraEM" + "", false, false);
							row26.createCases = row25.createCases;

							nb_line_tReplace_1++;

							tos_count_tReplace_1++;

							/**
							 * [tReplace_1 main ] stop
							 */

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							// row26
							// row26

							if (execStat) {
								runStat.updateStatOnConnection("row26"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;
								Var.Fecha = TalendDate
										.getDate("dd/MM/yyyy hh:mm:ss aa");// ###############################
								// ###############################
								// # Output tables

								logxml4 = null;

								// # Output table : 'logxml4'
								logxml4_tmp.XMLEnviado = row26.createCases;
								logxml4_tmp.Fecha = Var.Fecha;
								logxml4 = logxml4_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */
							// Start of branch "logxml4"
							if (logxml4 != null) {

								/**
								 * [tFileOutputExcel_15 main ] start
								 */

								currentComponent = "tFileOutputExcel_15";

								// logxml4
								// logxml4

								if (execStat) {
									runStat.updateStatOnConnection("logxml4"
											+ iterateId, 1, 1);
								}

								xlsxTool_tFileOutputExcel_15.addRow();

								if (logxml4.XMLEnviado != null) {

									xlsxTool_tFileOutputExcel_15
											.addCellValue(String
													.valueOf(logxml4.XMLEnviado));
								} else {
									xlsxTool_tFileOutputExcel_15
											.addCellNullValue();
								}

								if (logxml4.Fecha != null) {

									xlsxTool_tFileOutputExcel_15
											.addCellValue(String
													.valueOf(logxml4.Fecha));
								} else {
									xlsxTool_tFileOutputExcel_15
											.addCellNullValue();
								}

								nb_line_tFileOutputExcel_15++;

								row28 = logxml4;

								tos_count_tFileOutputExcel_15++;

								/**
								 * [tFileOutputExcel_15 main ] stop
								 */

								/**
								 * [tExtractXMLField_1 main ] start
								 */

								currentComponent = "tExtractXMLField_1";

								// row28
								// row28

								if (execStat) {
									runStat.updateStatOnConnection("row28"
											+ iterateId, 1, 1);
								}

								String xmlStr_tExtractXMLField_1 = null;
								routines.system.Document xmlDocument_tExtractXMLField_1 = null;
								if (row28.XMLEnviado != null) {
									xmlStr_tExtractXMLField_1 = row28.XMLEnviado;
								}
								if (xmlStr_tExtractXMLField_1 != null) {// C_01
									row29 = null;
									NameSpaceTool_tExtractXMLField_1 nsTool_tExtractXMLField_1 = new NameSpaceTool_tExtractXMLField_1();
									org.dom4j.io.SAXReader reader_tExtractXMLField_1 = new org.dom4j.io.SAXReader();

									org.dom4j.Document doc_tExtractXMLField_1 = null;
									java.util.HashMap xmlNameSpaceMap_tExtractXMLField_1 = null;
									org.dom4j.XPath x_tExtractXMLField_1 = null;
									java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractXMLField_1 = null;
									String loopQuery_tExtractXMLField_1 = "/";

									boolean isStructError_tExtractXMLField_1 = true;

									try {

										doc_tExtractXMLField_1 = reader_tExtractXMLField_1
												.read(new java.io.StringReader(
														xmlStr_tExtractXMLField_1));

										nsTool_tExtractXMLField_1
												.countNSMap(doc_tExtractXMLField_1
														.getRootElement());
										xmlNameSpaceMap_tExtractXMLField_1 = nsTool_tExtractXMLField_1.xmlNameSpaceMap;

										x_tExtractXMLField_1 = doc_tExtractXMLField_1
												.createXPath(nsTool_tExtractXMLField_1
														.addDefaultNSPrefix(
																loopQuery_tExtractXMLField_1,
																loopQuery_tExtractXMLField_1));

										x_tExtractXMLField_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

										nodeList_tExtractXMLField_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractXMLField_1
												.selectNodes(doc_tExtractXMLField_1);

										isStructError_tExtractXMLField_1 = false;

									} catch (java.lang.Exception ex_tExtractXMLField_1) {
										System.err
												.println(ex_tExtractXMLField_1
														.getMessage());
									}

									org.dom4j.Node node_tExtractXMLField_1 = null;
									String str_tExtractXMLField_1 = "";
									boolean resultIsNode_tExtractXMLField_1 = true;
									for (int i_tExtractXMLField_1 = 0; isStructError_tExtractXMLField_1
											|| (nodeList_tExtractXMLField_1 != null && i_tExtractXMLField_1 < nodeList_tExtractXMLField_1
													.size()); i_tExtractXMLField_1++) {

										if (!isStructError_tExtractXMLField_1) {
											row29 = null;
											row29 = new row29Struct();

											org.dom4j.tree.AbstractNode temp_tExtractXMLField_1 = nodeList_tExtractXMLField_1
													.get(i_tExtractXMLField_1);

											nb_line_tExtractXMLField_1++;
											try {
												org.dom4j.XPath xTmp0_tExtractXMLField_1 = temp_tExtractXMLField_1
														.createXPath(nsTool_tExtractXMLField_1
																.addDefaultNSPrefix(
																		"/",
																		loopQuery_tExtractXMLField_1));
												xTmp0_tExtractXMLField_1
														.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

												Object obj0_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
														.evaluate(temp_tExtractXMLField_1);
												if (obj0_tExtractXMLField_1 instanceof String
														|| obj0_tExtractXMLField_1 instanceof Number) {
													resultIsNode_tExtractXMLField_1 = false;
													str_tExtractXMLField_1 = String
															.valueOf(obj0_tExtractXMLField_1);
												} else {
													resultIsNode_tExtractXMLField_1 = true;
													node_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
															.selectSingleNode(temp_tExtractXMLField_1);
													str_tExtractXMLField_1 = node_tExtractXMLField_1 == null ? null
															: node_tExtractXMLField_1
																	.asXML();
												}
												row29.createCases = ParserUtils
														.parseTo_Document(str_tExtractXMLField_1);
											} catch (java.lang.Exception ex_tExtractXMLField_1) {
												System.err
														.println(ex_tExtractXMLField_1
																.getMessage());
												row29 = null;
											}
										}

										isStructError_tExtractXMLField_1 = false;

										globalMap.put(
												"tExtractXMLField_1_NB_LINE",
												nb_line_tExtractXMLField_1);

										tos_count_tExtractXMLField_1++;

										/**
										 * [tExtractXMLField_1 main ] stop
										 */
										// Start of branch "row29"
										if (row29 != null) {

											/**
											 * [tSOAP_6 main ] start
											 */

											currentComponent = "tSOAP_6";

											// row29
											// row29

											if (execStat) {
												runStat.updateStatOnConnection(
														"row29" + iterateId, 1,
														1);
											}

											String document_tSOAP_6 = soapUtil_tSOAP_6
													.extractContentAsDocument(
															org.talend.soap.SOAPUtil.SOAP11,
															"http://"
																	+ context.BIZhost
																	+ "/"
																	+ context.BIZprocesoDD
																	+ "/webservices/workflowenginesoa.asmx",
															"http://tempuri.org/createCases",
															row29.createCases
																	.toString());

											// for output

											row27 = new row27Struct();

											row27.Soap = ParserUtils
													.parseTo_Document(document_tSOAP_6);

											tos_count_tSOAP_6++;

											/**
											 * [tSOAP_6 main ] stop
											 */

											/**
											 * [tXMLMap_7_TXMLMAP_OUT main ]
											 * start
											 */

											currentVirtualComponent = "tXMLMap_7";

											currentComponent = "tXMLMap_7_TXMLMAP_OUT";

											// row27
											// row27

											if (execStat) {
												runStat.updateStatOnConnection(
														"row27" + iterateId, 1,
														1);
											}

											boolean rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
											boolean rejectedDocInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
											boolean mainRowRejected_tXMLMap_7_TXMLMAP_OUT = false;
											boolean isMatchDocRowtXMLMap_7_TXMLMAP_OUT = false;

											// init document to flat tool
											routines.system.DocumentToFlat docToFlat_tXMLMap_7_TXMLMAP_OUT = new routines.system.DocumentToFlat();
											docToFlat_tXMLMap_7_TXMLMAP_OUT
													.setOriginalLoop("/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process");
											docToFlat_tXMLMap_7_TXMLMAP_OUT
													.setIsOptional(false);
											if (row27.Soap == null
													|| row27.Soap.getDocument() == null) {
												throw new RuntimeException(
														"row27.Soap can't be empty");
											}
											org.dom4j.Document doc_tXMLMap_7_TXMLMAP_OUT = row27.Soap
													.getDocument();
											docToFlat_tXMLMap_7_TXMLMAP_OUT
													.setDoc(doc_tXMLMap_7_TXMLMAP_OUT);
											docToFlat_tXMLMap_7_TXMLMAP_OUT
													.setDefineNS(false);
											docToFlat_tXMLMap_7_TXMLMAP_OUT
													.setNamespaceTool(nsTool_tXMLMap_7_TXMLMAP_OUT);

											// old version, find NS from doc
											nsTool_tXMLMap_7_TXMLMAP_OUT
													.countNSMap(doc_tXMLMap_7_TXMLMAP_OUT
															.getRootElement());
											java.util.HashMap<String, String> xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT = nsTool_tXMLMap_7_TXMLMAP_OUT.xmlNameSpaceMap;

											docToFlat_tXMLMap_7_TXMLMAP_OUT
													.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT);

											String[] absolutePathMappings_tXMLMap_7_TXMLMAP_OUT = new String[6];
											String[] relativePathMappings_tXMLMap_7_TXMLMAP_OUT = new String[6];

											absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[0] = "row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId";
											relativePathMappings_tXMLMap_7_TXMLMAP_OUT[0] = "processId";

											absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[1] = "row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processRadNumber";
											relativePathMappings_tXMLMap_7_TXMLMAP_OUT[1] = "processRadNumber";

											absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[2] = "row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorCode";
											relativePathMappings_tXMLMap_7_TXMLMAP_OUT[2] = "processError/errorCode";

											absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[3] = "row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassDisplayName";
											relativePathMappings_tXMLMap_7_TXMLMAP_OUT[3] = "processWorkflowClass/workflowClassDisplayName";

											absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[4] = "row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassCreationDate";
											relativePathMappings_tXMLMap_7_TXMLMAP_OUT[4] = "processWorkflowClass/workflowClassCreationDate";

											absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[5] = "row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorMessage";
											relativePathMappings_tXMLMap_7_TXMLMAP_OUT[5] = "processError/errorMessage";

											docToFlat_tXMLMap_7_TXMLMAP_OUT
													.setAbsolutePathMappings(absolutePathMappings_tXMLMap_7_TXMLMAP_OUT);
											docToFlat_tXMLMap_7_TXMLMAP_OUT
													.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_7_TXMLMAP_OUT);
											// generate document to flat data
											docToFlat_tXMLMap_7_TXMLMAP_OUT
													.flat();
											// get flat data
											java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_7_TXMLMAP_OUT = docToFlat_tXMLMap_7_TXMLMAP_OUT
													.getResultSet();

											for (java.util.Map<String, String> oneRow_tXMLMap_7_TXMLMAP_OUT : resultSet_tXMLMap_7_TXMLMAP_OUT) { // G_TXM_M_001
												nb_line_tXMLMap_7_TXMLMAP_OUT++;
												rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
												rejectedDocInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
												mainRowRejected_tXMLMap_7_TXMLMAP_OUT = false;
												isMatchDocRowtXMLMap_7_TXMLMAP_OUT = false;

												treeNodeAPI_tXMLMap_7_TXMLMAP_OUT
														.clear();
												for (java.util.Map.Entry<String, String> entry_tXMLMap_7_TXMLMAP_OUT : oneRow_tXMLMap_7_TXMLMAP_OUT
														.entrySet()) {
													treeNodeAPI_tXMLMap_7_TXMLMAP_OUT
															.put(entry_tXMLMap_7_TXMLMAP_OUT
																	.getKey(),
																	entry_tXMLMap_7_TXMLMAP_OUT
																			.getValue());
												}

												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tXMLMap_7_TXMLMAP_OUT__Struct Var = Var__tXMLMap_7_TXMLMAP_OUT;

													Var.creacionCorrecta = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT
															.get_Integer("row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId") != null
															&& treeNodeAPI_tXMLMap_7_TXMLMAP_OUT
																	.get_Integer("row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId") != 0;
													// ###############################
													// # Output tables

													creados4 = null;
													fallidos4 = null;

													boolean rejected_tXMLMap_7_TXMLMAP_OUT = true;

													// # Output table :
													// 'creados4'
													// # Filter conditions
													if (

													Var.creacionCorrecta

													) {
														rejected_tXMLMap_7_TXMLMAP_OUT = false;

														creados4_tmp = new creados4Struct();
														creados4_tmp.IDCaso = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT
																.get_Integer("row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processId");
														creados4_tmp.RadNumber = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT
																.get_Integer("row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processRadNumber");
														creados4_tmp.NombreProceso = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT
																.get_String("row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassDisplayName");
														creados4_tmp.Fecha = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT
																.get_String("row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processWorkflowClass/workflowClassCreationDate");
														allOutsForAggregate_tXMLMap_7
																.add(creados4_tmp);

													} // closing filter/reject
														// ###### START REJECTS
														// #####

													// # Output reject table :
													// 'fallidos4'
													// # Filter conditions
													if (rejected_tXMLMap_7_TXMLMAP_OUT) {

														fallidos4_tmp = new fallidos4Struct();
														fallidos4_tmp.CodigoError = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT
																.get_String("row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorCode");
														fallidos4_tmp.MensajeError = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT
																.get_String("row27.Soap:/soap:Envelope/soap:Body/createCasesResponse/createCasesResult/processes/process/processError/errorMessage");
														allOutsForAggregate_tXMLMap_7
																.add(fallidos4_tmp);

													} // closing filter/reject
														// ###############################

												} // end of Var scope

												rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;

											}// G_TXM_M_001 close

											tos_count_tXMLMap_7_TXMLMAP_OUT++;

											/**
											 * [tXMLMap_7_TXMLMAP_OUT main ]
											 * stop
											 */

										} // End of branch "row29"

										// end for
									}

								} // C_01

							} // End of branch "logxml4"

						} // End of branch "row25"

						/**
						 * [tFileInputXML_4 end ] start
						 */

						currentComponent = "tFileInputXML_4";

					}
				}
				globalMap.put("tFileInputXML_4_NB_LINE",
						nb_line_tFileInputXML_4);

				ok_Hash.put("tFileInputXML_4", true);
				end_Hash.put("tFileInputXML_4", System.currentTimeMillis());

				/**
				 * [tFileInputXML_4 end ] stop
				 */

				/**
				 * [tReplace_1 end ] start
				 */

				currentComponent = "tReplace_1";

				globalMap.put("tReplace_1_NB_LINE", nb_line_tReplace_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row25" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tReplace_1", true);
				end_Hash.put("tReplace_1", System.currentTimeMillis());

				/**
				 * [tReplace_1 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row26" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tFileOutputExcel_15 end ] start
				 */

				currentComponent = "tFileOutputExcel_15";

				xlsxTool_tFileOutputExcel_15.writeExcel(
						fileName_tFileOutputExcel_15, true);

				globalMap.put("tFileOutputExcel_15_NB_LINE",
						nb_line_tFileOutputExcel_15);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("logxml4" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_15", true);
				end_Hash.put("tFileOutputExcel_15", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_15 end ] stop
				 */

				/**
				 * [tExtractXMLField_1 end ] start
				 */

				currentComponent = "tExtractXMLField_1";

				globalMap.put("tExtractXMLField_1_NB_LINE",
						nb_line_tExtractXMLField_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row28" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tExtractXMLField_1", true);
				end_Hash.put("tExtractXMLField_1", System.currentTimeMillis());

				/**
				 * [tExtractXMLField_1 end ] stop
				 */

				/**
				 * [tSOAP_6 end ] start
				 */

				currentComponent = "tSOAP_6";

				soapUtil_tSOAP_6.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row29" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tSOAP_6", true);
				end_Hash.put("tSOAP_6", System.currentTimeMillis());

				/**
				 * [tSOAP_6 end ] stop
				 */

				/**
				 * [tXMLMap_7_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_7";

				currentComponent = "tXMLMap_7_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row27" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tXMLMap_7_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_7_TXMLMAP_OUT",
						System.currentTimeMillis());

				/**
				 * [tXMLMap_7_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputExcel_8 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_8", false);
				start_Hash
						.put("tFileOutputExcel_8", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row45" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_8 = 0;

				class BytesLimit65535_tFileOutputExcel_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_8().limitLog4jByte();

				int columnIndex_tFileOutputExcel_8 = 0;

				String fileName_tFileOutputExcel_8 = context.ExcelLogCreados;
				int nb_line_tFileOutputExcel_8 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_8 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_8.setSheet("Creados");
				xlsxTool_tFileOutputExcel_8.setAppend(true, true);
				xlsxTool_tFileOutputExcel_8.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_8.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_8
						.prepareXlsxFile(fileName_tFileOutputExcel_8);

				xlsxTool_tFileOutputExcel_8.setFont("");

				/**
				 * [tFileOutputExcel_8 begin ] stop
				 */

				/**
				 * [tLogRow_12 begin ] start
				 */

				ok_Hash.put("tLogRow_12", false);
				start_Hash.put("tLogRow_12", System.currentTimeMillis());

				currentComponent = "tLogRow_12";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("creados4" + iterateId,
								0, 0);

					}
				}

				int tos_count_tLogRow_12 = 0;

				class BytesLimit65535_tLogRow_12 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_12().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_12 = "|";
				java.io.PrintStream consoleOut_tLogRow_12 = null;

				StringBuilder sbHeader_tLogRow_12 = new StringBuilder();

				sbHeader_tLogRow_12.append("IDCaso");

				sbHeader_tLogRow_12.append("\t");

				sbHeader_tLogRow_12.append("RadNumber");

				sbHeader_tLogRow_12.append("\t");

				sbHeader_tLogRow_12.append("NombreProceso");

				sbHeader_tLogRow_12.append("\t");

				sbHeader_tLogRow_12.append("Fecha");

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_12 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_12 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_12);
				}
				consoleOut_tLogRow_12.println(sbHeader_tLogRow_12.toString());
				consoleOut_tLogRow_12.flush();

				StringBuilder strBuffer_tLogRow_12 = null;
				int nb_line_tLogRow_12 = 0;
				// /////////////////////

				/**
				 * [tLogRow_12 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_9 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_9", false);
				start_Hash
						.put("tFileOutputExcel_9", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row46" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_9 = 0;

				class BytesLimit65535_tFileOutputExcel_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_9().limitLog4jByte();

				int columnIndex_tFileOutputExcel_9 = 0;

				String fileName_tFileOutputExcel_9 = context.ExcelLogFallidos;
				int nb_line_tFileOutputExcel_9 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_9 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_9.setSheet("Fallidos");
				xlsxTool_tFileOutputExcel_9.setAppend(true, true);
				xlsxTool_tFileOutputExcel_9.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_9.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_9
						.prepareXlsxFile(fileName_tFileOutputExcel_9);

				xlsxTool_tFileOutputExcel_9.setFont("");

				/**
				 * [tFileOutputExcel_9 begin ] stop
				 */

				/**
				 * [tLogRow_13 begin ] start
				 */

				ok_Hash.put("tLogRow_13", false);
				start_Hash.put("tLogRow_13", System.currentTimeMillis());

				currentComponent = "tLogRow_13";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("fallidos4" + iterateId,
								0, 0);

					}
				}

				int tos_count_tLogRow_13 = 0;

				class BytesLimit65535_tLogRow_13 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_13().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_13 = "|";
				java.io.PrintStream consoleOut_tLogRow_13 = null;

				StringBuilder strBuffer_tLogRow_13 = null;
				int nb_line_tLogRow_13 = 0;
				// /////////////////////

				/**
				 * [tLogRow_13 begin ] stop
				 */

				/**
				 * [tXMLMap_7_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_7_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_7_TXMLMAP_IN",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_7";

				currentComponent = "tXMLMap_7_TXMLMAP_IN";

				int tos_count_tXMLMap_7_TXMLMAP_IN = 0;

				class BytesLimit65535_tXMLMap_7_TXMLMAP_IN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_7_TXMLMAP_IN().limitLog4jByte();
				java.util.List<Object> outs_tXMLMap_7 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_7");
				for (Object row_out_tXMLMap_7_TXMLMAP_IN : outs_tXMLMap_7) {// TD512

					/**
					 * [tXMLMap_7_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_7_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_7";

					currentComponent = "tXMLMap_7_TXMLMAP_IN";

					creados4 = null;
					if (row_out_tXMLMap_7_TXMLMAP_IN != null
							&& row_out_tXMLMap_7_TXMLMAP_IN instanceof creados4Struct) {
						creados4 = (creados4Struct) row_out_tXMLMap_7_TXMLMAP_IN;
					}
					fallidos4 = null;
					if (row_out_tXMLMap_7_TXMLMAP_IN != null
							&& row_out_tXMLMap_7_TXMLMAP_IN instanceof fallidos4Struct) {
						fallidos4 = (fallidos4Struct) row_out_tXMLMap_7_TXMLMAP_IN;
					}

					tos_count_tXMLMap_7_TXMLMAP_IN++;

					/**
					 * [tXMLMap_7_TXMLMAP_IN main ] stop
					 */
					// Start of branch "creados4"
					if (creados4 != null) {

						/**
						 * [tLogRow_12 main ] start
						 */

						currentComponent = "tLogRow_12";

						// creados4
						// creados4

						if (execStat) {
							runStat.updateStatOnConnection("creados4"
									+ iterateId, 1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_12 = new StringBuilder();

						if (creados4.IDCaso != null) { //

							strBuffer_tLogRow_12.append(String
									.valueOf(creados4.IDCaso));

						} //

						strBuffer_tLogRow_12.append("|");

						if (creados4.RadNumber != null) { //

							strBuffer_tLogRow_12.append(String
									.valueOf(creados4.RadNumber));

						} //

						strBuffer_tLogRow_12.append("|");

						if (creados4.NombreProceso != null) { //

							strBuffer_tLogRow_12.append(String
									.valueOf(creados4.NombreProceso));

						} //

						strBuffer_tLogRow_12.append("|");

						if (creados4.Fecha != null) { //

							strBuffer_tLogRow_12.append(String
									.valueOf(creados4.Fecha));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_12 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_12 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_12);
						}
						consoleOut_tLogRow_12.println(strBuffer_tLogRow_12
								.toString());
						consoleOut_tLogRow_12.flush();
						nb_line_tLogRow_12++;
						// ////

						// ////

						// /////////////////////

						row45 = creados4;

						tos_count_tLogRow_12++;

						/**
						 * [tLogRow_12 main ] stop
						 */

						/**
						 * [tFileOutputExcel_8 main ] start
						 */

						currentComponent = "tFileOutputExcel_8";

						// row45
						// row45

						if (execStat) {
							runStat.updateStatOnConnection("row45" + iterateId,
									1, 1);
						}

						xlsxTool_tFileOutputExcel_8.addRow();

						if (row45.IDCaso != null) {

							xlsxTool_tFileOutputExcel_8.addCellValue(Double
									.parseDouble(String.valueOf(row45.IDCaso)));
						} else {
							xlsxTool_tFileOutputExcel_8.addCellNullValue();
						}

						if (row45.RadNumber != null) {

							xlsxTool_tFileOutputExcel_8.addCellValue(Double
									.parseDouble(String
											.valueOf(row45.RadNumber)));
						} else {
							xlsxTool_tFileOutputExcel_8.addCellNullValue();
						}

						if (row45.NombreProceso != null) {

							xlsxTool_tFileOutputExcel_8.addCellValue(String
									.valueOf(row45.NombreProceso));
						} else {
							xlsxTool_tFileOutputExcel_8.addCellNullValue();
						}

						if (row45.Fecha != null) {

							xlsxTool_tFileOutputExcel_8.addCellValue(String
									.valueOf(row45.Fecha));
						} else {
							xlsxTool_tFileOutputExcel_8.addCellNullValue();
						}

						nb_line_tFileOutputExcel_8++;

						tos_count_tFileOutputExcel_8++;

						/**
						 * [tFileOutputExcel_8 main ] stop
						 */

					} // End of branch "creados4"

					// Start of branch "fallidos4"
					if (fallidos4 != null) {

						/**
						 * [tLogRow_13 main ] start
						 */

						currentComponent = "tLogRow_13";

						// fallidos4
						// fallidos4

						if (execStat) {
							runStat.updateStatOnConnection("fallidos4"
									+ iterateId, 1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_13 = new StringBuilder();

						if (fallidos4.CodigoError != null) { //

							strBuffer_tLogRow_13.append(String
									.valueOf(fallidos4.CodigoError));

						} //

						strBuffer_tLogRow_13.append("|");

						if (fallidos4.MensajeError != null) { //

							strBuffer_tLogRow_13.append(String
									.valueOf(fallidos4.MensajeError));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_13 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_13);
						}
						consoleOut_tLogRow_13.println(strBuffer_tLogRow_13
								.toString());
						consoleOut_tLogRow_13.flush();
						nb_line_tLogRow_13++;
						// ////

						// ////

						// /////////////////////

						row46 = fallidos4;

						tos_count_tLogRow_13++;

						/**
						 * [tLogRow_13 main ] stop
						 */

						/**
						 * [tFileOutputExcel_9 main ] start
						 */

						currentComponent = "tFileOutputExcel_9";

						// row46
						// row46

						if (execStat) {
							runStat.updateStatOnConnection("row46" + iterateId,
									1, 1);
						}

						xlsxTool_tFileOutputExcel_9.addRow();

						if (row46.CodigoError != null) {

							xlsxTool_tFileOutputExcel_9.addCellValue(String
									.valueOf(row46.CodigoError));
						} else {
							xlsxTool_tFileOutputExcel_9.addCellNullValue();
						}

						if (row46.MensajeError != null) {

							xlsxTool_tFileOutputExcel_9.addCellValue(String
									.valueOf(row46.MensajeError));
						} else {
							xlsxTool_tFileOutputExcel_9.addCellNullValue();
						}

						nb_line_tFileOutputExcel_9++;

						tos_count_tFileOutputExcel_9++;

						/**
						 * [tFileOutputExcel_9 main ] stop
						 */

					} // End of branch "fallidos4"

					/**
					 * [tXMLMap_7_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_7";

					currentComponent = "tXMLMap_7_TXMLMAP_IN";

				}// TD512

				ok_Hash.put("tXMLMap_7_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_7_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_7_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tLogRow_12 end ] start
				 */

				currentComponent = "tLogRow_12";

				// ////
				// ////
				globalMap.put("tLogRow_12_NB_LINE", nb_line_tLogRow_12);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("creados4" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tLogRow_12", true);
				end_Hash.put("tLogRow_12", System.currentTimeMillis());

				/**
				 * [tLogRow_12 end ] stop
				 */

				/**
				 * [tFileOutputExcel_8 end ] start
				 */

				currentComponent = "tFileOutputExcel_8";

				xlsxTool_tFileOutputExcel_8.writeExcel(
						fileName_tFileOutputExcel_8, true);

				globalMap.put("tFileOutputExcel_8_NB_LINE",
						nb_line_tFileOutputExcel_8);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row45" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_8", true);
				end_Hash.put("tFileOutputExcel_8", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_8 end ] stop
				 */

				/**
				 * [tLogRow_13 end ] start
				 */

				currentComponent = "tLogRow_13";

				// ////
				// ////
				globalMap.put("tLogRow_13_NB_LINE", nb_line_tLogRow_13);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("fallidos4" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tLogRow_13", true);
				end_Hash.put("tLogRow_13", System.currentTimeMillis());

				/**
				 * [tLogRow_13 end ] stop
				 */

				/**
				 * [tFileOutputExcel_9 end ] start
				 */

				currentComponent = "tFileOutputExcel_9";

				xlsxTool_tFileOutputExcel_9.writeExcel(
						fileName_tFileOutputExcel_9, true);

				globalMap.put("tFileOutputExcel_9_NB_LINE",
						nb_line_tFileOutputExcel_9);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row46" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_9", true);
				end_Hash.put("tFileOutputExcel_9", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_4 finally ] start
				 */

				currentComponent = "tFileInputXML_4";

				/**
				 * [tFileInputXML_4 finally ] stop
				 */

				/**
				 * [tReplace_1 finally ] start
				 */

				currentComponent = "tReplace_1";

				/**
				 * [tReplace_1 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_15 finally ] start
				 */

				currentComponent = "tFileOutputExcel_15";

				/**
				 * [tFileOutputExcel_15 finally ] stop
				 */

				/**
				 * [tExtractXMLField_1 finally ] start
				 */

				currentComponent = "tExtractXMLField_1";

				/**
				 * [tExtractXMLField_1 finally ] stop
				 */

				/**
				 * [tSOAP_6 finally ] start
				 */

				currentComponent = "tSOAP_6";

				/**
				 * [tSOAP_6 finally ] stop
				 */

				/**
				 * [tXMLMap_7_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_7";

				currentComponent = "tXMLMap_7_TXMLMAP_OUT";

				/**
				 * [tXMLMap_7_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_7_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_7";

				currentComponent = "tXMLMap_7_TXMLMAP_IN";

				/**
				 * [tXMLMap_7_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tLogRow_12 finally ] start
				 */

				currentComponent = "tLogRow_12";

				/**
				 * [tLogRow_12 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_8 finally ] start
				 */

				currentComponent = "tFileOutputExcel_8";

				/**
				 * [tFileOutputExcel_8 finally ] stop
				 */

				/**
				 * [tLogRow_13 finally ] start
				 */

				currentComponent = "tLogRow_13";

				/**
				 * [tLogRow_13 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_9 finally ] start
				 */

				currentComponent = "tFileOutputExcel_9";

				/**
				 * [tFileOutputExcel_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_4_SUBPROCESS_STATE", 1);
	}

	public static class lookupOrigenStruct implements
			routines.system.IPersistableComparableLookupRow<lookupOrigenStruct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_Origen;

		public Integer getID_Origen() {
			return this.ID_Origen;
		}

		public String NombreOrigen;

		public String getNombreOrigen() {
			return this.NombreOrigen;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.NombreOrigen == null) ? 0 : this.NombreOrigen
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lookupOrigenStruct other = (lookupOrigenStruct) obj;

			if (this.NombreOrigen == null) {
				if (other.NombreOrigen != null)
					return false;

			} else if (!this.NombreOrigen.equals(other.NombreOrigen))

				return false;

			return true;
		}

		public void copyDataTo(lookupOrigenStruct other) {

			other.ID_Origen = this.ID_Origen;
			other.NombreOrigen = this.NombreOrigen;

		}

		public void copyKeysDataTo(lookupOrigenStruct other) {

			other.NombreOrigen = this.NombreOrigen;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.NombreOrigen = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NombreOrigen, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ID_Origen = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ID_Origen, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Origen=" + String.valueOf(ID_Origen));
			sb.append(",NombreOrigen=" + NombreOrigen);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lookupOrigenStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NombreOrigen,
					other.NombreOrigen);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLOrigen;

		public String getXMLOrigen() {
			return this.XMLOrigen;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLOrigen = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLOrigen, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLOrigen=" + XMLOrigen);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				row11Struct row11 = new row11Struct();
				lookupOrigenStruct lookupOrigen = new lookupOrigenStruct();

				/**
				 * [tXMLMap_2_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_2_TXMLMAP_OUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tXMLMap_2_TXMLMAP_OUT = 0;

				class BytesLimit65535_tXMLMap_2_TXMLMAP_OUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_2_TXMLMAP_OUT().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_2_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_2_TXMLMAP_OUT__Struct {
				}
				Var__tXMLMap_2_TXMLMAP_OUT__Struct Var__tXMLMap_2_TXMLMAP_OUT = new Var__tXMLMap_2_TXMLMAP_OUT__Struct();
				// ###############################
				// # Outputs initialization
				lookupOrigenStruct lookupOrigen_tmp = new lookupOrigenStruct();
				lookupOrigenStruct lookupOrigen_save = null;
				// the aggregate variable
				lookupOrigenStruct lookupOrigen_aggregate = null;
				// init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_2 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_2",
						allOutsForAggregate_tXMLMap_2);
				// ###############################
				class TreeNode_API_tXMLMap_2_TXMLMAP_OUT {
					java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();

					void clear() {
						xpath_value_map.clear();
					}

					void put(String xpath, String value) {
						xpath_value_map.put(xpath, value);
					}

					String get_null(String xpath) {
						return null;
					}

					Integer get_Integer(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Integer(content);
					}

					String get_String(String xpath) {
						return xpath_value_map.get(xpath);
					}
				}
				TreeNode_API_tXMLMap_2_TXMLMAP_OUT treeNodeAPI_tXMLMap_2_TXMLMAP_OUT = new TreeNode_API_tXMLMap_2_TXMLMAP_OUT();
				NameSpaceTool nsTool_tXMLMap_2_TXMLMAP_OUT = new NameSpaceTool();
				int nb_line_tXMLMap_2_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_2_TXMLMAP_OUT xml_api_tXMLMap_2_TXMLMAP_OUT = new XML_API_tXMLMap_2_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_2_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				/**
				 * [tXMLMap_2_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tSOAP_2 begin ] start
				 */

				ok_Hash.put("tSOAP_2", false);
				start_Hash.put("tSOAP_2", System.currentTimeMillis());

				currentComponent = "tSOAP_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tSOAP_2 = 0;

				class BytesLimit65535_tSOAP_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSOAP_2().limitLog4jByte();
				org.talend.soap.SOAPUtil soapUtil_tSOAP_2 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_2 begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				class BytesLimit65535_tFileInputXML_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputXML_1().limitLog4jByte();

				int nb_line_tFileInputXML_1 = 0;

				String os_tFileInputXML_1 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1
						|| os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class NameSpaceTool_tFileInputXML_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression,
							String basePath) {
						return util.addDefaultNSPrefix(relativeXpression,
								basePath);
					}

				}

				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = context.XMLOrigen;
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null
						&& filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_1 = true;
				org.dom4j.Document doc_tFileInputXML_1 = null;
				java.io.Closeable toClose_tFileInputXML_1 = null;
				try {
					if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream) filename_tFileInputXML_1;
						toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(inputStream_tFileInputXML_1);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_1)),
								"ISO-8859-15");
						toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
						org.xml.sax.InputSource in_tFileInputXML_1 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_1);
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(in_tFileInputXML_1);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_1 = false;
				} finally {
					if (toClose_tFileInputXML_1 != null) {
						toClose_tFileInputXML_1.close();
					}
				}
				if (isValidFile_tFileInputXML_1) {
					NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
					nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("/"));
					x_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_1
							.selectNodes(doc_tFileInputXML_1);
					XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
					String str_tFileInputXML_1 = "";
					org.dom4j.Node node_tFileInputXML_1 = null;

					// init all mapping xpaths
					java.util.Map<Integer, org.dom4j.XPath> xpaths_tFileInputXML_1 = new java.util.HashMap<Integer, org.dom4j.XPath>();
					class XPathUtil_tFileInputXML_1 {

						public void initXPaths_0(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_1 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("/",
											"/"));
							xpath_0.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(0, xpath_0);

						}

						public void initXPaths(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_1 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							initXPaths_0(xpaths, nsTool, xmlNameSpaceMap);

						}
					}
					XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
					xPathUtil_tFileInputXML_1.initXPaths(
							xpaths_tFileInputXML_1, nsTool_tFileInputXML_1,
							xmlNameSpaceMap_tFileInputXML_1);
					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_1 : nodeList_tFileInputXML_1) {
						nb_line_tFileInputXML_1++;
						row9 = null;
						boolean whetherReject_tFileInputXML_1 = false;
						row9 = new row9Struct();
						try {
							Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1
									.get(0).evaluate(temp_tFileInputXML_1);
							if (obj0_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = null;

							} else if (obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj0_tFileInputXML_1;
								str_tFileInputXML_1 = node_tFileInputXML_1
										.asXML();
							} else if (obj0_tFileInputXML_1 instanceof String
									|| obj0_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj0_tFileInputXML_1);
							} else if (obj0_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? null
										: node_tFileInputXML_1.asXML();
							}
							row9.XMLOrigen = str_tFileInputXML_1;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_1 = true;
							System.err.println(e.getMessage());
							row9 = null;
						}

						/**
						 * [tFileInputXML_1 begin ] stop
						 */

						/**
						 * [tFileInputXML_1 main ] start
						 */

						currentComponent = "tFileInputXML_1";

						tos_count_tFileInputXML_1++;

						/**
						 * [tFileInputXML_1 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tSOAP_2 main ] start
							 */

							currentComponent = "tSOAP_2";

							// row9
							// row9

							if (execStat) {
								runStat.updateStatOnConnection("row9"
										+ iterateId, 1, 1);
							}

							String document_tSOAP_2 = soapUtil_tSOAP_2
									.extractContentAsDocument(
											org.talend.soap.SOAPUtil.SOAP11,
											"http://"
													+ context.BIZhost
													+ "/"
													+ context.BIZprocesoWorkflow
													+ "/webservices/entitymanagersoa.asmx",
											"http://tempuri.org/getEntities",
											row9.XMLOrigen.toString());

							// for output

							row11 = new row11Struct();

							row11.Soap = ParserUtils
									.parseTo_Document(document_tSOAP_2);

							tos_count_tSOAP_2++;

							/**
							 * [tSOAP_2 main ] stop
							 */

							/**
							 * [tXMLMap_2_TXMLMAP_OUT main ] start
							 */

							currentVirtualComponent = "tXMLMap_2";

							currentComponent = "tXMLMap_2_TXMLMAP_OUT";

							// row11
							// row11

							if (execStat) {
								runStat.updateStatOnConnection("row11"
										+ iterateId, 1, 1);
							}

							boolean rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
							boolean rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
							boolean mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
							boolean isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;

							// init document to flat tool
							routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT = new routines.system.DocumentToFlat();
							docToFlat_tXMLMap_2_TXMLMAP_OUT
									.setOriginalLoop("/soap:Envelope/soap:Body/getEntitiesResponse/getEntitiesResult/BizAgiWSResponse/Entities/P_TipoOrigen");
							docToFlat_tXMLMap_2_TXMLMAP_OUT
									.setIsOptional(false);
							if (row11.Soap == null
									|| row11.Soap.getDocument() == null) {
								throw new RuntimeException(
										"row11.Soap can't be empty");
							}
							org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT = row11.Soap
									.getDocument();
							docToFlat_tXMLMap_2_TXMLMAP_OUT
									.setDoc(doc_tXMLMap_2_TXMLMAP_OUT);
							docToFlat_tXMLMap_2_TXMLMAP_OUT.setDefineNS(false);
							docToFlat_tXMLMap_2_TXMLMAP_OUT
									.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);

							// old version, find NS from doc
							nsTool_tXMLMap_2_TXMLMAP_OUT
									.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT
											.getRootElement());
							java.util.HashMap<String, String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;

							docToFlat_tXMLMap_2_TXMLMAP_OUT
									.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT);

							String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[2];
							String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[2];

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "row11.Soap:/soap:Envelope/soap:Body/getEntitiesResponse/getEntitiesResult/BizAgiWSResponse/Entities/P_TipoOrigen/@key";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "@key";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[1] = "row11.Soap:/soap:Envelope/soap:Body/getEntitiesResponse/getEntitiesResult/BizAgiWSResponse/Entities/P_TipoOrigen/Origen";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[1] = "Origen";

							docToFlat_tXMLMap_2_TXMLMAP_OUT
									.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT);
							docToFlat_tXMLMap_2_TXMLMAP_OUT
									.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT);
							// generate document to flat data
							docToFlat_tXMLMap_2_TXMLMAP_OUT.flat();
							// get flat data
							java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT = docToFlat_tXMLMap_2_TXMLMAP_OUT
									.getResultSet();

							for (java.util.Map<String, String> oneRow_tXMLMap_2_TXMLMAP_OUT : resultSet_tXMLMap_2_TXMLMAP_OUT) { // G_TXM_M_001
								nb_line_tXMLMap_2_TXMLMAP_OUT++;
								rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
								rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
								mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
								isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;

								treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
								for (java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT : oneRow_tXMLMap_2_TXMLMAP_OUT
										.entrySet()) {
									treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(
											entry_tXMLMap_2_TXMLMAP_OUT
													.getKey(),
											entry_tXMLMap_2_TXMLMAP_OUT
													.getValue());
								}

								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
									// ###############################
									// # Output tables

									lookupOrigen = null;

									// # Output table : 'lookupOrigen'

									lookupOrigen_tmp = new lookupOrigenStruct();
									lookupOrigen_tmp.ID_Origen = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Integer("row11.Soap:/soap:Envelope/soap:Body/getEntitiesResponse/getEntitiesResult/BizAgiWSResponse/Entities/P_TipoOrigen/@key");
									lookupOrigen_tmp.NombreOrigen = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row11.Soap:/soap:Envelope/soap:Body/getEntitiesResponse/getEntitiesResult/BizAgiWSResponse/Entities/P_TipoOrigen/Origen");
									allOutsForAggregate_tXMLMap_2
											.add(lookupOrigen_tmp);

									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

							}// G_TXM_M_001 close

							tos_count_tXMLMap_2_TXMLMAP_OUT++;

							/**
							 * [tXMLMap_2_TXMLMAP_OUT main ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFileInputXML_1 end ] start
						 */

						currentComponent = "tFileInputXML_1";

					}
				}
				globalMap.put("tFileInputXML_1_NB_LINE",
						nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tSOAP_2 end ] start
				 */

				currentComponent = "tSOAP_2";

				soapUtil_tSOAP_2.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tSOAP_2", true);
				end_Hash.put("tSOAP_2", System.currentTimeMillis());

				/**
				 * [tSOAP_2 end ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_2_TXMLMAP_OUT",
						System.currentTimeMillis());

				/**
				 * [tXMLMap_2_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tAdvancedHash_lookupOrigen begin ] start
				 */

				ok_Hash.put("tAdvancedHash_lookupOrigen", false);
				start_Hash.put("tAdvancedHash_lookupOrigen",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_lookupOrigen";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lookupOrigen"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_lookupOrigen = 0;

				class BytesLimit65535_tAdvancedHash_lookupOrigen {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_lookupOrigen()
						.limitLog4jByte();

				// connection name:lookupOrigen
				// source node:tXMLMap_2_TXMLMAP_IN - inputs:(OnRowsEnd)
				// outputs:(lookupOrigen,lookupOrigen) | target
				// node:tAdvancedHash_lookupOrigen - inputs:(lookupOrigen)
				// outputs:()
				// linked node: tMap_3 -
				// inputs:(excel1,lookupOrigen,lookupFlagFoto)
				// outputs:(aceptados,rechazados2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_lookupOrigen = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupOrigenStruct> tHash_Lookup_lookupOrigen = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<lookupOrigenStruct> getLookup(matchingModeEnum_lookupOrigen);

				globalMap.put("tHash_Lookup_lookupOrigen",
						tHash_Lookup_lookupOrigen);

				/**
				 * [tAdvancedHash_lookupOrigen begin ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_2_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_2_TXMLMAP_IN",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_IN";

				int tos_count_tXMLMap_2_TXMLMAP_IN = 0;

				class BytesLimit65535_tXMLMap_2_TXMLMAP_IN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_2_TXMLMAP_IN().limitLog4jByte();
				java.util.List<Object> outs_tXMLMap_2 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_2");
				for (Object row_out_tXMLMap_2_TXMLMAP_IN : outs_tXMLMap_2) {// TD512

					/**
					 * [tXMLMap_2_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_2_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_IN";

					lookupOrigen = null;
					if (row_out_tXMLMap_2_TXMLMAP_IN != null
							&& row_out_tXMLMap_2_TXMLMAP_IN instanceof lookupOrigenStruct) {
						lookupOrigen = (lookupOrigenStruct) row_out_tXMLMap_2_TXMLMAP_IN;
					}

					tos_count_tXMLMap_2_TXMLMAP_IN++;

					/**
					 * [tXMLMap_2_TXMLMAP_IN main ] stop
					 */
					// Start of branch "lookupOrigen"
					if (lookupOrigen != null) {

						/**
						 * [tAdvancedHash_lookupOrigen main ] start
						 */

						currentComponent = "tAdvancedHash_lookupOrigen";

						// lookupOrigen
						// lookupOrigen

						if (execStat) {
							runStat.updateStatOnConnection("lookupOrigen"
									+ iterateId, 1, 1);
						}

						lookupOrigenStruct lookupOrigen_HashRow = new lookupOrigenStruct();

						lookupOrigen_HashRow.ID_Origen = lookupOrigen.ID_Origen;

						lookupOrigen_HashRow.NombreOrigen = lookupOrigen.NombreOrigen;

						tHash_Lookup_lookupOrigen.put(lookupOrigen_HashRow);

						tos_count_tAdvancedHash_lookupOrigen++;

						/**
						 * [tAdvancedHash_lookupOrigen main ] stop
						 */

					} // End of branch "lookupOrigen"

					/**
					 * [tXMLMap_2_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_IN";

				}// TD512

				ok_Hash.put("tXMLMap_2_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_2_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tAdvancedHash_lookupOrigen end ] start
				 */

				currentComponent = "tAdvancedHash_lookupOrigen";

				tHash_Lookup_lookupOrigen.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lookupOrigen"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_lookupOrigen", true);
				end_Hash.put("tAdvancedHash_lookupOrigen",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_lookupOrigen end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_1 finally ] start
				 */

				currentComponent = "tFileInputXML_1";

				/**
				 * [tFileInputXML_1 finally ] stop
				 */

				/**
				 * [tSOAP_2 finally ] start
				 */

				currentComponent = "tSOAP_2";

				/**
				 * [tSOAP_2 finally ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				/**
				 * [tXMLMap_2_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_IN";

				/**
				 * [tXMLMap_2_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tAdvancedHash_lookupOrigen finally ] start
				 */

				currentComponent = "tAdvancedHash_lookupOrigen";

				/**
				 * [tAdvancedHash_lookupOrigen finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}

	public static class lookupFlagFotoStruct
			implements
			routines.system.IPersistableComparableLookupRow<lookupFlagFotoStruct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_FlagFoto;

		public Integer getID_FlagFoto() {
			return this.ID_FlagFoto;
		}

		public String NombreFlagFoto;

		public String getNombreFlagFoto() {
			return this.NombreFlagFoto;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.NombreFlagFoto == null) ? 0
								: this.NombreFlagFoto.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lookupFlagFotoStruct other = (lookupFlagFotoStruct) obj;

			if (this.NombreFlagFoto == null) {
				if (other.NombreFlagFoto != null)
					return false;

			} else if (!this.NombreFlagFoto.equals(other.NombreFlagFoto))

				return false;

			return true;
		}

		public void copyDataTo(lookupFlagFotoStruct other) {

			other.ID_FlagFoto = this.ID_FlagFoto;
			other.NombreFlagFoto = this.NombreFlagFoto;

		}

		public void copyKeysDataTo(lookupFlagFotoStruct other) {

			other.NombreFlagFoto = this.NombreFlagFoto;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.NombreFlagFoto = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NombreFlagFoto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ID_FlagFoto = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ID_FlagFoto, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_FlagFoto=" + String.valueOf(ID_FlagFoto));
			sb.append(",NombreFlagFoto=" + NombreFlagFoto);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lookupFlagFotoStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NombreFlagFoto,
					other.NombreFlagFoto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLFlagFoto;

		public String getXMLFlagFoto() {
			return this.XMLFlagFoto;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLFlagFoto = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLFlagFoto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLFlagFoto=" + XMLFlagFoto);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row6Struct row6 = new row6Struct();
				lookupFlagFotoStruct lookupFlagFoto = new lookupFlagFotoStruct();

				/**
				 * [tXMLMap_3_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_3_TXMLMAP_OUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_3";

				currentComponent = "tXMLMap_3_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tXMLMap_3_TXMLMAP_OUT = 0;

				class BytesLimit65535_tXMLMap_3_TXMLMAP_OUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_3_TXMLMAP_OUT().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_3_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_3_TXMLMAP_OUT__Struct {
				}
				Var__tXMLMap_3_TXMLMAP_OUT__Struct Var__tXMLMap_3_TXMLMAP_OUT = new Var__tXMLMap_3_TXMLMAP_OUT__Struct();
				// ###############################
				// # Outputs initialization
				lookupFlagFotoStruct lookupFlagFoto_tmp = new lookupFlagFotoStruct();
				lookupFlagFotoStruct lookupFlagFoto_save = null;
				// the aggregate variable
				lookupFlagFotoStruct lookupFlagFoto_aggregate = null;
				// init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_3 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_3",
						allOutsForAggregate_tXMLMap_3);
				// ###############################
				class TreeNode_API_tXMLMap_3_TXMLMAP_OUT {
					java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();

					void clear() {
						xpath_value_map.clear();
					}

					void put(String xpath, String value) {
						xpath_value_map.put(xpath, value);
					}

					String get_null(String xpath) {
						return null;
					}

					Integer get_Integer(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Integer(content);
					}

					String get_String(String xpath) {
						return xpath_value_map.get(xpath);
					}
				}
				TreeNode_API_tXMLMap_3_TXMLMAP_OUT treeNodeAPI_tXMLMap_3_TXMLMAP_OUT = new TreeNode_API_tXMLMap_3_TXMLMAP_OUT();
				NameSpaceTool nsTool_tXMLMap_3_TXMLMAP_OUT = new NameSpaceTool();
				int nb_line_tXMLMap_3_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_3_TXMLMAP_OUT xml_api_tXMLMap_3_TXMLMAP_OUT = new XML_API_tXMLMap_3_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_3_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				/**
				 * [tXMLMap_3_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tSOAP_3 begin ] start
				 */

				ok_Hash.put("tSOAP_3", false);
				start_Hash.put("tSOAP_3", System.currentTimeMillis());

				currentComponent = "tSOAP_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tSOAP_3 = 0;

				class BytesLimit65535_tSOAP_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSOAP_3().limitLog4jByte();
				org.talend.soap.SOAPUtil soapUtil_tSOAP_3 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_3 begin ] stop
				 */

				/**
				 * [tFileInputXML_2 begin ] start
				 */

				ok_Hash.put("tFileInputXML_2", false);
				start_Hash.put("tFileInputXML_2", System.currentTimeMillis());

				currentComponent = "tFileInputXML_2";

				int tos_count_tFileInputXML_2 = 0;

				class BytesLimit65535_tFileInputXML_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputXML_2().limitLog4jByte();

				int nb_line_tFileInputXML_2 = 0;

				String os_tFileInputXML_2 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_2 = false;
				if (os_tFileInputXML_2.indexOf("windows") > -1
						|| os_tFileInputXML_2.indexOf("nt") > -1) {
					isWindows_tFileInputXML_2 = true;
				}
				class NameSpaceTool_tFileInputXML_2 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression,
							String basePath) {
						return util.addDefaultNSPrefix(relativeXpression,
								basePath);
					}

				}

				class XML_API_tFileInputXML_2 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_2 = null;
				try {
					filename_tFileInputXML_2 = context.XMLFlagFoto;
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_2 != null
						&& filename_tFileInputXML_2 instanceof String
						&& filename_tFileInputXML_2.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_2) {
						filename_tFileInputXML_2 = filename_tFileInputXML_2
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_2 = true;
				org.dom4j.Document doc_tFileInputXML_2 = null;
				java.io.Closeable toClose_tFileInputXML_2 = null;
				try {
					if (filename_tFileInputXML_2 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream) filename_tFileInputXML_2;
						toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
						doc_tFileInputXML_2 = reader_tFileInputXML_2
								.read(inputStream_tFileInputXML_2);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_2)),
								"ISO-8859-15");
						toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
						org.xml.sax.InputSource in_tFileInputXML_2 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_2);
						doc_tFileInputXML_2 = reader_tFileInputXML_2
								.read(in_tFileInputXML_2);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_2 = false;
				} finally {
					if (toClose_tFileInputXML_2 != null) {
						toClose_tFileInputXML_2.close();
					}
				}
				if (isValidFile_tFileInputXML_2) {
					NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
					nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2
							.createXPath(nsTool_tFileInputXML_2
									.addDefaultNSPrefix("/"));
					x_tFileInputXML_2
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_2
							.selectNodes(doc_tFileInputXML_2);
					XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
					String str_tFileInputXML_2 = "";
					org.dom4j.Node node_tFileInputXML_2 = null;

					// init all mapping xpaths
					java.util.Map<Integer, org.dom4j.XPath> xpaths_tFileInputXML_2 = new java.util.HashMap<Integer, org.dom4j.XPath>();
					class XPathUtil_tFileInputXML_2 {

						public void initXPaths_0(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_2 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("/",
											"/"));
							xpath_0.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(0, xpath_0);

						}

						public void initXPaths(
								java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_2 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							initXPaths_0(xpaths, nsTool, xmlNameSpaceMap);

						}
					}
					XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
					xPathUtil_tFileInputXML_2.initXPaths(
							xpaths_tFileInputXML_2, nsTool_tFileInputXML_2,
							xmlNameSpaceMap_tFileInputXML_2);
					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_2 : nodeList_tFileInputXML_2) {
						nb_line_tFileInputXML_2++;
						row1 = null;
						boolean whetherReject_tFileInputXML_2 = false;
						row1 = new row1Struct();
						try {
							Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2
									.get(0).evaluate(temp_tFileInputXML_2);
							if (obj0_tFileInputXML_2 == null) {
								node_tFileInputXML_2 = null;
								str_tFileInputXML_2 = null;

							} else if (obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
								node_tFileInputXML_2 = (org.dom4j.Node) obj0_tFileInputXML_2;
								str_tFileInputXML_2 = node_tFileInputXML_2
										.asXML();
							} else if (obj0_tFileInputXML_2 instanceof String
									|| obj0_tFileInputXML_2 instanceof Number) {
								node_tFileInputXML_2 = temp_tFileInputXML_2;
								str_tFileInputXML_2 = String
										.valueOf(obj0_tFileInputXML_2);
							} else if (obj0_tFileInputXML_2 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_2;
								node_tFileInputXML_2 = nodes_tFileInputXML_2
										.size() > 0 ? nodes_tFileInputXML_2
										.get(0) : null;
								str_tFileInputXML_2 = node_tFileInputXML_2 == null ? null
										: node_tFileInputXML_2.asXML();
							}
							row1.XMLFlagFoto = str_tFileInputXML_2;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_2 = true;
							System.err.println(e.getMessage());
							row1 = null;
						}

						/**
						 * [tFileInputXML_2 begin ] stop
						 */

						/**
						 * [tFileInputXML_2 main ] start
						 */

						currentComponent = "tFileInputXML_2";

						tos_count_tFileInputXML_2++;

						/**
						 * [tFileInputXML_2 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tSOAP_3 main ] start
							 */

							currentComponent = "tSOAP_3";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							String document_tSOAP_3 = soapUtil_tSOAP_3
									.extractContentAsDocument(
											org.talend.soap.SOAPUtil.SOAP11,
											"http://"
													+ context.BIZhost
													+ "/"
													+ context.BIZprocesoWorkflow
													+ "/webservices/entitymanagersoa.asmx",
											"http://tempuri.org/getEntities",
											row1.XMLFlagFoto.toString());

							// for output

							row6 = new row6Struct();

							row6.Soap = ParserUtils
									.parseTo_Document(document_tSOAP_3);

							tos_count_tSOAP_3++;

							/**
							 * [tSOAP_3 main ] stop
							 */

							/**
							 * [tXMLMap_3_TXMLMAP_OUT main ] start
							 */

							currentVirtualComponent = "tXMLMap_3";

							currentComponent = "tXMLMap_3_TXMLMAP_OUT";

							// row6
							// row6

							if (execStat) {
								runStat.updateStatOnConnection("row6"
										+ iterateId, 1, 1);
							}

							boolean rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
							boolean rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
							boolean mainRowRejected_tXMLMap_3_TXMLMAP_OUT = false;
							boolean isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;

							// init document to flat tool
							routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT = new routines.system.DocumentToFlat();
							docToFlat_tXMLMap_3_TXMLMAP_OUT
									.setOriginalLoop("/soap:Envelope/soap:Body/getEntitiesResponse/getEntitiesResult/BizAgiWSResponse/Entities/P_FlagFoto");
							docToFlat_tXMLMap_3_TXMLMAP_OUT
									.setIsOptional(false);
							if (row6.Soap == null
									|| row6.Soap.getDocument() == null) {
								throw new RuntimeException(
										"row6.Soap can't be empty");
							}
							org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT = row6.Soap
									.getDocument();
							docToFlat_tXMLMap_3_TXMLMAP_OUT
									.setDoc(doc_tXMLMap_3_TXMLMAP_OUT);
							docToFlat_tXMLMap_3_TXMLMAP_OUT.setDefineNS(false);
							docToFlat_tXMLMap_3_TXMLMAP_OUT
									.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);

							// old version, find NS from doc
							nsTool_tXMLMap_3_TXMLMAP_OUT
									.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT
											.getRootElement());
							java.util.HashMap<String, String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;

							docToFlat_tXMLMap_3_TXMLMAP_OUT
									.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT);

							String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT = new String[2];
							String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT = new String[2];

							absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[0] = "row6.Soap:/soap:Envelope/soap:Body/getEntitiesResponse/getEntitiesResult/BizAgiWSResponse/Entities/P_FlagFoto/FlagFoto";
							relativePathMappings_tXMLMap_3_TXMLMAP_OUT[0] = "FlagFoto";

							absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[1] = "row6.Soap:/soap:Envelope/soap:Body/getEntitiesResponse/getEntitiesResult/BizAgiWSResponse/Entities/P_FlagFoto/@key";
							relativePathMappings_tXMLMap_3_TXMLMAP_OUT[1] = "@key";

							docToFlat_tXMLMap_3_TXMLMAP_OUT
									.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT);
							docToFlat_tXMLMap_3_TXMLMAP_OUT
									.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT);
							// generate document to flat data
							docToFlat_tXMLMap_3_TXMLMAP_OUT.flat();
							// get flat data
							java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT = docToFlat_tXMLMap_3_TXMLMAP_OUT
									.getResultSet();

							for (java.util.Map<String, String> oneRow_tXMLMap_3_TXMLMAP_OUT : resultSet_tXMLMap_3_TXMLMAP_OUT) { // G_TXM_M_001
								nb_line_tXMLMap_3_TXMLMAP_OUT++;
								rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
								rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
								mainRowRejected_tXMLMap_3_TXMLMAP_OUT = false;
								isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;

								treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
								for (java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT : oneRow_tXMLMap_3_TXMLMAP_OUT
										.entrySet()) {
									treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(
											entry_tXMLMap_3_TXMLMAP_OUT
													.getKey(),
											entry_tXMLMap_3_TXMLMAP_OUT
													.getValue());
								}

								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
									// ###############################
									// # Output tables

									lookupFlagFoto = null;

									// # Output table : 'lookupFlagFoto'

									lookupFlagFoto_tmp = new lookupFlagFotoStruct();
									lookupFlagFoto_tmp.ID_FlagFoto = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT
											.get_Integer("row6.Soap:/soap:Envelope/soap:Body/getEntitiesResponse/getEntitiesResult/BizAgiWSResponse/Entities/P_FlagFoto/@key");
									lookupFlagFoto_tmp.NombreFlagFoto = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT
											.get_String("row6.Soap:/soap:Envelope/soap:Body/getEntitiesResponse/getEntitiesResult/BizAgiWSResponse/Entities/P_FlagFoto/FlagFoto");
									allOutsForAggregate_tXMLMap_3
											.add(lookupFlagFoto_tmp);

									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

							}// G_TXM_M_001 close

							tos_count_tXMLMap_3_TXMLMAP_OUT++;

							/**
							 * [tXMLMap_3_TXMLMAP_OUT main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputXML_2 end ] start
						 */

						currentComponent = "tFileInputXML_2";

					}
				}
				globalMap.put("tFileInputXML_2_NB_LINE",
						nb_line_tFileInputXML_2);

				ok_Hash.put("tFileInputXML_2", true);
				end_Hash.put("tFileInputXML_2", System.currentTimeMillis());

				/**
				 * [tFileInputXML_2 end ] stop
				 */

				/**
				 * [tSOAP_3 end ] start
				 */

				currentComponent = "tSOAP_3";

				soapUtil_tSOAP_3.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tSOAP_3", true);
				end_Hash.put("tSOAP_3", System.currentTimeMillis());

				/**
				 * [tSOAP_3 end ] stop
				 */

				/**
				 * [tXMLMap_3_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_3";

				currentComponent = "tXMLMap_3_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_3_TXMLMAP_OUT",
						System.currentTimeMillis());

				/**
				 * [tXMLMap_3_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tAdvancedHash_lookupFlagFoto begin ] start
				 */

				ok_Hash.put("tAdvancedHash_lookupFlagFoto", false);
				start_Hash.put("tAdvancedHash_lookupFlagFoto",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_lookupFlagFoto";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lookupFlagFoto"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_lookupFlagFoto = 0;

				class BytesLimit65535_tAdvancedHash_lookupFlagFoto {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_lookupFlagFoto()
						.limitLog4jByte();

				// connection name:lookupFlagFoto
				// source node:tXMLMap_3_TXMLMAP_IN - inputs:(OnRowsEnd)
				// outputs:(lookupFlagFoto,lookupFlagFoto) | target
				// node:tAdvancedHash_lookupFlagFoto - inputs:(lookupFlagFoto)
				// outputs:()
				// linked node: tMap_3 -
				// inputs:(excel1,lookupOrigen,lookupFlagFoto)
				// outputs:(aceptados,rechazados2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_lookupFlagFoto = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookupFlagFotoStruct> tHash_Lookup_lookupFlagFoto = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<lookupFlagFotoStruct> getLookup(matchingModeEnum_lookupFlagFoto);

				globalMap.put("tHash_Lookup_lookupFlagFoto",
						tHash_Lookup_lookupFlagFoto);

				/**
				 * [tAdvancedHash_lookupFlagFoto begin ] stop
				 */

				/**
				 * [tXMLMap_3_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_3_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_3_TXMLMAP_IN",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_3";

				currentComponent = "tXMLMap_3_TXMLMAP_IN";

				int tos_count_tXMLMap_3_TXMLMAP_IN = 0;

				class BytesLimit65535_tXMLMap_3_TXMLMAP_IN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_3_TXMLMAP_IN().limitLog4jByte();
				java.util.List<Object> outs_tXMLMap_3 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_3");
				for (Object row_out_tXMLMap_3_TXMLMAP_IN : outs_tXMLMap_3) {// TD512

					/**
					 * [tXMLMap_3_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_3_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_3";

					currentComponent = "tXMLMap_3_TXMLMAP_IN";

					lookupFlagFoto = null;
					if (row_out_tXMLMap_3_TXMLMAP_IN != null
							&& row_out_tXMLMap_3_TXMLMAP_IN instanceof lookupFlagFotoStruct) {
						lookupFlagFoto = (lookupFlagFotoStruct) row_out_tXMLMap_3_TXMLMAP_IN;
					}

					tos_count_tXMLMap_3_TXMLMAP_IN++;

					/**
					 * [tXMLMap_3_TXMLMAP_IN main ] stop
					 */
					// Start of branch "lookupFlagFoto"
					if (lookupFlagFoto != null) {

						/**
						 * [tAdvancedHash_lookupFlagFoto main ] start
						 */

						currentComponent = "tAdvancedHash_lookupFlagFoto";

						// lookupFlagFoto
						// lookupFlagFoto

						if (execStat) {
							runStat.updateStatOnConnection("lookupFlagFoto"
									+ iterateId, 1, 1);
						}

						lookupFlagFotoStruct lookupFlagFoto_HashRow = new lookupFlagFotoStruct();

						lookupFlagFoto_HashRow.ID_FlagFoto = lookupFlagFoto.ID_FlagFoto;

						lookupFlagFoto_HashRow.NombreFlagFoto = lookupFlagFoto.NombreFlagFoto;

						tHash_Lookup_lookupFlagFoto.put(lookupFlagFoto_HashRow);

						tos_count_tAdvancedHash_lookupFlagFoto++;

						/**
						 * [tAdvancedHash_lookupFlagFoto main ] stop
						 */

					} // End of branch "lookupFlagFoto"

					/**
					 * [tXMLMap_3_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_3";

					currentComponent = "tXMLMap_3_TXMLMAP_IN";

				}// TD512

				ok_Hash.put("tXMLMap_3_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_3_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tAdvancedHash_lookupFlagFoto end ] start
				 */

				currentComponent = "tAdvancedHash_lookupFlagFoto";

				tHash_Lookup_lookupFlagFoto.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lookupFlagFoto"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_lookupFlagFoto", true);
				end_Hash.put("tAdvancedHash_lookupFlagFoto",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_lookupFlagFoto end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_2 finally ] start
				 */

				currentComponent = "tFileInputXML_2";

				/**
				 * [tFileInputXML_2 finally ] stop
				 */

				/**
				 * [tSOAP_3 finally ] start
				 */

				currentComponent = "tSOAP_3";

				/**
				 * [tSOAP_3 finally ] stop
				 */

				/**
				 * [tXMLMap_3_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_3";

				currentComponent = "tXMLMap_3_TXMLMAP_OUT";

				/**
				 * [tXMLMap_3_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_3_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_3";

				currentComponent = "tXMLMap_3_TXMLMAP_IN";

				/**
				 * [tXMLMap_3_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tAdvancedHash_lookupFlagFoto finally ] start
				 */

				currentComponent = "tAdvancedHash_lookupFlagFoto";

				/**
				 * [tAdvancedHash_lookupFlagFoto finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}

	public static class row48Struct implements
			routines.system.IPersistableRow<row48Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		public String Node;

		public String getNode() {
			return this.Node;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String Atrib;

		public String getAtrib() {
			return this.Atrib;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.MensajeError = readString(dis);

					this.Node = readString(dis);

					this.Path = readString(dis);

					this.Atrib = readString(dis);

					this.Value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MensajeError, dos);

				// String

				writeString(this.Node, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.Atrib, dos);

				// String

				writeString(this.Value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MensajeError=" + MensajeError);
			sb.append(",Node=" + Node);
			sb.append(",Path=" + Path);
			sb.append(",Atrib=" + Atrib);
			sb.append(",Value=" + Value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row47Struct implements
			routines.system.IPersistableRow<row47Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public Integer IDCaso;

		public Integer getIDCaso() {
			return this.IDCaso;
		}

		public String RadNumber;

		public String getRadNumber() {
			return this.RadNumber;
		}

		public String NombreProceso;

		public String getNombreProceso() {
			return this.NombreProceso;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.IDCaso = readInteger(dis);

					this.RadNumber = readString(dis);

					this.NombreProceso = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCaso, dos);

				// String

				writeString(this.RadNumber, dos);

				// String

				writeString(this.NombreProceso, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCaso=" + String.valueOf(IDCaso));
			sb.append(",RadNumber=" + RadNumber);
			sb.append(",NombreProceso=" + NombreProceso);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row47Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class correctosStruct implements
			routines.system.IPersistableRow<correctosStruct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public Integer IDCaso;

		public Integer getIDCaso() {
			return this.IDCaso;
		}

		public String RadNumber;

		public String getRadNumber() {
			return this.RadNumber;
		}

		public String NombreProceso;

		public String getNombreProceso() {
			return this.NombreProceso;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.IDCaso = readInteger(dis);

					this.RadNumber = readString(dis);

					this.NombreProceso = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCaso, dos);

				// String

				writeString(this.RadNumber, dos);

				// String

				writeString(this.NombreProceso, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCaso=" + String.valueOf(IDCaso));
			sb.append(",RadNumber=" + RadNumber);
			sb.append(",NombreProceso=" + NombreProceso);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(correctosStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fallidosStruct implements
			routines.system.IPersistableRow<fallidosStruct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String MensajeError;

		public String getMensajeError() {
			return this.MensajeError;
		}

		public String Node;

		public String getNode() {
			return this.Node;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String Atrib;

		public String getAtrib() {
			return this.Atrib;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.MensajeError = readString(dis);

					this.Node = readString(dis);

					this.Path = readString(dis);

					this.Atrib = readString(dis);

					this.Value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MensajeError, dos);

				// String

				writeString(this.Node, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.Atrib, dos);

				// String

				writeString(this.Value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MensajeError=" + MensajeError);
			sb.append(",Node=" + Node);
			sb.append(",Path=" + Path);
			sb.append(",Atrib=" + Atrib);
			sb.append(",Value=" + Value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fallidosStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public routines.system.Document Body;

		public routines.system.Document getBody() {
			return this.Body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.Body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + String.valueOf(Body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String Header;

		public String getHeader() {
			return this.Header;
		}

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public String Fault;

		public String getFault() {
			return this.Fault;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.Header = readString(dis);

					this.Body = readString(dis);

					this.Fault = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Header, dos);

				// String

				writeString(this.Body, dos);

				// String

				writeString(this.Fault, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Header=" + Header);
			sb.append(",Body=" + Body);
			sb.append(",Fault=" + Fault);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLEnviado;

		public String getXMLEnviado() {
			return this.XMLEnviado;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLEnviado = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLEnviado, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLEnviado=" + XMLEnviado);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logxml1Struct implements
			routines.system.IPersistableRow<logxml1Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String XMLEnviado;

		public String getXMLEnviado() {
			return this.XMLEnviado;
		}

		public String Fecha;

		public String getFecha() {
			return this.Fecha;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.XMLEnviado = readString(dis);

					this.Fecha = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.XMLEnviado, dos);

				// String

				writeString(this.Fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("XMLEnviado=" + XMLEnviado);
			sb.append(",Fecha=" + Fecha);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logxml1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];
		static byte[] commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[0];

		public String Header;

		public String getHeader() {
			return this.Header;
		}

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public String Fault;

		public String getFault() {
			return this.Fault;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length) {
					if (length < 1024
							&& commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion.length == 0) {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[1024];
					} else {
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length);
				strReturn = new String(
						commonByteArray_FALABELLA___MIDDLEWARE_Middleware_Insercion,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FALABELLA___MIDDLEWARE_Middleware_Insercion) {

				try {

					int length = 0;

					this.Header = readString(dis);

					this.Body = readString(dis);

					this.Fault = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Header, dos);

				// String

				writeString(this.Body, dos);

				// String

				writeString(this.Fault, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Header=" + Header);
			sb.append(",Body=" + Body);
			sb.append(",Fault=" + Fault);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tWriteXMLField_1_InProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWriteXMLField_1_In_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				logxml1Struct logxml1 = new logxml1Struct();
				logxml1Struct row4 = logxml1;
				row5Struct row5 = new row5Struct();
				row10Struct row10 = new row10Struct();
				correctosStruct correctos = new correctosStruct();
				correctosStruct row47 = correctos;
				fallidosStruct fallidos = new fallidosStruct();
				fallidosStruct row48 = fallidos;

				/**
				 * [tXMLMap_1_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_1_TXMLMAP_OUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tXMLMap_1_TXMLMAP_OUT = 0;

				class BytesLimit65535_tXMLMap_1_TXMLMAP_OUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_1_TXMLMAP_OUT().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_1_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_1_TXMLMAP_OUT__Struct {
					String RadNumber;
					String NombreProceso;
					String Fecha;
				}
				Var__tXMLMap_1_TXMLMAP_OUT__Struct Var__tXMLMap_1_TXMLMAP_OUT = new Var__tXMLMap_1_TXMLMAP_OUT__Struct();
				// ###############################
				// # Outputs initialization
				correctosStruct correctos_tmp = new correctosStruct();
				correctosStruct correctos_save = null;
				// the aggregate variable
				correctosStruct correctos_aggregate = null;
				fallidosStruct fallidos_tmp = new fallidosStruct();
				fallidosStruct fallidos_save = null;
				// the aggregate variable
				fallidosStruct fallidos_aggregate = null;
				// init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_1 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_1",
						allOutsForAggregate_tXMLMap_1);
				// ###############################
				class TreeNode_API_tXMLMap_1_TXMLMAP_OUT {
					java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();

					void clear() {
						xpath_value_map.clear();
					}

					void put(String xpath, String value) {
						xpath_value_map.put(xpath, value);
					}

					String get_null(String xpath) {
						return null;
					}

					Integer get_Integer(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Integer(content);
					}

					String get_String(String xpath) {
						return xpath_value_map.get(xpath);
					}
				}
				TreeNode_API_tXMLMap_1_TXMLMAP_OUT treeNodeAPI_tXMLMap_1_TXMLMAP_OUT = new TreeNode_API_tXMLMap_1_TXMLMAP_OUT();
				NameSpaceTool nsTool_tXMLMap_1_TXMLMAP_OUT = new NameSpaceTool();
				int nb_line_tXMLMap_1_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_1_TXMLMAP_OUT xml_api_tXMLMap_1_TXMLMAP_OUT = new XML_API_tXMLMap_1_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_1_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				/**
				 * [tXMLMap_1_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tConvertType_2 begin ] start
				 */

				ok_Hash.put("tConvertType_2", false);
				start_Hash.put("tConvertType_2", System.currentTimeMillis());

				currentComponent = "tConvertType_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tConvertType_2 = 0;

				class BytesLimit65535_tConvertType_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tConvertType_2().limitLog4jByte();
				int nb_line_tConvertType_2 = 0;

				/**
				 * [tConvertType_2 begin ] stop
				 */

				/**
				 * [tSOAP_1 begin ] start
				 */

				ok_Hash.put("tSOAP_1", false);
				start_Hash.put("tSOAP_1", System.currentTimeMillis());

				currentComponent = "tSOAP_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tSOAP_1 = 0;

				class BytesLimit65535_tSOAP_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSOAP_1().limitLog4jByte();
				org.talend.soap.SOAPUtil soapUtil_tSOAP_1 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_1 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_16 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_16", false);
				start_Hash.put("tFileOutputExcel_16",
						System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_16";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("logxml1" + iterateId,
								0, 0);

					}
				}

				int tos_count_tFileOutputExcel_16 = 0;

				class BytesLimit65535_tFileOutputExcel_16 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_16().limitLog4jByte();

				int columnIndex_tFileOutputExcel_16 = 0;

				String fileName_tFileOutputExcel_16 = context.ExcelLogXML;
				int nb_line_tFileOutputExcel_16 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_16 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_16.setSheet("Creados");
				xlsxTool_tFileOutputExcel_16.setAppend(true, true);
				xlsxTool_tFileOutputExcel_16.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_16.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_16
						.prepareXlsxFile(fileName_tFileOutputExcel_16);

				xlsxTool_tFileOutputExcel_16.setFont("");

				/**
				 * [tFileOutputExcel_16 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_7 = 0;

				class BytesLimit65535_tMap_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_7().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
					String Fecha;
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				logxml1Struct logxml1_tmp = new logxml1Struct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tWriteXMLField_1_In begin ] start
				 */

				ok_Hash.put("tWriteXMLField_1_In", false);
				start_Hash.put("tWriteXMLField_1_In",
						System.currentTimeMillis());

				currentVirtualComponent = "tWriteXMLField_1";

				currentComponent = "tWriteXMLField_1_In";

				int tos_count_tWriteXMLField_1_In = 0;

				class BytesLimit65535_tWriteXMLField_1_In {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tWriteXMLField_1_In().limitLog4jByte();

				java.util.Queue<String> queue_tWriteXMLField_1_In = (java.util.Queue<String>) globalMap
						.get("queue_tWriteXMLField_1_In");

				String readFinishMarkWithPipeId_tWriteXMLField_1_In = "tWriteXMLField_1_In_FINISH"
						+ (queue_tWriteXMLField_1_In == null ? ""
								: queue_tWriteXMLField_1_In.hashCode());
				int nb_line_tWriteXMLField_1_In = 0;
				while (!globalMap
						.containsKey(readFinishMarkWithPipeId_tWriteXMLField_1_In)
						|| !queue_tWriteXMLField_1_In.isEmpty()) {
					if (!queue_tWriteXMLField_1_In.isEmpty()) {

						/**
						 * [tWriteXMLField_1_In begin ] stop
						 */

						/**
						 * [tWriteXMLField_1_In main ] start
						 */

						currentVirtualComponent = "tWriteXMLField_1";

						currentComponent = "tWriteXMLField_1_In";

						row3.Body = queue_tWriteXMLField_1_In.poll();
						nb_line_tWriteXMLField_1_In++;

						tos_count_tWriteXMLField_1_In++;

						/**
						 * [tWriteXMLField_1_In main ] stop
						 */

						/**
						 * [tMap_7 main ] start
						 */

						currentComponent = "tMap_7";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_7 = false;
						boolean mainRowRejected_tMap_7 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_7__Struct Var = Var__tMap_7;
							Var.Fecha = TalendDate
									.getDate("dd/MM/yyyy hh:mm:ss aa");// ###############################
							// ###############################
							// # Output tables

							logxml1 = null;

							// # Output table : 'logxml1'
							logxml1_tmp.XMLEnviado = row3.Body;
							logxml1_tmp.Fecha = Var.Fecha;
							logxml1 = logxml1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_7 = false;

						tos_count_tMap_7++;

						/**
						 * [tMap_7 main ] stop
						 */
						// Start of branch "logxml1"
						if (logxml1 != null) {

							/**
							 * [tFileOutputExcel_16 main ] start
							 */

							currentComponent = "tFileOutputExcel_16";

							// logxml1
							// logxml1

							if (execStat) {
								runStat.updateStatOnConnection("logxml1"
										+ iterateId, 1, 1);
							}

							xlsxTool_tFileOutputExcel_16.addRow();

							if (logxml1.XMLEnviado != null) {

								xlsxTool_tFileOutputExcel_16
										.addCellValue(String
												.valueOf(logxml1.XMLEnviado));
							} else {
								xlsxTool_tFileOutputExcel_16.addCellNullValue();
							}

							if (logxml1.Fecha != null) {

								xlsxTool_tFileOutputExcel_16
										.addCellValue(String
												.valueOf(logxml1.Fecha));
							} else {
								xlsxTool_tFileOutputExcel_16.addCellNullValue();
							}

							nb_line_tFileOutputExcel_16++;

							row4 = logxml1;

							tos_count_tFileOutputExcel_16++;

							/**
							 * [tFileOutputExcel_16 main ] stop
							 */

							/**
							 * [tSOAP_1 main ] start
							 */

							currentComponent = "tSOAP_1";

							// row4
							// row4

							if (execStat) {
								runStat.updateStatOnConnection("row4"
										+ iterateId, 1, 1);
							}

							soapUtil_tSOAP_1
									.invokeSOAP(
											org.talend.soap.SOAPUtil.SOAP11,
											"http://"
													+ context.BIZhost
													+ "/"
													+ context.BIZprocesoWorkflow
													+ "/webservices/entitymanagersoa.asmx",
											"http://tempuri.org/saveEntity",
											row4.XMLEnviado.toString());

							// for output

							row5 = new row5Struct();

							row5.Header = soapUtil_tSOAP_1.getReHeaderMessage();
							if (soapUtil_tSOAP_1.hasFault()) {
								row5.Fault = soapUtil_tSOAP_1
										.getReFaultMessage();
							} else {
								row5.Body = soapUtil_tSOAP_1.getReBodyMessage();
							}

							tos_count_tSOAP_1++;

							/**
							 * [tSOAP_1 main ] stop
							 */

							/**
							 * [tConvertType_2 main ] start
							 */

							currentComponent = "tConvertType_2";

							// row5
							// row5

							if (execStat) {
								runStat.updateStatOnConnection("row5"
										+ iterateId, 1, 1);
							}

							row10 = new row10Struct();
							boolean bHasError_tConvertType_2 = false;
							try {
								row10.Body = ParserUtils
										.parseTo_Document(row5.Body);

							} catch (java.lang.Exception e) {
								bHasError_tConvertType_2 = true;
								System.err.println(e.getMessage());
							}
							if (bHasError_tConvertType_2) {
								row10 = null;
							}

							nb_line_tConvertType_2++;

							tos_count_tConvertType_2++;

							/**
							 * [tConvertType_2 main ] stop
							 */
							// Start of branch "row10"
							if (row10 != null) {

								/**
								 * [tXMLMap_1_TXMLMAP_OUT main ] start
								 */

								currentVirtualComponent = "tXMLMap_1";

								currentComponent = "tXMLMap_1_TXMLMAP_OUT";

								// row10
								// row10

								if (execStat) {
									runStat.updateStatOnConnection("row10"
											+ iterateId, 1, 1);
								}

								boolean rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
								boolean rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
								boolean mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
								boolean isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;

								// init document to flat tool
								routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT = new routines.system.DocumentToFlat();
								docToFlat_tXMLMap_1_TXMLMAP_OUT
										.setOriginalLoop("/saveEntityResponse");
								docToFlat_tXMLMap_1_TXMLMAP_OUT
										.setIsOptional(false);
								if (row10.Body == null
										|| row10.Body.getDocument() == null) {
									throw new RuntimeException(
											"row10.Body can't be empty");
								}
								org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT = row10.Body
										.getDocument();
								docToFlat_tXMLMap_1_TXMLMAP_OUT
										.setDoc(doc_tXMLMap_1_TXMLMAP_OUT);
								docToFlat_tXMLMap_1_TXMLMAP_OUT
										.setDefineNS(false);
								docToFlat_tXMLMap_1_TXMLMAP_OUT
										.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);

								// old version, find NS from doc
								nsTool_tXMLMap_1_TXMLMAP_OUT
										.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT
												.getRootElement());
								java.util.HashMap<String, String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;

								docToFlat_tXMLMap_1_TXMLMAP_OUT
										.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT);

								String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[6];
								String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[6];

								absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "row10.Body:/saveEntityResponse/saveEntityResult/Entities/Error/ErrorMessage";
								relativePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "saveEntityResult/Entities/Error/ErrorMessage";

								absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "row10.Body:/saveEntityResponse/saveEntityResult/Entities/M_ProductosCargados";
								relativePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "saveEntityResult/Entities/M_ProductosCargados";

								absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[2] = "row10.Body:/saveEntityResponse/saveEntityResult/Entities/Error/Node";
								relativePathMappings_tXMLMap_1_TXMLMAP_OUT[2] = "saveEntityResult/Entities/Error/Node";

								absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[3] = "row10.Body:/saveEntityResponse/saveEntityResult/Entities/Error/Value";
								relativePathMappings_tXMLMap_1_TXMLMAP_OUT[3] = "saveEntityResult/Entities/Error/Value";

								absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[4] = "row10.Body:/saveEntityResponse/saveEntityResult/Entities/Error/Path";
								relativePathMappings_tXMLMap_1_TXMLMAP_OUT[4] = "saveEntityResult/Entities/Error/Path";

								absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[5] = "row10.Body:/saveEntityResponse/saveEntityResult/Entities/Error/Atrib";
								relativePathMappings_tXMLMap_1_TXMLMAP_OUT[5] = "saveEntityResult/Entities/Error/Atrib";

								docToFlat_tXMLMap_1_TXMLMAP_OUT
										.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT);
								docToFlat_tXMLMap_1_TXMLMAP_OUT
										.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT);
								// generate document to flat data
								docToFlat_tXMLMap_1_TXMLMAP_OUT.flat();
								// get flat data
								java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT = docToFlat_tXMLMap_1_TXMLMAP_OUT
										.getResultSet();

								for (java.util.Map<String, String> oneRow_tXMLMap_1_TXMLMAP_OUT : resultSet_tXMLMap_1_TXMLMAP_OUT) { // G_TXM_M_001
									nb_line_tXMLMap_1_TXMLMAP_OUT++;
									rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
									rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
									mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
									isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;

									treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
									for (java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT : oneRow_tXMLMap_1_TXMLMAP_OUT
											.entrySet()) {
										treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(
												entry_tXMLMap_1_TXMLMAP_OUT
														.getKey(),
												entry_tXMLMap_1_TXMLMAP_OUT
														.getValue());
									}

									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;

										Var.RadNumber = "N/A";

										Var.NombreProceso = "Ingreso Bodega";

										Var.Fecha = TalendDate
												.getDate("dd/MM/yyyy hh:mm:ss aa");
										// ###############################
										// # Output tables

										correctos = null;
										fallidos = null;

										boolean rejected_tXMLMap_1_TXMLMAP_OUT = true;

										// # Output table : 'correctos'
										// # Filter conditions
										if (

										treeNodeAPI_tXMLMap_1_TXMLMAP_OUT
												.get_Integer("row10.Body:/saveEntityResponse/saveEntityResult/Entities/M_ProductosCargados") != null

										) {
											rejected_tXMLMap_1_TXMLMAP_OUT = false;

											correctos_tmp = new correctosStruct();
											correctos_tmp.IDCaso = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT
													.get_Integer("row10.Body:/saveEntityResponse/saveEntityResult/Entities/M_ProductosCargados");
											correctos_tmp.RadNumber = Var.RadNumber;
											correctos_tmp.NombreProceso = Var.NombreProceso;
											correctos_tmp.Fecha = Var.Fecha;
											allOutsForAggregate_tXMLMap_1
													.add(correctos_tmp);

										} // closing filter/reject
											// ###### START REJECTS #####

										// # Output reject table : 'fallidos'
										// # Filter conditions
										if (rejected_tXMLMap_1_TXMLMAP_OUT) {

											fallidos_tmp = new fallidosStruct();
											fallidos_tmp.MensajeError = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT
													.get_String("row10.Body:/saveEntityResponse/saveEntityResult/Entities/Error/ErrorMessage");
											fallidos_tmp.Node = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT
													.get_String("row10.Body:/saveEntityResponse/saveEntityResult/Entities/Error/Node");
											fallidos_tmp.Path = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT
													.get_String("row10.Body:/saveEntityResponse/saveEntityResult/Entities/Error/Path");
											fallidos_tmp.Atrib = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT
													.get_String("row10.Body:/saveEntityResponse/saveEntityResult/Entities/Error/Atrib");
											fallidos_tmp.Value = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT
													.get_String("row10.Body:/saveEntityResponse/saveEntityResult/Entities/Error/Value");
											allOutsForAggregate_tXMLMap_1
													.add(fallidos_tmp);

										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;

								}// G_TXM_M_001 close

								tos_count_tXMLMap_1_TXMLMAP_OUT++;

								/**
								 * [tXMLMap_1_TXMLMAP_OUT main ] stop
								 */

							} // End of branch "row10"

						} // End of branch "logxml1"

						/**
						 * [tWriteXMLField_1_In end ] start
						 */

						currentVirtualComponent = "tWriteXMLField_1";

						currentComponent = "tWriteXMLField_1_In";

					}
				}

				String readFinishWithExceptionMarkWithPipeId_tWriteXMLField_1_In = "tWriteXMLField_1_In_FINISH_WITH_EXCEPTION"
						+ (queue_tWriteXMLField_1_In == null ? ""
								: queue_tWriteXMLField_1_In.hashCode());
				if (globalMap
						.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteXMLField_1_In)) {
					if (!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
						globalMap
								.put(readFinishWithExceptionMarkWithPipeId_tWriteXMLField_1_In,
										null);// syn
					}
					globalMap
							.remove(readFinishWithExceptionMarkWithPipeId_tWriteXMLField_1_In);
					return;
				}
				globalMap.remove("queue_tWriteXMLField_1_In");

				if (!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteXMLField_1_In,
							null);// syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteXMLField_1_In);

				globalMap.put("tWriteXMLField_1_NB_LINE",
						nb_line_tWriteXMLField_1_In);

				ok_Hash.put("tWriteXMLField_1_In", true);
				end_Hash.put("tWriteXMLField_1_In", System.currentTimeMillis());

				/**
				 * [tWriteXMLField_1_In end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tFileOutputExcel_16 end ] start
				 */

				currentComponent = "tFileOutputExcel_16";

				xlsxTool_tFileOutputExcel_16.writeExcel(
						fileName_tFileOutputExcel_16, true);

				globalMap.put("tFileOutputExcel_16_NB_LINE",
						nb_line_tFileOutputExcel_16);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("logxml1" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_16", true);
				end_Hash.put("tFileOutputExcel_16", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_16 end ] stop
				 */

				/**
				 * [tSOAP_1 end ] start
				 */

				currentComponent = "tSOAP_1";

				soapUtil_tSOAP_1.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tSOAP_1", true);
				end_Hash.put("tSOAP_1", System.currentTimeMillis());

				/**
				 * [tSOAP_1 end ] stop
				 */

				/**
				 * [tConvertType_2 end ] start
				 */

				currentComponent = "tConvertType_2";

				globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tConvertType_2", true);
				end_Hash.put("tConvertType_2", System.currentTimeMillis());

				/**
				 * [tConvertType_2 end ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_OUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_1_TXMLMAP_OUT",
						System.currentTimeMillis());

				/**
				 * [tXMLMap_1_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputExcel_10 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_10", false);
				start_Hash.put("tFileOutputExcel_10",
						System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_10";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row47" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_10 = 0;

				class BytesLimit65535_tFileOutputExcel_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_10().limitLog4jByte();

				int columnIndex_tFileOutputExcel_10 = 0;

				String fileName_tFileOutputExcel_10 = context.ExcelLogCreados;
				int nb_line_tFileOutputExcel_10 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_10 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_10.setSheet("Creados");
				xlsxTool_tFileOutputExcel_10.setAppend(true, true);
				xlsxTool_tFileOutputExcel_10.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_10.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_10
						.prepareXlsxFile(fileName_tFileOutputExcel_10);

				xlsxTool_tFileOutputExcel_10.setFont("");

				/**
				 * [tFileOutputExcel_10 begin ] stop
				 */

				/**
				 * [tLogRow_6 begin ] start
				 */

				ok_Hash.put("tLogRow_6", false);
				start_Hash.put("tLogRow_6", System.currentTimeMillis());

				currentComponent = "tLogRow_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("correctos" + iterateId,
								0, 0);

					}
				}

				int tos_count_tLogRow_6 = 0;

				class BytesLimit65535_tLogRow_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_6().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
				java.io.PrintStream consoleOut_tLogRow_6 = null;

				StringBuilder sbHeader_tLogRow_6 = new StringBuilder();

				sbHeader_tLogRow_6.append("IDCaso");

				sbHeader_tLogRow_6.append("\t");

				sbHeader_tLogRow_6.append("RadNumber");

				sbHeader_tLogRow_6.append("\t");

				sbHeader_tLogRow_6.append("NombreProceso");

				sbHeader_tLogRow_6.append("\t");

				sbHeader_tLogRow_6.append("Fecha");

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_6 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_6);
				}
				consoleOut_tLogRow_6.println(sbHeader_tLogRow_6.toString());
				consoleOut_tLogRow_6.flush();

				StringBuilder strBuffer_tLogRow_6 = null;
				int nb_line_tLogRow_6 = 0;
				// /////////////////////

				/**
				 * [tLogRow_6 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_11 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_11", false);
				start_Hash.put("tFileOutputExcel_11",
						System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_11";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row48" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputExcel_11 = 0;

				class BytesLimit65535_tFileOutputExcel_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_11().limitLog4jByte();

				int columnIndex_tFileOutputExcel_11 = 0;

				String fileName_tFileOutputExcel_11 = context.ExcelLogFallidos;
				int nb_line_tFileOutputExcel_11 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_11 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_11.setSheet("Fallidos");
				xlsxTool_tFileOutputExcel_11.setAppend(true, true);
				xlsxTool_tFileOutputExcel_11.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_11.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_11
						.prepareXlsxFile(fileName_tFileOutputExcel_11);

				xlsxTool_tFileOutputExcel_11.setFont("");

				/**
				 * [tFileOutputExcel_11 begin ] stop
				 */

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());

				currentComponent = "tLogRow_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("fallidos" + iterateId,
								0, 0);

					}
				}

				int tos_count_tLogRow_7 = 0;

				class BytesLimit65535_tLogRow_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_7().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
				java.io.PrintStream consoleOut_tLogRow_7 = null;

				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
				// /////////////////////

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_1_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_1_TXMLMAP_IN",
						System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_IN";

				int tos_count_tXMLMap_1_TXMLMAP_IN = 0;

				class BytesLimit65535_tXMLMap_1_TXMLMAP_IN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_1_TXMLMAP_IN().limitLog4jByte();
				java.util.List<Object> outs_tXMLMap_1 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_1");
				for (Object row_out_tXMLMap_1_TXMLMAP_IN : outs_tXMLMap_1) {// TD512

					/**
					 * [tXMLMap_1_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_1_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_IN";

					correctos = null;
					if (row_out_tXMLMap_1_TXMLMAP_IN != null
							&& row_out_tXMLMap_1_TXMLMAP_IN instanceof correctosStruct) {
						correctos = (correctosStruct) row_out_tXMLMap_1_TXMLMAP_IN;
					}
					fallidos = null;
					if (row_out_tXMLMap_1_TXMLMAP_IN != null
							&& row_out_tXMLMap_1_TXMLMAP_IN instanceof fallidosStruct) {
						fallidos = (fallidosStruct) row_out_tXMLMap_1_TXMLMAP_IN;
					}

					tos_count_tXMLMap_1_TXMLMAP_IN++;

					/**
					 * [tXMLMap_1_TXMLMAP_IN main ] stop
					 */
					// Start of branch "correctos"
					if (correctos != null) {

						/**
						 * [tLogRow_6 main ] start
						 */

						currentComponent = "tLogRow_6";

						// correctos
						// correctos

						if (execStat) {
							runStat.updateStatOnConnection("correctos"
									+ iterateId, 1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_6 = new StringBuilder();

						if (correctos.IDCaso != null) { //

							strBuffer_tLogRow_6.append(String
									.valueOf(correctos.IDCaso));

						} //

						strBuffer_tLogRow_6.append("|");

						if (correctos.RadNumber != null) { //

							strBuffer_tLogRow_6.append(String
									.valueOf(correctos.RadNumber));

						} //

						strBuffer_tLogRow_6.append("|");

						if (correctos.NombreProceso != null) { //

							strBuffer_tLogRow_6.append(String
									.valueOf(correctos.NombreProceso));

						} //

						strBuffer_tLogRow_6.append("|");

						if (correctos.Fecha != null) { //

							strBuffer_tLogRow_6.append(String
									.valueOf(correctos.Fecha));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_6 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_6);
						}
						consoleOut_tLogRow_6.println(strBuffer_tLogRow_6
								.toString());
						consoleOut_tLogRow_6.flush();
						nb_line_tLogRow_6++;
						// ////

						// ////

						// /////////////////////

						row47 = correctos;

						tos_count_tLogRow_6++;

						/**
						 * [tLogRow_6 main ] stop
						 */

						/**
						 * [tFileOutputExcel_10 main ] start
						 */

						currentComponent = "tFileOutputExcel_10";

						// row47
						// row47

						if (execStat) {
							runStat.updateStatOnConnection("row47" + iterateId,
									1, 1);
						}

						xlsxTool_tFileOutputExcel_10.addRow();

						if (row47.IDCaso != null) {

							xlsxTool_tFileOutputExcel_10.addCellValue(Double
									.parseDouble(String.valueOf(row47.IDCaso)));
						} else {
							xlsxTool_tFileOutputExcel_10.addCellNullValue();
						}

						if (row47.RadNumber != null) {

							xlsxTool_tFileOutputExcel_10.addCellValue(String
									.valueOf(row47.RadNumber));
						} else {
							xlsxTool_tFileOutputExcel_10.addCellNullValue();
						}

						if (row47.NombreProceso != null) {

							xlsxTool_tFileOutputExcel_10.addCellValue(String
									.valueOf(row47.NombreProceso));
						} else {
							xlsxTool_tFileOutputExcel_10.addCellNullValue();
						}

						if (row47.Fecha != null) {

							xlsxTool_tFileOutputExcel_10.addCellValue(String
									.valueOf(row47.Fecha));
						} else {
							xlsxTool_tFileOutputExcel_10.addCellNullValue();
						}

						nb_line_tFileOutputExcel_10++;

						tos_count_tFileOutputExcel_10++;

						/**
						 * [tFileOutputExcel_10 main ] stop
						 */

					} // End of branch "correctos"

					// Start of branch "fallidos"
					if (fallidos != null) {

						/**
						 * [tLogRow_7 main ] start
						 */

						currentComponent = "tLogRow_7";

						// fallidos
						// fallidos

						if (execStat) {
							runStat.updateStatOnConnection("fallidos"
									+ iterateId, 1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_7 = new StringBuilder();

						if (fallidos.MensajeError != null) { //

							strBuffer_tLogRow_7.append(String
									.valueOf(fallidos.MensajeError));

						} //

						strBuffer_tLogRow_7.append("|");

						if (fallidos.Node != null) { //

							strBuffer_tLogRow_7.append(String
									.valueOf(fallidos.Node));

						} //

						strBuffer_tLogRow_7.append("|");

						if (fallidos.Path != null) { //

							strBuffer_tLogRow_7.append(String
									.valueOf(fallidos.Path));

						} //

						strBuffer_tLogRow_7.append("|");

						if (fallidos.Atrib != null) { //

							strBuffer_tLogRow_7.append(String
									.valueOf(fallidos.Atrib));

						} //

						strBuffer_tLogRow_7.append("|");

						if (fallidos.Value != null) { //

							strBuffer_tLogRow_7.append(String
									.valueOf(fallidos.Value));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_7 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_7);
						}
						consoleOut_tLogRow_7.println(strBuffer_tLogRow_7
								.toString());
						consoleOut_tLogRow_7.flush();
						nb_line_tLogRow_7++;
						// ////

						// ////

						// /////////////////////

						row48 = fallidos;

						tos_count_tLogRow_7++;

						/**
						 * [tLogRow_7 main ] stop
						 */

						/**
						 * [tFileOutputExcel_11 main ] start
						 */

						currentComponent = "tFileOutputExcel_11";

						// row48
						// row48

						if (execStat) {
							runStat.updateStatOnConnection("row48" + iterateId,
									1, 1);
						}

						xlsxTool_tFileOutputExcel_11.addRow();

						if (row48.MensajeError != null) {

							xlsxTool_tFileOutputExcel_11.addCellValue(String
									.valueOf(row48.MensajeError));
						} else {
							xlsxTool_tFileOutputExcel_11.addCellNullValue();
						}

						if (row48.Node != null) {

							xlsxTool_tFileOutputExcel_11.addCellValue(String
									.valueOf(row48.Node));
						} else {
							xlsxTool_tFileOutputExcel_11.addCellNullValue();
						}

						if (row48.Path != null) {

							xlsxTool_tFileOutputExcel_11.addCellValue(String
									.valueOf(row48.Path));
						} else {
							xlsxTool_tFileOutputExcel_11.addCellNullValue();
						}

						if (row48.Atrib != null) {

							xlsxTool_tFileOutputExcel_11.addCellValue(String
									.valueOf(row48.Atrib));
						} else {
							xlsxTool_tFileOutputExcel_11.addCellNullValue();
						}

						if (row48.Value != null) {

							xlsxTool_tFileOutputExcel_11.addCellValue(String
									.valueOf(row48.Value));
						} else {
							xlsxTool_tFileOutputExcel_11.addCellNullValue();
						}

						nb_line_tFileOutputExcel_11++;

						tos_count_tFileOutputExcel_11++;

						/**
						 * [tFileOutputExcel_11 main ] stop
						 */

					} // End of branch "fallidos"

					/**
					 * [tXMLMap_1_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_IN";

				}// TD512

				ok_Hash.put("tXMLMap_1_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_1_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tLogRow_6 end ] start
				 */

				currentComponent = "tLogRow_6";

				// ////
				// ////
				globalMap.put("tLogRow_6_NB_LINE", nb_line_tLogRow_6);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("correctos" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tLogRow_6", true);
				end_Hash.put("tLogRow_6", System.currentTimeMillis());

				/**
				 * [tLogRow_6 end ] stop
				 */

				/**
				 * [tFileOutputExcel_10 end ] start
				 */

				currentComponent = "tFileOutputExcel_10";

				xlsxTool_tFileOutputExcel_10.writeExcel(
						fileName_tFileOutputExcel_10, true);

				globalMap.put("tFileOutputExcel_10_NB_LINE",
						nb_line_tFileOutputExcel_10);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row47" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_10", true);
				end_Hash.put("tFileOutputExcel_10", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_10 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

				// ////
				// ////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("fallidos" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

				/**
				 * [tFileOutputExcel_11 end ] start
				 */

				currentComponent = "tFileOutputExcel_11";

				xlsxTool_tFileOutputExcel_11.writeExcel(
						fileName_tFileOutputExcel_11, true);

				globalMap.put("tFileOutputExcel_11_NB_LINE",
						nb_line_tFileOutputExcel_11);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row48" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputExcel_11", true);
				end_Hash.put("tFileOutputExcel_11", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWriteXMLField_1_In finally ] start
				 */

				currentVirtualComponent = "tWriteXMLField_1";

				currentComponent = "tWriteXMLField_1_In";

				/**
				 * [tWriteXMLField_1_In finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_16 finally ] start
				 */

				currentComponent = "tFileOutputExcel_16";

				/**
				 * [tFileOutputExcel_16 finally ] stop
				 */

				/**
				 * [tSOAP_1 finally ] start
				 */

				currentComponent = "tSOAP_1";

				/**
				 * [tSOAP_1 finally ] stop
				 */

				/**
				 * [tConvertType_2 finally ] start
				 */

				currentComponent = "tConvertType_2";

				/**
				 * [tConvertType_2 finally ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_OUT";

				/**
				 * [tXMLMap_1_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_IN";

				/**
				 * [tXMLMap_1_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_10 finally ] start
				 */

				currentComponent = "tFileOutputExcel_10";

				/**
				 * [tFileOutputExcel_10 finally ] stop
				 */

				/**
				 * [tLogRow_7 finally ] start
				 */

				currentComponent = "tLogRow_7";

				/**
				 * [tLogRow_7 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_11 finally ] start
				 */

				currentComponent = "tFileOutputExcel_11";

				/**
				 * [tFileOutputExcel_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWriteXMLField_1_In_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Desa";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Middleware_Insercion Middleware_InsercionClass = new Middleware_Insercion();

		int exitCode = Middleware_InsercionClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Middleware_Insercion.class
					.getClassLoader().getResourceAsStream(
							"falabella___middleware/middleware_insercion_0_8/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("ExcelImportacion", "id_File");

			context.ExcelImportacion = (String) context
					.getProperty("ExcelImportacion");
			context.setContextType("XMLOrigen", "id_File");

			context.XMLOrigen = (String) context.getProperty("XMLOrigen");
			context.setContextType("ExcelRechazados", "id_File");

			context.ExcelRechazados = (String) context
					.getProperty("ExcelRechazados");
			context.setContextType("XMLProductosCargados", "id_File");

			context.XMLProductosCargados = (String) context
					.getProperty("XMLProductosCargados");
			context.setContextType("ExcelExportacion", "id_File");

			context.ExcelExportacion = (String) context
					.getProperty("ExcelExportacion");
			context.setContextType("FTPusuario", "id_String");

			context.FTPusuario = (String) context.getProperty("FTPusuario");
			context.setContextType("FTPpass", "id_Password");

			String pwd_FTPpass_value = context.getProperty("FTPpass");
			context.FTPpass = null;
			if (pwd_FTPpass_value != null) {
				if (context_param.containsKey("FTPpass")) {// no need to decrypt
															// if it come from
															// program argument
															// or parent job
															// runtime
					context.FTPpass = pwd_FTPpass_value;
				} else if (!pwd_FTPpass_value.isEmpty()) {
					try {
						context.FTPpass = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_FTPpass_value);
						context.put("FTPpass", context.FTPpass);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("FTPpuerto", "id_String");

			context.FTPpuerto = (String) context.getProperty("FTPpuerto");
			context.setContextType("FTPhost", "id_String");

			context.FTPhost = (String) context.getProperty("FTPhost");
			context.setContextType("XMLDDRegistrosCargados", "id_File");

			context.XMLDDRegistrosCargados = (String) context
					.getProperty("XMLDDRegistrosCargados");
			context.setContextType("XMLFlagFoto", "id_File");

			context.XMLFlagFoto = (String) context.getProperty("XMLFlagFoto");
			context.setContextType("BIZprocesoWorkflow", "id_String");

			context.BIZprocesoWorkflow = (String) context
					.getProperty("BIZprocesoWorkflow");
			context.setContextType("BIZhost", "id_String");

			context.BIZhost = (String) context.getProperty("BIZhost");
			context.setContextType("BIZprocesoDD", "id_String");

			context.BIZprocesoDD = (String) context.getProperty("BIZprocesoDD");
			context.setContextType("XMLProgramacion", "id_File");

			context.XMLProgramacion = (String) context
					.getProperty("XMLProgramacion");
			context.setContextType("XMLTempAgrupado", "id_File");

			context.XMLTempAgrupado = (String) context
					.getProperty("XMLTempAgrupado");
			context.setContextType("ExcelLog", "id_File");

			context.ExcelLog = (String) context.getProperty("ExcelLog");
			context.setContextType("ExcelLogCreados", "id_File");

			context.ExcelLogCreados = (String) context
					.getProperty("ExcelLogCreados");
			context.setContextType("ExcelLogFallidos", "id_File");

			context.ExcelLogFallidos = (String) context
					.getProperty("ExcelLogFallidos");
			context.setContextType("ExcelLogXML", "id_File");

			context.ExcelLogXML = (String) context.getProperty("ExcelLogXML");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ExcelImportacion")) {
				context.ExcelImportacion = (String) parentContextMap
						.get("ExcelImportacion");
			}
			if (parentContextMap.containsKey("XMLOrigen")) {
				context.XMLOrigen = (String) parentContextMap.get("XMLOrigen");
			}
			if (parentContextMap.containsKey("ExcelRechazados")) {
				context.ExcelRechazados = (String) parentContextMap
						.get("ExcelRechazados");
			}
			if (parentContextMap.containsKey("XMLProductosCargados")) {
				context.XMLProductosCargados = (String) parentContextMap
						.get("XMLProductosCargados");
			}
			if (parentContextMap.containsKey("ExcelExportacion")) {
				context.ExcelExportacion = (String) parentContextMap
						.get("ExcelExportacion");
			}
			if (parentContextMap.containsKey("FTPusuario")) {
				context.FTPusuario = (String) parentContextMap
						.get("FTPusuario");
			}
			if (parentContextMap.containsKey("FTPpass")) {
				context.FTPpass = (java.lang.String) parentContextMap
						.get("FTPpass");
			}
			if (parentContextMap.containsKey("FTPpuerto")) {
				context.FTPpuerto = (String) parentContextMap.get("FTPpuerto");
			}
			if (parentContextMap.containsKey("FTPhost")) {
				context.FTPhost = (String) parentContextMap.get("FTPhost");
			}
			if (parentContextMap.containsKey("XMLDDRegistrosCargados")) {
				context.XMLDDRegistrosCargados = (String) parentContextMap
						.get("XMLDDRegistrosCargados");
			}
			if (parentContextMap.containsKey("XMLFlagFoto")) {
				context.XMLFlagFoto = (String) parentContextMap
						.get("XMLFlagFoto");
			}
			if (parentContextMap.containsKey("BIZprocesoWorkflow")) {
				context.BIZprocesoWorkflow = (String) parentContextMap
						.get("BIZprocesoWorkflow");
			}
			if (parentContextMap.containsKey("BIZhost")) {
				context.BIZhost = (String) parentContextMap.get("BIZhost");
			}
			if (parentContextMap.containsKey("BIZprocesoDD")) {
				context.BIZprocesoDD = (String) parentContextMap
						.get("BIZprocesoDD");
			}
			if (parentContextMap.containsKey("XMLProgramacion")) {
				context.XMLProgramacion = (String) parentContextMap
						.get("XMLProgramacion");
			}
			if (parentContextMap.containsKey("XMLTempAgrupado")) {
				context.XMLTempAgrupado = (String) parentContextMap
						.get("XMLTempAgrupado");
			}
			if (parentContextMap.containsKey("ExcelLog")) {
				context.ExcelLog = (String) parentContextMap.get("ExcelLog");
			}
			if (parentContextMap.containsKey("ExcelLogCreados")) {
				context.ExcelLogCreados = (String) parentContextMap
						.get("ExcelLogCreados");
			}
			if (parentContextMap.containsKey("ExcelLogFallidos")) {
				context.ExcelLogFallidos = (String) parentContextMap
						.get("ExcelLogFallidos");
			}
			if (parentContextMap.containsKey("ExcelLogXML")) {
				context.ExcelLogXML = (String) parentContextMap
						.get("ExcelLogXML");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("FTPpass");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Middleware_Insercion");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1164549 characters generated by Talend Open Studio for Data Integration on
 * the 5 de septiembre de 2018 11:51:45 CLST
 ************************************************************************************************/
