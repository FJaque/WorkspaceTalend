// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package falabella___middleware.actualizareventosku_hijo_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ActualizarEventoSKU_Hijo Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.5.1.20180116_1512
 * @status 
 */
public class ActualizarEventoSKU_Hijo implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ExcelImportacion != null){
				
					this.setProperty("ExcelImportacion", ExcelImportacion.toString());
				
			}
			
			if(XMLOrigen != null){
				
					this.setProperty("XMLOrigen", XMLOrigen.toString());
				
			}
			
			if(XMLProductosCargados != null){
				
					this.setProperty("XMLProductosCargados", XMLProductosCargados.toString());
				
			}
			
			if(ExcelExportacion != null){
				
					this.setProperty("ExcelExportacion", ExcelExportacion.toString());
				
			}
			
			if(ExcelRechazados != null){
				
					this.setProperty("ExcelRechazados", ExcelRechazados.toString());
				
			}
			
			if(XMLDDRegistrosCargados != null){
				
					this.setProperty("XMLDDRegistrosCargados", XMLDDRegistrosCargados.toString());
				
			}
			
			if(XMLFlagFoto != null){
				
					this.setProperty("XMLFlagFoto", XMLFlagFoto.toString());
				
			}
			
			if(XMLProgramacion != null){
				
					this.setProperty("XMLProgramacion", XMLProgramacion.toString());
				
			}
			
			if(XMLTempAgrupado != null){
				
					this.setProperty("XMLTempAgrupado", XMLTempAgrupado.toString());
				
			}
			
			if(ExcelLogCreados != null){
				
					this.setProperty("ExcelLogCreados", ExcelLogCreados.toString());
				
			}
			
			if(ExcelLogFallidos != null){
				
					this.setProperty("ExcelLogFallidos", ExcelLogFallidos.toString());
				
			}
			
			if(ExcelLogXML != null){
				
					this.setProperty("ExcelLogXML", ExcelLogXML.toString());
				
			}
			
			if(XMLPais != null){
				
					this.setProperty("XMLPais", XMLPais.toString());
				
			}
			
			if(SalidaCSV != null){
				
					this.setProperty("SalidaCSV", SalidaCSV.toString());
				
			}
			
			if(ExcelSKU != null){
				
					this.setProperty("ExcelSKU", ExcelSKU.toString());
				
			}
			
			if(XMLDatamart != null){
				
					this.setProperty("XMLDatamart", XMLDatamart.toString());
				
			}
			
			if(ExtelDatamart != null){
				
					this.setProperty("ExtelDatamart", ExtelDatamart.toString());
				
			}
			
			if(XMLGetEntitiesM_Informaciondeproceso != null){
				
					this.setProperty("XMLGetEntitiesM_Informaciondeproceso", XMLGetEntitiesM_Informaciondeproceso.toString());
				
			}
			
			if(CSVM_Informaciondeproceso != null){
				
					this.setProperty("CSVM_Informaciondeproceso", CSVM_Informaciondeproceso.toString());
				
			}
			
			if(ExcelM_Informaciondeproceso != null){
				
					this.setProperty("ExcelM_Informaciondeproceso", ExcelM_Informaciondeproceso.toString());
				
			}
			
			if(ExcelExtrasInformaciondeProceso != null){
				
					this.setProperty("ExcelExtrasInformaciondeProceso", ExcelExtrasInformaciondeProceso.toString());
				
			}
			
			if(TXTM_Informaciondeproceso != null){
				
					this.setProperty("TXTM_Informaciondeproceso", TXTM_Informaciondeproceso.toString());
				
			}
			
			if(EventoSKU_ExcelCarga != null){
				
					this.setProperty("EventoSKU_ExcelCarga", EventoSKU_ExcelCarga.toString());
				
			}
			
			if(BIZprocesoWorkflow != null){
				
					this.setProperty("BIZprocesoWorkflow", BIZprocesoWorkflow.toString());
				
			}
			
			if(BIZhost != null){
				
					this.setProperty("BIZhost", BIZhost.toString());
				
			}
			
			if(BIZhostOP != null){
				
					this.setProperty("BIZhostOP", BIZhostOP.toString());
				
			}
			
			if(BIZprocesoDDOP != null){
				
					this.setProperty("BIZprocesoDDOP", BIZprocesoDDOP.toString());
				
			}
			
			if(BIZprocesoDD != null){
				
					this.setProperty("BIZprocesoDD", BIZprocesoDD.toString());
				
			}
			
			if(BIZprocesoWorkflowOP != null){
				
					this.setProperty("BIZprocesoWorkflowOP", BIZprocesoWorkflowOP.toString());
				
			}
			
			if(EventoSKU_XMLtemp != null){
				
					this.setProperty("EventoSKU_XMLtemp", EventoSKU_XMLtemp.toString());
				
			}
			
			if(EventoSKU_CSVProductosActualizados != null){
				
					this.setProperty("EventoSKU_CSVProductosActualizados", EventoSKU_CSVProductosActualizados.toString());
				
			}
			
			if(Limite != null){
				
					this.setProperty("Limite", Limite.toString());
				
			}
			
			if(Aumento != null){
				
					this.setProperty("Aumento", Aumento.toString());
				
			}
			
			if(Inicial != null){
				
					this.setProperty("Inicial", Inicial.toString());
				
			}
			
			if(CantidadActual != null){
				
					this.setProperty("CantidadActual", CantidadActual.toString());
				
			}
			
			if(Final != null){
				
					this.setProperty("Final", Final.toString());
				
			}
			
			if(EventoSKU_ListaSKU != null){
				
					this.setProperty("EventoSKU_ListaSKU", EventoSKU_ListaSKU.toString());
				
			}
			
		}

		public String ExcelImportacion;
		public String getExcelImportacion(){
			return this.ExcelImportacion;
		}
		
		public String XMLOrigen;
		public String getXMLOrigen(){
			return this.XMLOrigen;
		}
		
		public String XMLProductosCargados;
		public String getXMLProductosCargados(){
			return this.XMLProductosCargados;
		}
		
		public String ExcelExportacion;
		public String getExcelExportacion(){
			return this.ExcelExportacion;
		}
		
		public String ExcelRechazados;
		public String getExcelRechazados(){
			return this.ExcelRechazados;
		}
		
		public String XMLDDRegistrosCargados;
		public String getXMLDDRegistrosCargados(){
			return this.XMLDDRegistrosCargados;
		}
		
		public String XMLFlagFoto;
		public String getXMLFlagFoto(){
			return this.XMLFlagFoto;
		}
		
		public String XMLProgramacion;
		public String getXMLProgramacion(){
			return this.XMLProgramacion;
		}
		
		public String XMLTempAgrupado;
		public String getXMLTempAgrupado(){
			return this.XMLTempAgrupado;
		}
		
		public String ExcelLogCreados;
		public String getExcelLogCreados(){
			return this.ExcelLogCreados;
		}
		
		public String ExcelLogFallidos;
		public String getExcelLogFallidos(){
			return this.ExcelLogFallidos;
		}
		
		public String ExcelLogXML;
		public String getExcelLogXML(){
			return this.ExcelLogXML;
		}
		
		public String XMLPais;
		public String getXMLPais(){
			return this.XMLPais;
		}
		
		public String SalidaCSV;
		public String getSalidaCSV(){
			return this.SalidaCSV;
		}
		
public String ExcelSKU;
public String getExcelSKU(){
	return this.ExcelSKU;
}
		public String XMLDatamart;
		public String getXMLDatamart(){
			return this.XMLDatamart;
		}
		
public String ExtelDatamart;
public String getExtelDatamart(){
	return this.ExtelDatamart;
}
		public String XMLGetEntitiesM_Informaciondeproceso;
		public String getXMLGetEntitiesM_Informaciondeproceso(){
			return this.XMLGetEntitiesM_Informaciondeproceso;
		}
		
		public String CSVM_Informaciondeproceso;
		public String getCSVM_Informaciondeproceso(){
			return this.CSVM_Informaciondeproceso;
		}
		
		public String ExcelM_Informaciondeproceso;
		public String getExcelM_Informaciondeproceso(){
			return this.ExcelM_Informaciondeproceso;
		}
		
		public String ExcelExtrasInformaciondeProceso;
		public String getExcelExtrasInformaciondeProceso(){
			return this.ExcelExtrasInformaciondeProceso;
		}
		
		public String TXTM_Informaciondeproceso;
		public String getTXTM_Informaciondeproceso(){
			return this.TXTM_Informaciondeproceso;
		}
		
		public String EventoSKU_ExcelCarga;
		public String getEventoSKU_ExcelCarga(){
			return this.EventoSKU_ExcelCarga;
		}
		
public String BIZprocesoWorkflow;
public String getBIZprocesoWorkflow(){
	return this.BIZprocesoWorkflow;
}
public String BIZhost;
public String getBIZhost(){
	return this.BIZhost;
}
public String BIZhostOP;
public String getBIZhostOP(){
	return this.BIZhostOP;
}
public String BIZprocesoDDOP;
public String getBIZprocesoDDOP(){
	return this.BIZprocesoDDOP;
}
public String BIZprocesoDD;
public String getBIZprocesoDD(){
	return this.BIZprocesoDD;
}
public String BIZprocesoWorkflowOP;
public String getBIZprocesoWorkflowOP(){
	return this.BIZprocesoWorkflowOP;
}
		public String EventoSKU_XMLtemp;
		public String getEventoSKU_XMLtemp(){
			return this.EventoSKU_XMLtemp;
		}
		
		public String EventoSKU_CSVProductosActualizados;
		public String getEventoSKU_CSVProductosActualizados(){
			return this.EventoSKU_CSVProductosActualizados;
		}
		
public Long Limite;
public Long getLimite(){
	return this.Limite;
}
public Long Aumento;
public Long getAumento(){
	return this.Aumento;
}
public Long Inicial;
public Long getInicial(){
	return this.Inicial;
}
public Long CantidadActual;
public Long getCantidadActual(){
	return this.CantidadActual;
}
public Long Final;
public Long getFinal(){
	return this.Final;
}
public String EventoSKU_ListaSKU;
public String getEventoSKU_ListaSKU(){
	return this.EventoSKU_ListaSKU;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.2";
	private final String jobName = "ActualizarEventoSKU_Hijo";
	private final String projectName = "FALABELLA___MIDDLEWARE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ActualizarEventoSKU_Hijo.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ActualizarEventoSKU_Hijo.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSOAP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedFileOutputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSOAP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedXMLMapHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_1_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_1_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_1_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_2_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_2_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_2_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSOAP_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


System.out.println("Buscando productos . . .");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tSOAP_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class conteo1Struct implements routines.system.IPersistableRow<conteo1Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public Integer Cantidad;

				public Integer getCantidad () {
					return this.Cantidad;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
						this.Cantidad = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Cantidad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Cantidad="+String.valueOf(Cantidad));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(conteo1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public Integer Cantidad;

				public Integer getCantidad () {
					return this.Cantidad;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
						this.Cantidad = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Cantidad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Cantidad="+String.valueOf(Cantidad));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public Integer idM_ProductosCargados;

				public Integer getIdM_ProductosCargados () {
					return this.idM_ProductosCargados;
				}
				
			    public String SKU;

				public String getSKU () {
					return this.SKU;
				}
				
			    public String Evento;

				public String getEvento () {
					return this.Evento;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
						this.idM_ProductosCargados = readInteger(dis);
					
					this.SKU = readString(dis);
					
					this.Evento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idM_ProductosCargados,dos);
					
					// String
				
						writeString(this.SKU,dos);
					
					// String
				
						writeString(this.Evento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idM_ProductosCargados="+String.valueOf(idM_ProductosCargados));
		sb.append(",SKU="+SKU);
		sb.append(",Evento="+Evento);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class armarXML1Struct implements routines.system.IPersistableRow<armarXML1Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public Integer idM_ProductosCargados;

				public Integer getIdM_ProductosCargados () {
					return this.idM_ProductosCargados;
				}
				
			    public String SKU;

				public String getSKU () {
					return this.SKU;
				}
				
			    public String Evento;

				public String getEvento () {
					return this.Evento;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
						this.idM_ProductosCargados = readInteger(dis);
					
					this.SKU = readString(dis);
					
					this.Evento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idM_ProductosCargados,dos);
					
					// String
				
						writeString(this.SKU,dos);
					
					// String
				
						writeString(this.Evento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idM_ProductosCargados="+String.valueOf(idM_ProductosCargados));
		sb.append(",SKU="+SKU);
		sb.append(",Evento="+Evento);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(armarXML1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class unidosStruct implements routines.system.IPersistableRow<unidosStruct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public Integer idM_ProductosCargados;

				public Integer getIdM_ProductosCargados () {
					return this.idM_ProductosCargados;
				}
				
			    public String SKU;

				public String getSKU () {
					return this.SKU;
				}
				
			    public String Evento;

				public String getEvento () {
					return this.Evento;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
						this.idM_ProductosCargados = readInteger(dis);
					
					this.SKU = readString(dis);
					
					this.Evento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idM_ProductosCargados,dos);
					
					// String
				
						writeString(this.SKU,dos);
					
					// String
				
						writeString(this.Evento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idM_ProductosCargados="+String.valueOf(idM_ProductosCargados));
		sb.append(",SKU="+SKU);
		sb.append(",Evento="+Evento);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(unidosStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tSOAP_1Struct implements routines.system.IPersistableRow<after_tSOAP_1Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tSOAP_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSOAP_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSOAP_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputExcel_2Process(globalMap);

		row2Struct row2 = new row2Struct();
unidosStruct unidos = new unidosStruct();
unidosStruct armarXML1 = unidos;
unidosStruct row4 = unidos;
conteo1Struct conteo1 = new conteo1Struct();




	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_1_TXMLMAP_OUT = 0;
		
    	class BytesLimit65535_tXMLMap_1_TXMLMAP_OUT{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tXMLMap_1_TXMLMAP_OUT().limitLog4jByte();

	org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
			((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				globalMap.get( "tHash_Lookup_row3" ))
				;
	
	
	row3Struct row3HashKey = new row3Struct();
	row3Struct row3Default = new row3Struct();
	row3Struct row3 = new row3Struct();
	
	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_1_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_1_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_1_TXMLMAP_OUT__Struct Var__tXMLMap_1_TXMLMAP_OUT = new Var__tXMLMap_1_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
unidosStruct unidos_tmp = new unidosStruct();
unidosStruct unidos_save = null;
//the aggregate variable
unidosStruct unidos_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_1 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_1",allOutsForAggregate_tXMLMap_1);
// ###############################
class TreeNode_API_tXMLMap_1_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_1_TXMLMAP_OUT treeNodeAPI_tXMLMap_1_TXMLMAP_OUT = new TreeNode_API_tXMLMap_1_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_1_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_1_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_1_TXMLMAP_OUT xml_api_tXMLMap_1_TXMLMAP_OUT = new XML_API_tXMLMap_1_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_1_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_1_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tSOAP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSOAP_1", false);
		start_Hash.put("tSOAP_1", System.currentTimeMillis());
		
	
	currentComponent="tSOAP_1";

	
		int tos_count_tSOAP_1 = 0;
		
    	class BytesLimit65535_tSOAP_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSOAP_1().limitLog4jByte();
 org.talend.soap.SOAPUtil soapUtil_tSOAP_1 = new org.talend.soap.SOAPUtil();

 
	final String decryptedPassword_tSOAP_1 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

 



/**
 * [tSOAP_1 begin ] stop
 */
	
	/**
	 * [tSOAP_1 main ] start
	 */

	

	
	
	currentComponent="tSOAP_1";

	

		
		
			String document_tSOAP_1 = soapUtil_tSOAP_1.extractContentAsDocument(org.talend.soap.SOAPUtil.SOAP11,context.BIZhost+"/"+context.BIZprocesoWorkflow+"/webservices/entitymanagersoa.asmx","http://tempuri.org/getEntitiesUsingSchema","<?xml version='1.0' encoding='utf-8'?>  <soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'       xmlns:tem='http://tempuri.org/'>      <soapenv:Header/>      <soapenv:Body>          <tem:getEntitiesUsingSchema>                <tem:entitiesInfo>                    <BizAgiWSParam>                      <EntityData>                          <EntityName>M_ProductosCargados</EntityName>                          <Filters>  				<![CDATA[                    	            SKU IN ("+ context.EventoSKU_ListaSKU +")                          	 ]]>                          </Filters>                      </EntityData>                  </BizAgiWSParam>                </tem:entitiesInfo>                <tem:schema>                    <xs:schema attributeFormDefault='qualified' elementFormDefault='qualified'                       xmlns:xs='http://www.w3.org/2001/XMLSchema'>                      <xs:element name='M_ProductosCargados'>                          <xs:complexType>                              <xs:sequence>                                  <xs:element minOccurs='0' maxOccurs='1' name='SKU' type='xs:string' />                              </xs:sequence>                          </xs:complexType>                      </xs:element>                  </xs:schema>                </tem:schema>          </tem:getEntitiesUsingSchema>      </soapenv:Body>  </soapenv:Envelope>");
		
		
	

	// for output
			
				row2 = new row2Struct();
				
					row2.Soap = ParserUtils.parseTo_Document(document_tSOAP_1);
				
        


 


	tos_count_tSOAP_1++;

/**
 * [tSOAP_1 main ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setOriginalLoop("/soap:Envelope/soap:Body/getEntitiesUsingSchemaResponse/getEntitiesUsingSchemaResult/BizAgiWSResponse/Entities/M_ProductosCargados");
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setIsOptional(false);
				if(row2.Soap == null || row2.Soap.getDocument() == null) {
					throw new RuntimeException("row2.Soap can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT = row2.Soap.getDocument();
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setDoc(doc_tXMLMap_1_TXMLMAP_OUT);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[2];
				String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[2];
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "row2.Soap:/soap:Envelope/soap:Body/getEntitiesUsingSchemaResponse/getEntitiesUsingSchemaResult/BizAgiWSResponse/Entities/M_ProductosCargados/@key";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "@key";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "row2.Soap:/soap:Envelope/soap:Body/getEntitiesUsingSchemaResponse/getEntitiesUsingSchemaResult/BizAgiWSResponse/Entities/M_ProductosCargados/SKU";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "SKU";
				
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_1_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT = docToFlat_tXMLMap_1_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT: resultSet_tXMLMap_1_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_1_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT : oneRow_tXMLMap_1_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT.getKey(),entry_tXMLMap_1_TXMLMAP_OUT.getValue());
					}
					


			

			
				///////////////////////////////////////////////
				//Starting Lookup Table "org.talend.designer.xmlmap.model.emf.xmlmap.impl.InputXmlTreeImpl@18137f3e (expressionFilter: null, activateExpressionFilter: false, activateCondensedTool: true, minimized: false, name: row3, multiLoops: false) (lookup: true, matchingMode: ALL_MATCHES, lookupMode: LOAD_ONCE, innerJoin: false, persistent: false, activateGlobalMap: false)" 
				///////////////////////////////////////////////
				//tHash_Lookup_row3.initGet();
				
				
				
					boolean forceLooprow3 = false;
					row3Struct row3ObjectFromLookup = null;
					boolean hasResultFromLookupCacherow3 = false;
					java.util.Map<String,Object> cacheResultrow3 = new java.util.HashMap<String,Object>();
				
				
				
					   	row3HashKey.SKU = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row2.Soap:/soap:Envelope/soap:Body/getEntitiesUsingSchemaResponse/getEntitiesUsingSchemaResult/BizAgiWSResponse/Entities/M_ProductosCargados/SKU");
						row3HashKey.hashCodeDirty = true;
						
					
					
						if(!rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT){//TD120
							
					
							
								
									tHash_Lookup_row3.lookup( row3HashKey );
								
							
							if(hasResultFromLookupCacherow3  || tHash_Lookup_row3.hasNext()){
							
							} else {
								
									row3 = row3Default;
								
								
								
								forceLooprow3 = true;
								
							}
						}//TD120
				   
				   		
				   			if(rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT) {
				   				forceLooprow3 = true;
				   			}
				   		
				   
				   		row3Struct fromLookup_row3 = null;
						row3 = row3Default;
				   
				   		
				  		
				  		//////////////////////////////////////////////////////////////////////////////////////////////
				  		
				  		boolean fromCacherow3 = hasResultFromLookupCacherow3;
				  		List<java.util.Map<String,Object>> multipleResultSetrow3 = new java.util.ArrayList<java.util.Map<String,Object>>();
				  		//the var for cache the row3Struct
				  		java.util.Map<String,Object> oneRow_row3 = null;
						if(hasResultFromLookupCacherow3) {
					    	
					    } else if(!rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT) {
					    	
					    	while (tHash_Lookup_row3.hasNext()) {
					    		fromLookup_row3 = null;
								row3 = row3Default;
								fromLookup_row3 = tHash_Lookup_row3.next();
								if(fromLookup_row3 != null) {
								
										
									row3 = fromLookup_row3;
									//construct the resultset for mutiple lookup when no document lookup.
									oneRow_row3 = new java.util.HashMap<String, Object>();
									oneRow_row3.put("row3",row3);
									multipleResultSetrow3.add(oneRow_row3);
									
								}
					    	}//end while
					    	
					    }//end else if
					    //now not support cache all_matches lookup
					    
					    
					    
					    
					    java.util.Iterator<java.util.Map<String,Object>> iterrow3 = multipleResultSetrow3.iterator();
					    while(iterrow3.hasNext() || forceLooprow3) { // G_TM_M_002
					    	row3 = row3Default;
					    	row3Struct tempLookuprow3 = null; 
					    	if(!forceLooprow3) {
						    	java.util.Map<String,Object> oneRowrow3 = iterrow3.next();
						   		
					    		tempLookuprow3 = (row3Struct)oneRowrow3.get("row3");
					    		if(tempLookuprow3!=null) {
					    			row3 = tempLookuprow3;
					    		}
					    		
					    		
				    		}
				    		forceLooprow3 = false;
				  		
				  		/////////////////////////////////////////////////////////////////////////////////////////////////
				  		
					
				
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output tables

unidos = null;


// # Output table : 'unidos'

unidos_tmp = new unidosStruct();
unidos_tmp.idM_ProductosCargados = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Integer("row2.Soap:/soap:Envelope/soap:Body/getEntitiesUsingSchemaResponse/getEntitiesUsingSchemaResult/BizAgiWSResponse/Entities/M_ProductosCargados/@key");
unidos_tmp.SKU = row3.SKU;
unidos_tmp.Evento = row3.Evento;allOutsForAggregate_tXMLMap_1.add(unidos_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;


		}// G_TM_M_002
		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_1_TXMLMAP_OUT++;

/**
 * [tXMLMap_1_TXMLMAP_OUT main ] stop
 */



	
	/**
	 * [tSOAP_1 end ] start
	 */

	

	
	
	currentComponent="tSOAP_1";

	
soapUtil_tSOAP_1.close();

 

ok_Hash.put("tSOAP_1", true);
end_Hash.put("tSOAP_1", System.currentTimeMillis());




/**
 * [tSOAP_1 end ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_OUT end ] stop
 */




	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		
    	class BytesLimit65535_tAggregateRow_2_AGGOUT{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_2_AGGOUT().limitLog4jByte();

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
int count = 0;
       			int Cantidad_clmCount = 0;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tAdvancedFileOutputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedFileOutputXML_1", false);
		start_Hash.put("tAdvancedFileOutputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedFileOutputXML_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("armarXML1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedFileOutputXML_1 = 0;
		
    	class BytesLimit65535_tAdvancedFileOutputXML_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedFileOutputXML_1().limitLog4jByte();




			int nb_line_tAFOX_1 = 0;

			
				boolean	needRoot_tAFOX_1 = true;
			
			String fileName_tAFOX_1 = context.EventoSKU_XMLtemp;
			Boolean alreadyExistsFile_tAFOX_1 = new java.io.File(fileName_tAFOX_1).exists();
			fileName_tAFOX_1 = new java.io.File(fileName_tAFOX_1).getAbsolutePath().replace("\\", "/");
			
			String fileNameWithoutSuffix_tAFOX_1 = "";
			
			if (fileName_tAFOX_1.indexOf("/") < 0) {
				throw new IllegalArgumentException("not a correct file name.");				
			} else {
				String tail_tAFOX_1 = fileName_tAFOX_1.substring(fileName_tAFOX_1.lastIndexOf("/"));
				fileNameWithoutSuffix_tAFOX_1 = tail_tAFOX_1.lastIndexOf(".") > 0 ? fileName_tAFOX_1.substring(0, fileName_tAFOX_1.lastIndexOf(".")) : fileName_tAFOX_1;
			}
			
			final String file_tAFOX_1 = fileNameWithoutSuffix_tAFOX_1;
			
			java.io.File createFiletAFOX_1 = new java.io.File(fileName_tAFOX_1); 

			
				if (!createFiletAFOX_1.exists()) { 
					(new java.io.File(fileName_tAFOX_1.substring(0,fileName_tAFOX_1.lastIndexOf("/")))).mkdirs(); 
					needRoot_tAFOX_1=true;
				}
			
		java.util.List<java.util.List<String>> groupbyList_tAFOX_1 = new java.util.ArrayList<java.util.List<String>>();
		final java.util.Map<String,String> valueMap_tAFOX_1 = new java.util.HashMap<String,String>();
		

		

			class NestXMLTool_tAFOX_1 {
				public void parseAndAdd(org.dom4j.Element nestRoot, String value) {
					try {
						org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
						nestRoot.setContent(doc4Str.getRootElement().content());
					} catch (java.lang.Exception e) {
						nestRoot.setText(value);
					}
				}

				public void setText(org.dom4j.Element element, String value) {
					if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
						String text = value.substring(9, value.length()-3);
						element.addCDATA(text);
					} else {
						element.setText(value);
					}
				}
				public void appendContent(org.dom4j.Element element, org.dom4j.Document doc) {
					element.appendContent(doc);
				}
				public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
					if (nestRoot != null) {
						boolean isDefaultNameSpaceAtRoot = "".equals(nestRoot.getQName().getNamespace().getPrefix());
						for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
							if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix()) && isDefaultNameSpaceAtRoot) {
								tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
							}
							replaceDefaultNameSpace(tmp);
						}
					}
				}

				public void removeEmptyElement(org.dom4j.Element root) {
					if (root != null) {
						for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
							removeEmptyElement(tmp);
						}
						if (root.content().size() == 0 
							&& root.attributes().size() == 0 
								&& root.declaredNamespaces().size() == 0) {
							if (root.getParent() != null) {
								root.getParent().remove(root);
							}
						}
					}
				}
				
				/**
				 * remove the whiteSpace Node between the elements when appending the source file under dom4j
				 * @param root
				 */
				public void removeWhiteSpaceTextNode(org.dom4j.Element root) {
					if(root != null) {
						List<org.dom4j.Node> textNodes = new java.util.ArrayList<org.dom4j.Node>();
						for (int i=0; i< root.nodeCount(); i++) {
							if (root.node(i).getNodeType()==org.dom4j.Node.ELEMENT_NODE) {
								removeWhiteSpaceTextNode((org.dom4j.Element)root.node(i));
							} else if(root.node(i).getNodeType()==org.dom4j.Node.TEXT_NODE) {
								textNodes.add(root.node(i));
							} 
						}
						if(root.nodeCount() > 1) { // when root.nodeCount==1, that means the text node is the content of the element
							for (org.dom4j.Node textNode: textNodes) {
								if(textNode.getText()==null || "".equals(textNode.getText().trim())) {
									root.remove(textNode);
								} 
							}
						}
					}
				}
				/**
				 * Get element by QNames which get from the path
				 */
				public org.dom4j.Element getElement(org.dom4j.Element parent,String[] elemNames){
					if(parent==null){
						return null;
					}
					org.dom4j.Element tempElem = parent;
					for(int i=0;elemNames != null && i<elemNames.length; i++){
						tempElem=tempElem.element(parent.getQName(elemNames[i]));
						if(tempElem==null){
							return null;
						}
					}
					return tempElem;
				}
			}

			final NestXMLTool_tAFOX_1 nestXMLTool_tAFOX_1 = new NestXMLTool_tAFOX_1();
			// sort group root element for judgement of group
			java.util.List<org.dom4j.Element> groupElementList_tAFOX_1 = new java.util.ArrayList<org.dom4j.Element>();
			org.dom4j.Element root4Group_tAFOX_1 = null;
			org.dom4j.Document doc_tAFOX_1=null;
			
			final java.util.Map<String,org.dom4j.Branch> nameToElement_tAFOX_1 = new java.util.HashMap<String,org.dom4j.Branch>();

			
				doc_tAFOX_1=org.dom4j.DocumentHelper.createDocument();
			
				org.dom4j.io.OutputFormat format_tAFOX_1 = org.dom4j.io.OutputFormat.createPrettyPrint();
			
			format_tAFOX_1.setTrimText(false);
			format_tAFOX_1.setEncoding("UTF-8");
			
			final int[] orders_tAFOX_1 = new int[1];
		

 



/**
 * [tAdvancedFileOutputXML_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("unidos" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		
    	class BytesLimit65535_tLogRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogRow_1().limitLog4jByte();

 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tXMLMap_1_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	
		int tos_count_tXMLMap_1_TXMLMAP_IN = 0;
		
    	class BytesLimit65535_tXMLMap_1_TXMLMAP_IN{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tXMLMap_1_TXMLMAP_IN().limitLog4jByte();
java.util.List<Object> outs_tXMLMap_1 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_1");
for(Object  row_out_tXMLMap_1_TXMLMAP_IN : outs_tXMLMap_1) {//TD512
 



/**
 * [tXMLMap_1_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

	unidos = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof unidosStruct) {
		unidos = (unidosStruct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_1_TXMLMAP_IN++;

/**
 * [tXMLMap_1_TXMLMAP_IN main ] stop
 */
// Start of branch "unidos"
if(unidos != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//unidos
			//unidos


			
				if(execStat){
					runStat.updateStatOnConnection("unidos"+iterateId,1, 1);
				} 
			

		

 
     armarXML1 = unidos;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */

	
	/**
	 * [tAdvancedFileOutputXML_1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedFileOutputXML_1";

	

			//armarXML1
			//armarXML1


			
				if(execStat){
					runStat.updateStatOnConnection("armarXML1"+iterateId,1, 1);
				} 
			

		






	nb_line_tAFOX_1++;
	valueMap_tAFOX_1.clear();
	valueMap_tAFOX_1.put("idM_ProductosCargados", 
	(
		unidos.idM_ProductosCargados != null?
            unidos.idM_ProductosCargados.toString():null
		));
	valueMap_tAFOX_1.put("SKU", 
	(
		unidos.SKU != null?
            unidos.SKU.toString():null
		));
	valueMap_tAFOX_1.put("Evento", 
	(
		unidos.Evento != null?
            unidos.Evento.toString():null
		));
	
		org.dom4j.Element subTreeRootParent_tAFOX_1 = null;
	
	// build root xml tree 
	if (needRoot_tAFOX_1) {
		needRoot_tAFOX_1=false;
		if(orders_tAFOX_1.length>0){
			orders_tAFOX_1[0] = 0;
		}
		org.dom4j.Element root_tAFOX_1 = null;
		
		root_tAFOX_1 = doc_tAFOX_1.addElement("soapenv:Envelope");
		    
		root_tAFOX_1.addAttribute("xmlns:soapenv", "http://schemas.xmlsoap.org/soap/envelope/");
		    
		root_tAFOX_1.addAttribute("xmlns:tem", "http://tempuri.org/");
			
		root_tAFOX_1.setName("soapenv:Envelope");
		org.dom4j.Element root_0_tAFOX_1 = null;
		if (
		root_tAFOX_1.getNamespaceForPrefix("soapenv") == null) {
		root_0_tAFOX_1 = root_tAFOX_1.addElement("Header");
        } else {
        	
		root_0_tAFOX_1 = root_tAFOX_1.addElement("soapenv:Header");
        }
			
		root_0_tAFOX_1.setName("soapenv:Header");
		org.dom4j.Element root_1_tAFOX_1 = null;
		if (
		root_tAFOX_1.getNamespaceForPrefix("soapenv") == null) {
		root_1_tAFOX_1 = root_tAFOX_1.addElement("Body");
        } else {
        	
		root_1_tAFOX_1 = root_tAFOX_1.addElement("soapenv:Body");
        }
			
		root_1_tAFOX_1.setName("soapenv:Body");
		org.dom4j.Element root_1_0_tAFOX_1 = null;
		if (
		root_1_tAFOX_1.getNamespaceForPrefix("tem") == null) {
		root_1_0_tAFOX_1 = root_1_tAFOX_1.addElement("saveEntity");
        } else {
        	
		root_1_0_tAFOX_1 = root_1_tAFOX_1.addElement("tem:saveEntity");
        }
			
		root_1_0_tAFOX_1.setName("tem:saveEntity");
		org.dom4j.Element root_1_0_0_tAFOX_1 = null;
		if (
		root_1_0_tAFOX_1.getNamespaceForPrefix("tem") == null) {
		root_1_0_0_tAFOX_1 = root_1_0_tAFOX_1.addElement("entityInfo");
        } else {
        	
		root_1_0_0_tAFOX_1 = root_1_0_tAFOX_1.addElement("tem:entityInfo");
        }
			
		root_1_0_0_tAFOX_1.setName("tem:entityInfo");
		org.dom4j.Element root_1_0_0_0_tAFOX_1 = null;
		
		root_1_0_0_0_tAFOX_1 = root_1_0_0_tAFOX_1.addElement("BizAgiWSParam");
		org.dom4j.Element root_1_0_0_0_0_tAFOX_1 = null;
		
		root_1_0_0_0_0_tAFOX_1 = root_1_0_0_0_tAFOX_1.addElement("Entities");
		
		subTreeRootParent_tAFOX_1 = root_1_0_0_0_0_tAFOX_1;
		root4Group_tAFOX_1 =  
		subTreeRootParent_tAFOX_1;
	}else{
		
		subTreeRootParent_tAFOX_1=root4Group_tAFOX_1;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tAFOX_1 = null;
		
		loop_tAFOX_1 = org.dom4j.DocumentHelper.createElement("M_ProductosCargados");
        if(orders_tAFOX_1[0]==0){
        	orders_tAFOX_1[0] = 0;
        }
        if(1 < orders_tAFOX_1.length){
        		orders_tAFOX_1[1] = 0;
        }
		subTreeRootParent_tAFOX_1.elements().add(orders_tAFOX_1[0]++,
		loop_tAFOX_1); 
		  if (
		valueMap_tAFOX_1.get("idM_ProductosCargados") != null){
			
		loop_tAFOX_1.addAttribute("key", 
		valueMap_tAFOX_1.get("idM_ProductosCargados"));
		  } 
		org.dom4j.Element loop_0_tAFOX_1 = null;
		
		loop_0_tAFOX_1 = loop_tAFOX_1.addElement("Evento");
					if(
		valueMap_tAFOX_1.get("Evento")!=null){
						nestXMLTool_tAFOX_1 .setText(
		loop_0_tAFOX_1,
		valueMap_tAFOX_1.get("Evento"));
					}

 
     row4 = armarXML1;


	tos_count_tAdvancedFileOutputXML_1++;

/**
 * [tAdvancedFileOutputXML_1 main ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		
	


	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		
		
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
				operation_result_tAggregateRow_2.Cantidad_clmCount++;
				operation_result_tAggregateRow_2.count++;
				


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */







} // End of branch "unidos"




	
	/**
	 * [tXMLMap_1_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_1_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("unidos"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tAdvancedFileOutputXML_1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedFileOutputXML_1";

	









		nameToElement_tAFOX_1.clear();
	java.io.FileOutputStream stream_tAFOX_1 = new java.io.FileOutputStream(fileName_tAFOX_1);    
	org.dom4j.io.XMLWriter output_tAFOX_1 = new org.dom4j.io.XMLWriter(stream_tAFOX_1, format_tAFOX_1);
	if(doc_tAFOX_1.getRootElement()!=null){  
    	nestXMLTool_tAFOX_1.replaceDefaultNameSpace(doc_tAFOX_1.getRootElement());
    	output_tAFOX_1.write(doc_tAFOX_1);
    }
    output_tAFOX_1.close();
globalMap.put("tAdvancedFileOutputXML_1_NB_LINE",nb_line_tAFOX_1);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("armarXML1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedFileOutputXML_1", true);
end_Hash.put("tAdvancedFileOutputXML_1", System.currentTimeMillis());




/**
 * [tAdvancedFileOutputXML_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */


	
	/**
	 * [tSetGlobalVar_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_2", false);
		start_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("conteo1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSetGlobalVar_2 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_2().limitLog4jByte();

 



/**
 * [tSetGlobalVar_2 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		
    	class BytesLimit65535_tAggregateRow_2_AGGIN{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_2_AGGIN().limitLog4jByte();

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	
conteo1.Cantidad = (int) aggregated_row_tAggregateRow_2.count;
	                                	conteo1.Cantidad = (int) aggregated_row_tAggregateRow_2.Cantidad_clmCount;
	                                	

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */

	
	/**
	 * [tSetGlobalVar_2 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

			//conteo1
			//conteo1


			
				if(execStat){
					runStat.updateStatOnConnection("conteo1"+iterateId,1, 1);
				} 
			

		

globalMap.put("CantidadFilas", conteo1.Cantidad);

 


	tos_count_tSetGlobalVar_2++;

/**
 * [tSetGlobalVar_2 main ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tSetGlobalVar_2 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("conteo1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSetGlobalVar_2", true);
end_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());

   			if (globalMap.get("CantidadFilas") != null && 
((int)globalMap.get("CantidadFilas")) > 0) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tFileInputXML_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tSetGlobalVar_2 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
				try{
					
	
	/**
	 * [tSOAP_1 finally ] start
	 */

	

	
	
	currentComponent="tSOAP_1";

	

 



/**
 * [tSOAP_1 finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tAdvancedFileOutputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedFileOutputXML_1";

	

 



/**
 * [tAdvancedFileOutputXML_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_2 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSOAP_1_SUBPROCESS_STATE", 1);
	}
	


public static class productosActualizadosStruct implements routines.system.IPersistableRow<productosActualizadosStruct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public Integer idM_ProductosCargados;

				public Integer getIdM_ProductosCargados () {
					return this.idM_ProductosCargados;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
						this.idM_ProductosCargados = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idM_ProductosCargados,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idM_ProductosCargados="+String.valueOf(idM_ProductosCargados));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(productosActualizadosStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class respuestaSaveEntities1Struct implements routines.system.IPersistableRow<respuestaSaveEntities1Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(respuestaSaveEntities1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public String saveEntities;

				public String getSaveEntities () {
					return this.saveEntities;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
					this.saveEntities = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.saveEntities,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("saveEntities="+saveEntities);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];

	
			    public String saveEntities;

				public String getSaveEntities () {
					return this.saveEntities;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
					this.saveEntities = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.saveEntities,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("saveEntities="+saveEntities);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row5Struct row6 = row5;
row7Struct row7 = new row7Struct();
row7Struct respuestaSaveEntities1 = row7;
productosActualizadosStruct productosActualizados = new productosActualizadosStruct();







	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("respuestaSaveEntities1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_2_TXMLMAP_OUT = 0;
		
    	class BytesLimit65535_tXMLMap_2_TXMLMAP_OUT{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tXMLMap_2_TXMLMAP_OUT().limitLog4jByte();

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_2_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_2_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_2_TXMLMAP_OUT__Struct Var__tXMLMap_2_TXMLMAP_OUT = new Var__tXMLMap_2_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
productosActualizadosStruct productosActualizados_tmp = new productosActualizadosStruct();
productosActualizadosStruct productosActualizados_save = null;
//the aggregate variable
productosActualizadosStruct productosActualizados_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_2 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_2",allOutsForAggregate_tXMLMap_2);
// ###############################
class TreeNode_API_tXMLMap_2_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
}
			TreeNode_API_tXMLMap_2_TXMLMAP_OUT treeNodeAPI_tXMLMap_2_TXMLMAP_OUT = new TreeNode_API_tXMLMap_2_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_2_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_2_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_2_TXMLMAP_OUT xml_api_tXMLMap_2_TXMLMAP_OUT = new XML_API_tXMLMap_2_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_2_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_2_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_3 = 0;
		
    	class BytesLimit65535_tLogRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogRow_3().limitLog4jByte();

 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tSOAP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSOAP_2", false);
		start_Hash.put("tSOAP_2", System.currentTimeMillis());
		
	
	currentComponent="tSOAP_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSOAP_2 = 0;
		
    	class BytesLimit65535_tSOAP_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSOAP_2().limitLog4jByte();
 org.talend.soap.SOAPUtil soapUtil_tSOAP_2 = new org.talend.soap.SOAPUtil();

 
	final String decryptedPassword_tSOAP_2 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

 



/**
 * [tSOAP_2 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_2 = 0;
		
    	class BytesLimit65535_tLogRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogRow_2().limitLog4jByte();

 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";

	
		int tos_count_tFileInputXML_1 = 0;
		
    	class BytesLimit65535_tFileInputXML_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputXML_1().limitLog4jByte();

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.EventoSKU_XMLtemp;
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("/","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	nb_line_tFileInputXML_1++;
	row5 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row5 = new row5Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
		str_tFileInputXML_1 = null;
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
		str_tFileInputXML_1 = node_tFileInputXML_1.asXML();
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
		str_tFileInputXML_1 = node_tFileInputXML_1==null?null:node_tFileInputXML_1.asXML();
	}
								row5.saveEntities = str_tFileInputXML_1; 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row5 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

 
     row6 = row5;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */

	
	/**
	 * [tSOAP_2 main ] start
	 */

	

	
	
	currentComponent="tSOAP_2";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

		
		
			String document_tSOAP_2 = soapUtil_tSOAP_2.extractContentAsDocument(org.talend.soap.SOAPUtil.SOAP11,context.BIZhost+"/"+context.BIZprocesoWorkflow+"/webservices/entitymanagersoa.asmx","http://tempuri.org/saveEntity",row6.saveEntities.toString());
		
		
	

	// for output
			
				row7 = new row7Struct();
				
					row7.Soap = ParserUtils.parseTo_Document(document_tSOAP_2);
				
        


 


	tos_count_tSOAP_2++;

/**
 * [tSOAP_2 main ] stop
 */

	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		

 
     respuestaSaveEntities1 = row7;


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	

			//respuestaSaveEntities1
			//respuestaSaveEntities1


			
				if(execStat){
					runStat.updateStatOnConnection("respuestaSaveEntities1"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setOriginalLoop("/soap:Envelope/soap:Body/saveEntityResponse/saveEntityResult/Entities/M_ProductosCargados");
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setIsOptional(false);
				if(respuestaSaveEntities1.Soap == null || respuestaSaveEntities1.Soap.getDocument() == null) {
					throw new RuntimeException("respuestaSaveEntities1.Soap can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT = respuestaSaveEntities1.Soap.getDocument();
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setDoc(doc_tXMLMap_2_TXMLMAP_OUT);
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[1];
				String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[1];
				
				absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "respuestaSaveEntities1.Soap:/soap:Envelope/soap:Body/saveEntityResponse/saveEntityResult/Entities/M_ProductosCargados";
				relativePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = ".";
				
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT);
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_2_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT = docToFlat_tXMLMap_2_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT: resultSet_tXMLMap_2_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_2_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT : oneRow_tXMLMap_2_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT.getKey(),entry_tXMLMap_2_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output tables

productosActualizados = null;


// # Output table : 'productosActualizados'

productosActualizados_tmp = new productosActualizadosStruct();
productosActualizados_tmp.idM_ProductosCargados = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Integer("respuestaSaveEntities1.Soap:/soap:Envelope/soap:Body/saveEntityResponse/saveEntityResult/Entities/M_ProductosCargados");allOutsForAggregate_tXMLMap_2.add(productosActualizados_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_2_TXMLMAP_OUT++;

/**
 * [tXMLMap_2_TXMLMAP_OUT main ] stop
 */










} // End of branch "row5"




	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	
 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tSOAP_2 end ] start
	 */

	

	
	
	currentComponent="tSOAP_2";

	
soapUtil_tSOAP_2.close();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSOAP_2", true);
end_Hash.put("tSOAP_2", System.currentTimeMillis());




/**
 * [tSOAP_2 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("respuestaSaveEntities1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_2_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("productosActualizados" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.EventoSKU_CSVProductosActualizados)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
                String[] headColutFileOutputDelimited_1=new String[1];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(";");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true), "UTF-8")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                    headColutFileOutputDelimited_1[0]="idM_ProductosCargados";
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tXMLMap_2_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_2_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	
		int tos_count_tXMLMap_2_TXMLMAP_IN = 0;
		
    	class BytesLimit65535_tXMLMap_2_TXMLMAP_IN{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tXMLMap_2_TXMLMAP_IN().limitLog4jByte();
java.util.List<Object> outs_tXMLMap_2 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_2");
for(Object  row_out_tXMLMap_2_TXMLMAP_IN : outs_tXMLMap_2) {//TD512
 



/**
 * [tXMLMap_2_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

	productosActualizados = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof productosActualizadosStruct) {
		productosActualizados = (productosActualizadosStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_2_TXMLMAP_IN++;

/**
 * [tXMLMap_2_TXMLMAP_IN main ] stop
 */
// Start of branch "productosActualizados"
if(productosActualizados != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//productosActualizados
			//productosActualizados


			
				if(execStat){
					runStat.updateStatOnConnection("productosActualizados"+iterateId,1, 1);
				} 
			

		


                        String[] rowtFileOutputDelimited_1=new String[1];
                            rowtFileOutputDelimited_1[0]=productosActualizados.idM_ProductosCargados == null ? null : String.valueOf(productosActualizados.idM_ProductosCargados);
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */

} // End of branch "productosActualizados"




	
	/**
	 * [tXMLMap_2_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_2_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_2_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("productosActualizados"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tSOAP_2 finally ] start
	 */

	

	
	
	currentComponent="tSOAP_2";

	

 



/**
 * [tSOAP_2 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_2_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_2_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Desa");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_1.put("ExcelImportacion", context.ExcelImportacion);
			paraList_tRunJob_1.add("--context_type " + "ExcelImportacion" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLOrigen", context.XMLOrigen);
			paraList_tRunJob_1.add("--context_type " + "XMLOrigen" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLProductosCargados", context.XMLProductosCargados);
			paraList_tRunJob_1.add("--context_type " + "XMLProductosCargados" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelExportacion", context.ExcelExportacion);
			paraList_tRunJob_1.add("--context_type " + "ExcelExportacion" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelRechazados", context.ExcelRechazados);
			paraList_tRunJob_1.add("--context_type " + "ExcelRechazados" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLDDRegistrosCargados", context.XMLDDRegistrosCargados);
			paraList_tRunJob_1.add("--context_type " + "XMLDDRegistrosCargados" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLFlagFoto", context.XMLFlagFoto);
			paraList_tRunJob_1.add("--context_type " + "XMLFlagFoto" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLProgramacion", context.XMLProgramacion);
			paraList_tRunJob_1.add("--context_type " + "XMLProgramacion" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLTempAgrupado", context.XMLTempAgrupado);
			paraList_tRunJob_1.add("--context_type " + "XMLTempAgrupado" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelLogCreados", context.ExcelLogCreados);
			paraList_tRunJob_1.add("--context_type " + "ExcelLogCreados" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelLogFallidos", context.ExcelLogFallidos);
			paraList_tRunJob_1.add("--context_type " + "ExcelLogFallidos" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelLogXML", context.ExcelLogXML);
			paraList_tRunJob_1.add("--context_type " + "ExcelLogXML" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLPais", context.XMLPais);
			paraList_tRunJob_1.add("--context_type " + "XMLPais" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("SalidaCSV", context.SalidaCSV);
			paraList_tRunJob_1.add("--context_type " + "SalidaCSV" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_1.put("ExcelSKU", context.ExcelSKU);
			paraList_tRunJob_1.add("--context_type " + "ExcelSKU" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("XMLDatamart", context.XMLDatamart);
			paraList_tRunJob_1.add("--context_type " + "XMLDatamart" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExtelDatamart", context.ExtelDatamart);
			paraList_tRunJob_1.add("--context_type " + "ExtelDatamart" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("XMLGetEntitiesM_Informaciondeproceso", context.XMLGetEntitiesM_Informaciondeproceso);
			paraList_tRunJob_1.add("--context_type " + "XMLGetEntitiesM_Informaciondeproceso" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("CSVM_Informaciondeproceso", context.CSVM_Informaciondeproceso);
			paraList_tRunJob_1.add("--context_type " + "CSVM_Informaciondeproceso" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelM_Informaciondeproceso", context.ExcelM_Informaciondeproceso);
			paraList_tRunJob_1.add("--context_type " + "ExcelM_Informaciondeproceso" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelExtrasInformaciondeProceso", context.ExcelExtrasInformaciondeProceso);
			paraList_tRunJob_1.add("--context_type " + "ExcelExtrasInformaciondeProceso" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("TXTM_Informaciondeproceso", context.TXTM_Informaciondeproceso);
			paraList_tRunJob_1.add("--context_type " + "TXTM_Informaciondeproceso" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("EventoSKU_ExcelCarga", context.EventoSKU_ExcelCarga);
			paraList_tRunJob_1.add("--context_type " + "EventoSKU_ExcelCarga" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("BIZprocesoWorkflow", context.BIZprocesoWorkflow);
			paraList_tRunJob_1.add("--context_type " + "BIZprocesoWorkflow" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("BIZhost", context.BIZhost);
			paraList_tRunJob_1.add("--context_type " + "BIZhost" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("BIZhostOP", context.BIZhostOP);
			paraList_tRunJob_1.add("--context_type " + "BIZhostOP" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("BIZprocesoDDOP", context.BIZprocesoDDOP);
			paraList_tRunJob_1.add("--context_type " + "BIZprocesoDDOP" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("BIZprocesoDD", context.BIZprocesoDD);
			paraList_tRunJob_1.add("--context_type " + "BIZprocesoDD" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("BIZprocesoWorkflowOP", context.BIZprocesoWorkflowOP);
			paraList_tRunJob_1.add("--context_type " + "BIZprocesoWorkflowOP" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("EventoSKU_XMLtemp", context.EventoSKU_XMLtemp);
			paraList_tRunJob_1.add("--context_type " + "EventoSKU_XMLtemp" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("EventoSKU_CSVProductosActualizados", context.EventoSKU_CSVProductosActualizados);
			paraList_tRunJob_1.add("--context_type " + "EventoSKU_CSVProductosActualizados" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("Limite", context.Limite);
			paraList_tRunJob_1.add("--context_type " + "Limite" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("Aumento", context.Aumento);
			paraList_tRunJob_1.add("--context_type " + "Aumento" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("Inicial", context.Inicial);
			paraList_tRunJob_1.add("--context_type " + "Inicial" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("CantidadActual", context.CantidadActual);
			paraList_tRunJob_1.add("--context_type " + "CantidadActual" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("Final", context.Final);
			paraList_tRunJob_1.add("--context_type " + "Final" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("EventoSKU_ListaSKU", context.EventoSKU_ListaSKU);
			paraList_tRunJob_1.add("--context_type " + "EventoSKU_ListaSKU" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		falabella___middleware.actualizareventosku_padre_0_2.ActualizarEventoSKU_Padre childJob_tRunJob_1 = new falabella___middleware.actualizareventosku_padre_0_2.ActualizarEventoSKU_Padre();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SKU;

				public String getSKU () {
					return this.SKU;
				}
				
			    public String Evento;

				public String getEvento () {
					return this.Evento;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SKU == null) ? 0 : this.SKU.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.SKU == null) {
							if (other.SKU != null)
								return false;
						
						} else if (!this.SKU.equals(other.SKU))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.SKU = this.SKU;
	            other.Evento = this.Evento;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.SKU = this.SKU;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Hijo) {

        	try {

        		int length = 0;
		
					this.SKU = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SKU,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Evento = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Evento, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SKU="+SKU);
		sb.append(",Evento="+Evento);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SKU, other.SKU);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedXMLMapHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedXMLMapHash_row3", false);
		start_Hash.put("tAdvancedXMLMapHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedXMLMapHash_row3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedXMLMapHash_row3 = 0;
		
    	class BytesLimit65535_tAdvancedXMLMapHash_row3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedXMLMapHash_row3().limitLog4jByte();

			   		// connection name:row3
			   		// source node:tFileInputExcel_2 - inputs:(after_tSOAP_1) outputs:(row3,row3) | target node:tAdvancedXMLMapHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tXMLMap_1 - inputs:(row2,row3) outputs:(unidos)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   
			   
	   				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = 
	   					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);

		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
            

 



/**
 * [tAdvancedXMLMapHash_row3 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		
    	class BytesLimit65535_tFileInputExcel_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_2().limitLog4jByte();


		Object source_tFileInputExcel_2 = context.EventoSKU_ExcelCarga;
		com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof java.io.InputStream || source_tFileInputExcel_2 instanceof String){
			excelReader_tFileInputExcel_2 = new com.talend.excel.xssf.event.ExcelReader();
		}else{
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}

		try {
		excelReader_tFileInputExcel_2.addSheetName("Hoja1", false);
		int start_column_tFileInputExcel_2 = 1-1;
		int end_column_tFileInputExcel_2 = -1;
		if(start_column_tFileInputExcel_2 >=0) {//follow start column
			
				end_column_tFileInputExcel_2 = start_column_tFileInputExcel_2 + 2 - 1;
			
		} else if(end_column_tFileInputExcel_2 >= 0) {//follow end column
			start_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 - 2 + 1;
		}

		if(end_column_tFileInputExcel_2<0 || start_column_tFileInputExcel_2<0) {
			throw new RuntimeException("Error start column and end column.");
		}
		int actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 ;

		int header_tFileInputExcel_2 = 1;
		int limit_tFileInputExcel_2 = -1;

		int nb_line_tFileInputExcel_2 = 0;

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();

		if(source_tFileInputExcel_2 instanceof String){
			excelReader_tFileInputExcel_2.parse((String)source_tFileInputExcel_2,"UTF-8");
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
			excelReader_tFileInputExcel_2.parse((java.io.InputStream)source_tFileInputExcel_2,"UTF-8");
		}
		


		while((header_tFileInputExcel_2--)>0 && excelReader_tFileInputExcel_2.hasNext()) {//skip the header
			excelReader_tFileInputExcel_2.next();
		}

		
		while(excelReader_tFileInputExcel_2.hasNext()) {
			int emptyColumnCount_tFileInputExcel_2 = 0;

			if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
				excelReader_tFileInputExcel_2.stopRead();
        		break;
        	}

        	java.util.List<String> row_tFileInputExcel_2 = excelReader_tFileInputExcel_2.next();
		row3 = null;
		row3 = null;
					int tempRowLength_tFileInputExcel_2 = 2;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
					
		String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
		
		for(int i_tFileInputExcel_2=0;i_tFileInputExcel_2 < tempRowLength_tFileInputExcel_2;i_tFileInputExcel_2++){
			int current_tFileInputExcel_2 = i_tFileInputExcel_2 + start_column_tFileInputExcel_2;
			if(current_tFileInputExcel_2 <= actual_end_column_tFileInputExcel_2){
				if(current_tFileInputExcel_2 < row_tFileInputExcel_2.size()){
					String column_tFileInputExcel_2 = row_tFileInputExcel_2.get(current_tFileInputExcel_2);
					if(column_tFileInputExcel_2!=null) {
						temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = column_tFileInputExcel_2;
					} else {
						temp_row_tFileInputExcel_2[i_tFileInputExcel_2]="";
					}
				} else {
					temp_row_tFileInputExcel_2[i_tFileInputExcel_2]="";
				}
			} else {
				temp_row_tFileInputExcel_2[i_tFileInputExcel_2]="";
			}
		}

		boolean whetherReject_tFileInputExcel_2 = false;
		row3 = new row3Struct();
		int curColNum_tFileInputExcel_2 = -1;
		String curColName_tFileInputExcel_2 = "";

		try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "SKU";

				row3.SKU = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row3.SKU = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Evento";

				row3.Evento = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row3.Evento = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
			nb_line_tFileInputExcel_2++;
			
		} catch(java.lang.Exception e) {
			whetherReject_tFileInputExcel_2 = true;
					 System.err.println(e.getMessage());
					 row3 = null;
			}

        		




 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tAdvancedXMLMapHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedXMLMapHash_row3";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		


			   
			   

					row3Struct row3_HashRow = new row3Struct();
					
				
					row3_HashRow.SKU = row3.SKU;
					
					row3_HashRow.Evento = row3.Evento;
					
					tHash_Lookup_row3.put(row3_HashRow);
				
            




 


	tos_count_tAdvancedXMLMapHash_row3++;

/**
 * [tAdvancedXMLMapHash_row3 main ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			try {
				if(excelReader_tFileInputExcel_2!=null) {
					excelReader_tFileInputExcel_2.handleException();
				}
			} catch(java.lang.Exception e_tFileInputExcel_2) {
				if(!(e_tFileInputExcel_2.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {
				
					
				System.err.println(e_tFileInputExcel_2.getMessage());	
				
				}
			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
		} finally { 
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tAdvancedXMLMapHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedXMLMapHash_row3";

	

tHash_Lookup_row3.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedXMLMapHash_row3", true);
end_Hash.put("tAdvancedXMLMapHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedXMLMapHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tAdvancedXMLMapHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedXMLMapHash_row3";

	

 



/**
 * [tAdvancedXMLMapHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Desa";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ActualizarEventoSKU_Hijo ActualizarEventoSKU_HijoClass = new ActualizarEventoSKU_Hijo();

        int exitCode = ActualizarEventoSKU_HijoClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ActualizarEventoSKU_Hijo.class.getClassLoader().getResourceAsStream("falabella___middleware/actualizareventosku_hijo_0_2/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("ExcelImportacion", "id_File");
				
                context.ExcelImportacion=(String) context.getProperty("ExcelImportacion");
				    context.setContextType("XMLOrigen", "id_File");
				
                context.XMLOrigen=(String) context.getProperty("XMLOrigen");
				    context.setContextType("XMLProductosCargados", "id_File");
				
                context.XMLProductosCargados=(String) context.getProperty("XMLProductosCargados");
				    context.setContextType("ExcelExportacion", "id_File");
				
                context.ExcelExportacion=(String) context.getProperty("ExcelExportacion");
				    context.setContextType("ExcelRechazados", "id_File");
				
                context.ExcelRechazados=(String) context.getProperty("ExcelRechazados");
				    context.setContextType("XMLDDRegistrosCargados", "id_File");
				
                context.XMLDDRegistrosCargados=(String) context.getProperty("XMLDDRegistrosCargados");
				    context.setContextType("XMLFlagFoto", "id_File");
				
                context.XMLFlagFoto=(String) context.getProperty("XMLFlagFoto");
				    context.setContextType("XMLProgramacion", "id_File");
				
                context.XMLProgramacion=(String) context.getProperty("XMLProgramacion");
				    context.setContextType("XMLTempAgrupado", "id_File");
				
                context.XMLTempAgrupado=(String) context.getProperty("XMLTempAgrupado");
				    context.setContextType("ExcelLogCreados", "id_File");
				
                context.ExcelLogCreados=(String) context.getProperty("ExcelLogCreados");
				    context.setContextType("ExcelLogFallidos", "id_File");
				
                context.ExcelLogFallidos=(String) context.getProperty("ExcelLogFallidos");
				    context.setContextType("ExcelLogXML", "id_File");
				
                context.ExcelLogXML=(String) context.getProperty("ExcelLogXML");
				    context.setContextType("XMLPais", "id_File");
				
                context.XMLPais=(String) context.getProperty("XMLPais");
				    context.setContextType("SalidaCSV", "id_Directory");
				
                context.SalidaCSV=(String) context.getProperty("SalidaCSV");
				    context.setContextType("ExcelSKU", "id_String");
				
                context.ExcelSKU=(String) context.getProperty("ExcelSKU");
				    context.setContextType("XMLDatamart", "id_File");
				
                context.XMLDatamart=(String) context.getProperty("XMLDatamart");
				    context.setContextType("ExtelDatamart", "id_String");
				
                context.ExtelDatamart=(String) context.getProperty("ExtelDatamart");
				    context.setContextType("XMLGetEntitiesM_Informaciondeproceso", "id_File");
				
                context.XMLGetEntitiesM_Informaciondeproceso=(String) context.getProperty("XMLGetEntitiesM_Informaciondeproceso");
				    context.setContextType("CSVM_Informaciondeproceso", "id_File");
				
                context.CSVM_Informaciondeproceso=(String) context.getProperty("CSVM_Informaciondeproceso");
				    context.setContextType("ExcelM_Informaciondeproceso", "id_File");
				
                context.ExcelM_Informaciondeproceso=(String) context.getProperty("ExcelM_Informaciondeproceso");
				    context.setContextType("ExcelExtrasInformaciondeProceso", "id_File");
				
                context.ExcelExtrasInformaciondeProceso=(String) context.getProperty("ExcelExtrasInformaciondeProceso");
				    context.setContextType("TXTM_Informaciondeproceso", "id_File");
				
                context.TXTM_Informaciondeproceso=(String) context.getProperty("TXTM_Informaciondeproceso");
				    context.setContextType("EventoSKU_ExcelCarga", "id_File");
				
                context.EventoSKU_ExcelCarga=(String) context.getProperty("EventoSKU_ExcelCarga");
				    context.setContextType("BIZprocesoWorkflow", "id_String");
				
                context.BIZprocesoWorkflow=(String) context.getProperty("BIZprocesoWorkflow");
				    context.setContextType("BIZhost", "id_String");
				
                context.BIZhost=(String) context.getProperty("BIZhost");
				    context.setContextType("BIZhostOP", "id_String");
				
                context.BIZhostOP=(String) context.getProperty("BIZhostOP");
				    context.setContextType("BIZprocesoDDOP", "id_String");
				
                context.BIZprocesoDDOP=(String) context.getProperty("BIZprocesoDDOP");
				    context.setContextType("BIZprocesoDD", "id_String");
				
                context.BIZprocesoDD=(String) context.getProperty("BIZprocesoDD");
				    context.setContextType("BIZprocesoWorkflowOP", "id_String");
				
                context.BIZprocesoWorkflowOP=(String) context.getProperty("BIZprocesoWorkflowOP");
				    context.setContextType("EventoSKU_XMLtemp", "id_File");
				
                context.EventoSKU_XMLtemp=(String) context.getProperty("EventoSKU_XMLtemp");
				    context.setContextType("EventoSKU_CSVProductosActualizados", "id_File");
				
                context.EventoSKU_CSVProductosActualizados=(String) context.getProperty("EventoSKU_CSVProductosActualizados");
				    context.setContextType("Limite", "id_Long");
				
             try{
                 context.Limite=routines.system.ParserUtils.parseTo_Long (context.getProperty("Limite"));
             }catch(NumberFormatException e){
                 context.Limite=null;
              }
				    context.setContextType("Aumento", "id_Long");
				
             try{
                 context.Aumento=routines.system.ParserUtils.parseTo_Long (context.getProperty("Aumento"));
             }catch(NumberFormatException e){
                 context.Aumento=null;
              }
				    context.setContextType("Inicial", "id_Long");
				
             try{
                 context.Inicial=routines.system.ParserUtils.parseTo_Long (context.getProperty("Inicial"));
             }catch(NumberFormatException e){
                 context.Inicial=null;
              }
				    context.setContextType("CantidadActual", "id_Long");
				
             try{
                 context.CantidadActual=routines.system.ParserUtils.parseTo_Long (context.getProperty("CantidadActual"));
             }catch(NumberFormatException e){
                 context.CantidadActual=null;
              }
				    context.setContextType("Final", "id_Long");
				
             try{
                 context.Final=routines.system.ParserUtils.parseTo_Long (context.getProperty("Final"));
             }catch(NumberFormatException e){
                 context.Final=null;
              }
				    context.setContextType("EventoSKU_ListaSKU", "id_String");
				
                context.EventoSKU_ListaSKU=(String) context.getProperty("EventoSKU_ListaSKU");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ExcelImportacion")) {
                context.ExcelImportacion = (String) parentContextMap.get("ExcelImportacion");
            }if (parentContextMap.containsKey("XMLOrigen")) {
                context.XMLOrigen = (String) parentContextMap.get("XMLOrigen");
            }if (parentContextMap.containsKey("XMLProductosCargados")) {
                context.XMLProductosCargados = (String) parentContextMap.get("XMLProductosCargados");
            }if (parentContextMap.containsKey("ExcelExportacion")) {
                context.ExcelExportacion = (String) parentContextMap.get("ExcelExportacion");
            }if (parentContextMap.containsKey("ExcelRechazados")) {
                context.ExcelRechazados = (String) parentContextMap.get("ExcelRechazados");
            }if (parentContextMap.containsKey("XMLDDRegistrosCargados")) {
                context.XMLDDRegistrosCargados = (String) parentContextMap.get("XMLDDRegistrosCargados");
            }if (parentContextMap.containsKey("XMLFlagFoto")) {
                context.XMLFlagFoto = (String) parentContextMap.get("XMLFlagFoto");
            }if (parentContextMap.containsKey("XMLProgramacion")) {
                context.XMLProgramacion = (String) parentContextMap.get("XMLProgramacion");
            }if (parentContextMap.containsKey("XMLTempAgrupado")) {
                context.XMLTempAgrupado = (String) parentContextMap.get("XMLTempAgrupado");
            }if (parentContextMap.containsKey("ExcelLogCreados")) {
                context.ExcelLogCreados = (String) parentContextMap.get("ExcelLogCreados");
            }if (parentContextMap.containsKey("ExcelLogFallidos")) {
                context.ExcelLogFallidos = (String) parentContextMap.get("ExcelLogFallidos");
            }if (parentContextMap.containsKey("ExcelLogXML")) {
                context.ExcelLogXML = (String) parentContextMap.get("ExcelLogXML");
            }if (parentContextMap.containsKey("XMLPais")) {
                context.XMLPais = (String) parentContextMap.get("XMLPais");
            }if (parentContextMap.containsKey("SalidaCSV")) {
                context.SalidaCSV = (String) parentContextMap.get("SalidaCSV");
            }if (parentContextMap.containsKey("ExcelSKU")) {
                context.ExcelSKU = (String) parentContextMap.get("ExcelSKU");
            }if (parentContextMap.containsKey("XMLDatamart")) {
                context.XMLDatamart = (String) parentContextMap.get("XMLDatamart");
            }if (parentContextMap.containsKey("ExtelDatamart")) {
                context.ExtelDatamart = (String) parentContextMap.get("ExtelDatamart");
            }if (parentContextMap.containsKey("XMLGetEntitiesM_Informaciondeproceso")) {
                context.XMLGetEntitiesM_Informaciondeproceso = (String) parentContextMap.get("XMLGetEntitiesM_Informaciondeproceso");
            }if (parentContextMap.containsKey("CSVM_Informaciondeproceso")) {
                context.CSVM_Informaciondeproceso = (String) parentContextMap.get("CSVM_Informaciondeproceso");
            }if (parentContextMap.containsKey("ExcelM_Informaciondeproceso")) {
                context.ExcelM_Informaciondeproceso = (String) parentContextMap.get("ExcelM_Informaciondeproceso");
            }if (parentContextMap.containsKey("ExcelExtrasInformaciondeProceso")) {
                context.ExcelExtrasInformaciondeProceso = (String) parentContextMap.get("ExcelExtrasInformaciondeProceso");
            }if (parentContextMap.containsKey("TXTM_Informaciondeproceso")) {
                context.TXTM_Informaciondeproceso = (String) parentContextMap.get("TXTM_Informaciondeproceso");
            }if (parentContextMap.containsKey("EventoSKU_ExcelCarga")) {
                context.EventoSKU_ExcelCarga = (String) parentContextMap.get("EventoSKU_ExcelCarga");
            }if (parentContextMap.containsKey("BIZprocesoWorkflow")) {
                context.BIZprocesoWorkflow = (String) parentContextMap.get("BIZprocesoWorkflow");
            }if (parentContextMap.containsKey("BIZhost")) {
                context.BIZhost = (String) parentContextMap.get("BIZhost");
            }if (parentContextMap.containsKey("BIZhostOP")) {
                context.BIZhostOP = (String) parentContextMap.get("BIZhostOP");
            }if (parentContextMap.containsKey("BIZprocesoDDOP")) {
                context.BIZprocesoDDOP = (String) parentContextMap.get("BIZprocesoDDOP");
            }if (parentContextMap.containsKey("BIZprocesoDD")) {
                context.BIZprocesoDD = (String) parentContextMap.get("BIZprocesoDD");
            }if (parentContextMap.containsKey("BIZprocesoWorkflowOP")) {
                context.BIZprocesoWorkflowOP = (String) parentContextMap.get("BIZprocesoWorkflowOP");
            }if (parentContextMap.containsKey("EventoSKU_XMLtemp")) {
                context.EventoSKU_XMLtemp = (String) parentContextMap.get("EventoSKU_XMLtemp");
            }if (parentContextMap.containsKey("EventoSKU_CSVProductosActualizados")) {
                context.EventoSKU_CSVProductosActualizados = (String) parentContextMap.get("EventoSKU_CSVProductosActualizados");
            }if (parentContextMap.containsKey("Limite")) {
                context.Limite = (Long) parentContextMap.get("Limite");
            }if (parentContextMap.containsKey("Aumento")) {
                context.Aumento = (Long) parentContextMap.get("Aumento");
            }if (parentContextMap.containsKey("Inicial")) {
                context.Inicial = (Long) parentContextMap.get("Inicial");
            }if (parentContextMap.containsKey("CantidadActual")) {
                context.CantidadActual = (Long) parentContextMap.get("CantidadActual");
            }if (parentContextMap.containsKey("Final")) {
                context.Final = (Long) parentContextMap.get("Final");
            }if (parentContextMap.containsKey("EventoSKU_ListaSKU")) {
                context.EventoSKU_ListaSKU = (String) parentContextMap.get("EventoSKU_ListaSKU");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ActualizarEventoSKU_Hijo");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     204303 characters generated by Talend Open Studio for Data Integration 
 *     on the 4 de abril de 2019 16:14:32 CLST
 ************************************************************************************************/