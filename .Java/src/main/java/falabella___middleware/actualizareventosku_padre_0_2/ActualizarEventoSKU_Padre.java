// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package falabella___middleware.actualizareventosku_padre_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ActualizarEventoSKU_Padre Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.5.1.20180116_1512
 * @status 
 */
public class ActualizarEventoSKU_Padre implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ExcelImportacion != null){
				
					this.setProperty("ExcelImportacion", ExcelImportacion.toString());
				
			}
			
			if(XMLOrigen != null){
				
					this.setProperty("XMLOrigen", XMLOrigen.toString());
				
			}
			
			if(XMLProductosCargados != null){
				
					this.setProperty("XMLProductosCargados", XMLProductosCargados.toString());
				
			}
			
			if(ExcelExportacion != null){
				
					this.setProperty("ExcelExportacion", ExcelExportacion.toString());
				
			}
			
			if(ExcelRechazados != null){
				
					this.setProperty("ExcelRechazados", ExcelRechazados.toString());
				
			}
			
			if(XMLDDRegistrosCargados != null){
				
					this.setProperty("XMLDDRegistrosCargados", XMLDDRegistrosCargados.toString());
				
			}
			
			if(XMLFlagFoto != null){
				
					this.setProperty("XMLFlagFoto", XMLFlagFoto.toString());
				
			}
			
			if(XMLProgramacion != null){
				
					this.setProperty("XMLProgramacion", XMLProgramacion.toString());
				
			}
			
			if(XMLTempAgrupado != null){
				
					this.setProperty("XMLTempAgrupado", XMLTempAgrupado.toString());
				
			}
			
			if(ExcelLogCreados != null){
				
					this.setProperty("ExcelLogCreados", ExcelLogCreados.toString());
				
			}
			
			if(ExcelLogFallidos != null){
				
					this.setProperty("ExcelLogFallidos", ExcelLogFallidos.toString());
				
			}
			
			if(ExcelLogXML != null){
				
					this.setProperty("ExcelLogXML", ExcelLogXML.toString());
				
			}
			
			if(XMLPais != null){
				
					this.setProperty("XMLPais", XMLPais.toString());
				
			}
			
			if(SalidaCSV != null){
				
					this.setProperty("SalidaCSV", SalidaCSV.toString());
				
			}
			
			if(ExcelSKU != null){
				
					this.setProperty("ExcelSKU", ExcelSKU.toString());
				
			}
			
			if(XMLDatamart != null){
				
					this.setProperty("XMLDatamart", XMLDatamart.toString());
				
			}
			
			if(ExtelDatamart != null){
				
					this.setProperty("ExtelDatamart", ExtelDatamart.toString());
				
			}
			
			if(XMLGetEntitiesM_Informaciondeproceso != null){
				
					this.setProperty("XMLGetEntitiesM_Informaciondeproceso", XMLGetEntitiesM_Informaciondeproceso.toString());
				
			}
			
			if(CSVM_Informaciondeproceso != null){
				
					this.setProperty("CSVM_Informaciondeproceso", CSVM_Informaciondeproceso.toString());
				
			}
			
			if(ExcelM_Informaciondeproceso != null){
				
					this.setProperty("ExcelM_Informaciondeproceso", ExcelM_Informaciondeproceso.toString());
				
			}
			
			if(ExcelExtrasInformaciondeProceso != null){
				
					this.setProperty("ExcelExtrasInformaciondeProceso", ExcelExtrasInformaciondeProceso.toString());
				
			}
			
			if(TXTM_Informaciondeproceso != null){
				
					this.setProperty("TXTM_Informaciondeproceso", TXTM_Informaciondeproceso.toString());
				
			}
			
			if(EventoSKU_ExcelCarga != null){
				
					this.setProperty("EventoSKU_ExcelCarga", EventoSKU_ExcelCarga.toString());
				
			}
			
			if(BIZprocesoWorkflow != null){
				
					this.setProperty("BIZprocesoWorkflow", BIZprocesoWorkflow.toString());
				
			}
			
			if(BIZhost != null){
				
					this.setProperty("BIZhost", BIZhost.toString());
				
			}
			
			if(BIZhostOP != null){
				
					this.setProperty("BIZhostOP", BIZhostOP.toString());
				
			}
			
			if(BIZprocesoDDOP != null){
				
					this.setProperty("BIZprocesoDDOP", BIZprocesoDDOP.toString());
				
			}
			
			if(BIZprocesoDD != null){
				
					this.setProperty("BIZprocesoDD", BIZprocesoDD.toString());
				
			}
			
			if(BIZprocesoWorkflowOP != null){
				
					this.setProperty("BIZprocesoWorkflowOP", BIZprocesoWorkflowOP.toString());
				
			}
			
			if(EventoSKU_XMLtemp != null){
				
					this.setProperty("EventoSKU_XMLtemp", EventoSKU_XMLtemp.toString());
				
			}
			
			if(EventoSKU_CSVProductosActualizados != null){
				
					this.setProperty("EventoSKU_CSVProductosActualizados", EventoSKU_CSVProductosActualizados.toString());
				
			}
			
			if(Limite != null){
				
					this.setProperty("Limite", Limite.toString());
				
			}
			
			if(Aumento != null){
				
					this.setProperty("Aumento", Aumento.toString());
				
			}
			
			if(Inicial != null){
				
					this.setProperty("Inicial", Inicial.toString());
				
			}
			
			if(CantidadActual != null){
				
					this.setProperty("CantidadActual", CantidadActual.toString());
				
			}
			
			if(Final != null){
				
					this.setProperty("Final", Final.toString());
				
			}
			
			if(PrimeraEjecucion != null){
				
					this.setProperty("PrimeraEjecucion", PrimeraEjecucion.toString());
				
			}
			
			if(EventoSKU_ListaSKU != null){
				
					this.setProperty("EventoSKU_ListaSKU", EventoSKU_ListaSKU.toString());
				
			}
			
		}

		public String ExcelImportacion;
		public String getExcelImportacion(){
			return this.ExcelImportacion;
		}
		
		public String XMLOrigen;
		public String getXMLOrigen(){
			return this.XMLOrigen;
		}
		
		public String XMLProductosCargados;
		public String getXMLProductosCargados(){
			return this.XMLProductosCargados;
		}
		
		public String ExcelExportacion;
		public String getExcelExportacion(){
			return this.ExcelExportacion;
		}
		
		public String ExcelRechazados;
		public String getExcelRechazados(){
			return this.ExcelRechazados;
		}
		
		public String XMLDDRegistrosCargados;
		public String getXMLDDRegistrosCargados(){
			return this.XMLDDRegistrosCargados;
		}
		
		public String XMLFlagFoto;
		public String getXMLFlagFoto(){
			return this.XMLFlagFoto;
		}
		
		public String XMLProgramacion;
		public String getXMLProgramacion(){
			return this.XMLProgramacion;
		}
		
		public String XMLTempAgrupado;
		public String getXMLTempAgrupado(){
			return this.XMLTempAgrupado;
		}
		
		public String ExcelLogCreados;
		public String getExcelLogCreados(){
			return this.ExcelLogCreados;
		}
		
		public String ExcelLogFallidos;
		public String getExcelLogFallidos(){
			return this.ExcelLogFallidos;
		}
		
		public String ExcelLogXML;
		public String getExcelLogXML(){
			return this.ExcelLogXML;
		}
		
		public String XMLPais;
		public String getXMLPais(){
			return this.XMLPais;
		}
		
		public String SalidaCSV;
		public String getSalidaCSV(){
			return this.SalidaCSV;
		}
		
public String ExcelSKU;
public String getExcelSKU(){
	return this.ExcelSKU;
}
		public String XMLDatamart;
		public String getXMLDatamart(){
			return this.XMLDatamart;
		}
		
public String ExtelDatamart;
public String getExtelDatamart(){
	return this.ExtelDatamart;
}
		public String XMLGetEntitiesM_Informaciondeproceso;
		public String getXMLGetEntitiesM_Informaciondeproceso(){
			return this.XMLGetEntitiesM_Informaciondeproceso;
		}
		
		public String CSVM_Informaciondeproceso;
		public String getCSVM_Informaciondeproceso(){
			return this.CSVM_Informaciondeproceso;
		}
		
		public String ExcelM_Informaciondeproceso;
		public String getExcelM_Informaciondeproceso(){
			return this.ExcelM_Informaciondeproceso;
		}
		
		public String ExcelExtrasInformaciondeProceso;
		public String getExcelExtrasInformaciondeProceso(){
			return this.ExcelExtrasInformaciondeProceso;
		}
		
		public String TXTM_Informaciondeproceso;
		public String getTXTM_Informaciondeproceso(){
			return this.TXTM_Informaciondeproceso;
		}
		
		public String EventoSKU_ExcelCarga;
		public String getEventoSKU_ExcelCarga(){
			return this.EventoSKU_ExcelCarga;
		}
		
public String BIZprocesoWorkflow;
public String getBIZprocesoWorkflow(){
	return this.BIZprocesoWorkflow;
}
public String BIZhost;
public String getBIZhost(){
	return this.BIZhost;
}
public String BIZhostOP;
public String getBIZhostOP(){
	return this.BIZhostOP;
}
public String BIZprocesoDDOP;
public String getBIZprocesoDDOP(){
	return this.BIZprocesoDDOP;
}
public String BIZprocesoDD;
public String getBIZprocesoDD(){
	return this.BIZprocesoDD;
}
public String BIZprocesoWorkflowOP;
public String getBIZprocesoWorkflowOP(){
	return this.BIZprocesoWorkflowOP;
}
		public String EventoSKU_XMLtemp;
		public String getEventoSKU_XMLtemp(){
			return this.EventoSKU_XMLtemp;
		}
		
		public String EventoSKU_CSVProductosActualizados;
		public String getEventoSKU_CSVProductosActualizados(){
			return this.EventoSKU_CSVProductosActualizados;
		}
		
public Long Limite;
public Long getLimite(){
	return this.Limite;
}
public Long Aumento;
public Long getAumento(){
	return this.Aumento;
}
public Long Inicial;
public Long getInicial(){
	return this.Inicial;
}
public Long CantidadActual;
public Long getCantidadActual(){
	return this.CantidadActual;
}
public Long Final;
public Long getFinal(){
	return this.Final;
}
public Boolean PrimeraEjecucion;
public Boolean getPrimeraEjecucion(){
	return this.PrimeraEjecucion;
}
public String EventoSKU_ListaSKU;
public String getEventoSKU_ListaSKU(){
	return this.EventoSKU_ListaSKU;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.2";
	private final String jobName = "ActualizarEventoSKU_Padre";
	private final String projectName = "FALABELLA___MIDDLEWARE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ActualizarEventoSKU_Padre.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ActualizarEventoSKU_Padre.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


if(context.PrimeraEjecucion == false)
{
	context.Inicial = context.Final;
	context.Final += context.Aumento;
	context.CantidadActual = (long)0;
}
else
{
	System.out.println("---------------------------------------------");
	System.out.println("*** Actualizar eventos a SKU  ***");
	context.PrimeraEjecucion = false;
}
System.out.println("---------------------------------------------");
System.out.println("Leyendo filas " + context.Inicial + " hasta " + context.Final);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputExcel_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class listaSKU2Struct implements routines.system.IPersistableRow<listaSKU2Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[0];

	
			    public String ListaSKU;

				public String getListaSKU () {
					return this.ListaSKU;
				}
				
			    public Integer CantidadSKU;

				public Integer getCantidadSKU () {
					return this.CantidadSKU;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre) {

        	try {

        		int length = 0;
		
					this.ListaSKU = readString(dis);
					
						this.CantidadSKU = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ListaSKU,dos);
					
					// Integer
				
						writeInteger(this.CantidadSKU,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ListaSKU="+ListaSKU);
		sb.append(",CantidadSKU="+String.valueOf(CantidadSKU));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(listaSKU2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[0];

	
			    public String ListaSKU;

				public String getListaSKU () {
					return this.ListaSKU;
				}
				
			    public Integer CantidadSKU;

				public Integer getCantidadSKU () {
					return this.CantidadSKU;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre) {

        	try {

        		int length = 0;
		
					this.ListaSKU = readString(dis);
					
						this.CantidadSKU = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ListaSKU,dos);
					
					// Integer
				
						writeInteger(this.CantidadSKU,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ListaSKU="+ListaSKU);
		sb.append(",CantidadSKU="+String.valueOf(CantidadSKU));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class listaSKU1Struct implements routines.system.IPersistableRow<listaSKU1Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[0];

	
			    public String SKU;

				public String getSKU () {
					return this.SKU;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre) {

        	try {

        		int length = 0;
		
					this.SKU = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SKU,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SKU="+SKU);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(listaSKU1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[0];

	
			    public String SKU;

				public String getSKU () {
					return this.SKU;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre) {

        	try {

        		int length = 0;
		
					this.SKU = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SKU,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SKU="+SKU);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[0];
    static byte[] commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[0];

	
			    public String SKU;

				public String getSKU () {
					return this.SKU;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre.length) {
				if(length < 1024 && commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre.length == 0) {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[1024];
				} else {
   					commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre, 0, length);
			strReturn = new String(commonByteArray_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FALABELLA___MIDDLEWARE_ActualizarEventoSKU_Padre) {

        	try {

        		int length = 0;
		
					this.SKU = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SKU,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SKU="+SKU);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
listaSKU1Struct listaSKU1 = new listaSKU1Struct();
listaSKU2Struct listaSKU2 = new listaSKU2Struct();






	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("listaSKU1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		
    	class BytesLimit65535_tAggregateRow_1_AGGOUT{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_1_AGGOUT().limitLog4jByte();

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
StringBuilder ListaSKU_list = new StringBuilder();
           			boolean ListaSKU_list_firstEmpty = false;
           			int count = 0;
       			int CantidadSKU_clmCount = 0;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	
	String delimiter_tAggregateRow_1 = "','";
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tSampleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_1", false);
		start_Hash.put("tSampleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSampleRow_1 = 0;
		
    	class BytesLimit65535_tSampleRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSampleRow_1().limitLog4jByte();

String[] rangetSampleRow_1 = (context.Inicial.toString() + ".." + context.Final.toString()).split(",");
java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

Integer nb_line_tSampleRow_1 = 0;

for(int i =0;i<rangetSampleRow_1.length;i++){

	if(rangetSampleRow_1[i].matches("\\d+")){
	
		rangeSettSampleRow_1 .add(Integer.valueOf(rangetSampleRow_1[i]));
		
	}else if(rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_1= rangetSampleRow_1[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_1[0]).intValue();j<Integer.valueOf(edgetSampleRow_1[1]).intValue()+1;j++){			
			rangeSettSampleRow_1 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_1 = 0;
		
    	class BytesLimit65535_tUniqRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_1().limitLog4jByte();

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String SKU;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.SKU == null) ? 0 : this.SKU.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.SKU == null) {
										if (other.SKU != null) 
											return false;
								
									} else if (!this.SKU.equals(other.SKU))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		
    	class BytesLimit65535_tFileInputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_1().limitLog4jByte();


		Object source_tFileInputExcel_1 = context.EventoSKU_ExcelCarga;
		com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof java.io.InputStream || source_tFileInputExcel_1 instanceof String){
			excelReader_tFileInputExcel_1 = new com.talend.excel.xssf.event.ExcelReader();
		}else{
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}

		try {
		excelReader_tFileInputExcel_1.addSheetName("Hoja1", false);
		int start_column_tFileInputExcel_1 = 1-1;
		int end_column_tFileInputExcel_1 = -1;
		if(start_column_tFileInputExcel_1 >=0) {//follow start column
			
				end_column_tFileInputExcel_1 = start_column_tFileInputExcel_1 + 1 - 1;
			
		} else if(end_column_tFileInputExcel_1 >= 0) {//follow end column
			start_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 - 1 + 1;
		}

		if(end_column_tFileInputExcel_1<0 || start_column_tFileInputExcel_1<0) {
			throw new RuntimeException("Error start column and end column.");
		}
		int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 ;

		int header_tFileInputExcel_1 = 1;
		int limit_tFileInputExcel_1 = -1;

		int nb_line_tFileInputExcel_1 = 0;

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();

		if(source_tFileInputExcel_1 instanceof String){
			excelReader_tFileInputExcel_1.parse((String)source_tFileInputExcel_1,"UTF-8");
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
			excelReader_tFileInputExcel_1.parse((java.io.InputStream)source_tFileInputExcel_1,"UTF-8");
		}
		


		while((header_tFileInputExcel_1--)>0 && excelReader_tFileInputExcel_1.hasNext()) {//skip the header
			excelReader_tFileInputExcel_1.next();
		}

		
		while(excelReader_tFileInputExcel_1.hasNext()) {
			int emptyColumnCount_tFileInputExcel_1 = 0;

			if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
				excelReader_tFileInputExcel_1.stopRead();
        		break;
        	}

        	java.util.List<String> row_tFileInputExcel_1 = excelReader_tFileInputExcel_1.next();
		row1 = null;
					int tempRowLength_tFileInputExcel_1 = 1;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
					
		String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
		
		for(int i_tFileInputExcel_1=0;i_tFileInputExcel_1 < tempRowLength_tFileInputExcel_1;i_tFileInputExcel_1++){
			int current_tFileInputExcel_1 = i_tFileInputExcel_1 + start_column_tFileInputExcel_1;
			if(current_tFileInputExcel_1 <= actual_end_column_tFileInputExcel_1){
				if(current_tFileInputExcel_1 < row_tFileInputExcel_1.size()){
					String column_tFileInputExcel_1 = row_tFileInputExcel_1.get(current_tFileInputExcel_1);
					if(column_tFileInputExcel_1!=null) {
						temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = column_tFileInputExcel_1;
					} else {
						temp_row_tFileInputExcel_1[i_tFileInputExcel_1]="";
					}
				} else {
					temp_row_tFileInputExcel_1[i_tFileInputExcel_1]="";
				}
			} else {
				temp_row_tFileInputExcel_1[i_tFileInputExcel_1]="";
			}
		}

		boolean whetherReject_tFileInputExcel_1 = false;
		row1 = new row1Struct();
		int curColNum_tFileInputExcel_1 = -1;
		String curColName_tFileInputExcel_1 = "";

		try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "SKU";

				row1.SKU = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.SKU = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
			nb_line_tFileInputExcel_1++;
			
		} catch(java.lang.Exception e) {
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}

        		




 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		
row2 = null;			
if(row1.SKU == null){
	finder_tUniqRow_1.SKU = null;
}else{
	finder_tUniqRow_1.SKU = row1.SKU.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row1.SKU == null){
	new_tUniqRow_1.SKU = null;
}else{
	new_tUniqRow_1.SKU = row1.SKU.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row2 == null){ 
	
	row2 = new row2Struct();
}row2.SKU = row1.SKU;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tSampleRow_1 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

	
	nb_line_tSampleRow_1++;
	
 	if(!rangeSettSampleRow_1.contains(nb_line_tSampleRow_1)){        
            listaSKU1 = null;            	
 	}else{  	
 	   listaSKU1 = new listaSKU1Struct();
 	   

       listaSKU1.SKU = row2.SKU;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_1++;

/**
 * [tSampleRow_1 main ] stop
 */
// Start of branch "listaSKU1"
if(listaSKU1 != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

			//listaSKU1
			//listaSKU1


			
				if(execStat){
					runStat.updateStatOnConnection("listaSKU1"+iterateId,1, 1);
				} 
			

		
	


	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(listaSKU1.SKU != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_1.ListaSKU_list.length() > 0) {
					operation_result_tAggregateRow_1.ListaSKU_list.append("','");
				} 
				else if(operation_result_tAggregateRow_1.ListaSKU_list_firstEmpty){
					operation_result_tAggregateRow_1.ListaSKU_list.append("','");
				}
					if(operation_result_tAggregateRow_1.ListaSKU_list != null) {
						if(operation_result_tAggregateRow_1.ListaSKU_list_firstEmpty==false && ("").equals(String.valueOf(listaSKU1.SKU))){
							operation_result_tAggregateRow_1.ListaSKU_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_1.ListaSKU_list = operation_result_tAggregateRow_1.ListaSKU_list.append(String.valueOf(listaSKU1.SKU));
					}
				
				} // G_OutMain_AggR_546
				
				if(listaSKU1.SKU != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.CantidadSKU_clmCount++;
				operation_result_tAggregateRow_1.count++;
				
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */

} // End of branch "listaSKU1"





} // End of branch "row2"





} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			try {
				if(excelReader_tFileInputExcel_1!=null) {
					excelReader_tFileInputExcel_1.handleException();
				}
			} catch(java.lang.Exception e_tFileInputExcel_1) {
				if(!(e_tFileInputExcel_1.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {
				
					
				System.err.println(e_tFileInputExcel_1.getMessage());	
				
				}
			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
		} finally { 
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tSampleRow_1 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSampleRow_1", true);
end_Hash.put("tSampleRow_1", System.currentTimeMillis());




/**
 * [tSampleRow_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("listaSKU1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("listaSKU2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		
    	class BytesLimit65535_tAggregateRow_1_AGGIN{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_1_AGGIN().limitLog4jByte();

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

    								listaSKU2.ListaSKU = aggregated_row_tAggregateRow_1.ListaSKU_list.toString();
	    						listaSKU2.CantidadSKU = (int) aggregated_row_tAggregateRow_1.count;
	                                	listaSKU2.CantidadSKU = (int) aggregated_row_tAggregateRow_1.CantidadSKU_clmCount;
	                                	

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//listaSKU2
			//listaSKU2


			
				if(execStat){
					runStat.updateStatOnConnection("listaSKU2"+iterateId,1, 1);
				} 
			

		

    if (listaSKU2.ListaSKU != null)
	context.EventoSKU_ListaSKU = "'" + listaSKU2.ListaSKU + "'";
else
	context.EventoSKU_ListaSKU = "";
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("listaSKU2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

   			if (listaSKU2.CantidadSKU != null && listaSKU2.CantidadSKU > 0) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tRunJob_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_1 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tSampleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Prod");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_1.put("ExcelImportacion", context.ExcelImportacion);
			paraList_tRunJob_1.add("--context_type " + "ExcelImportacion" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLOrigen", context.XMLOrigen);
			paraList_tRunJob_1.add("--context_type " + "XMLOrigen" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLProductosCargados", context.XMLProductosCargados);
			paraList_tRunJob_1.add("--context_type " + "XMLProductosCargados" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelExportacion", context.ExcelExportacion);
			paraList_tRunJob_1.add("--context_type " + "ExcelExportacion" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelRechazados", context.ExcelRechazados);
			paraList_tRunJob_1.add("--context_type " + "ExcelRechazados" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLDDRegistrosCargados", context.XMLDDRegistrosCargados);
			paraList_tRunJob_1.add("--context_type " + "XMLDDRegistrosCargados" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLFlagFoto", context.XMLFlagFoto);
			paraList_tRunJob_1.add("--context_type " + "XMLFlagFoto" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLProgramacion", context.XMLProgramacion);
			paraList_tRunJob_1.add("--context_type " + "XMLProgramacion" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLTempAgrupado", context.XMLTempAgrupado);
			paraList_tRunJob_1.add("--context_type " + "XMLTempAgrupado" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelLogCreados", context.ExcelLogCreados);
			paraList_tRunJob_1.add("--context_type " + "ExcelLogCreados" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelLogFallidos", context.ExcelLogFallidos);
			paraList_tRunJob_1.add("--context_type " + "ExcelLogFallidos" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelLogXML", context.ExcelLogXML);
			paraList_tRunJob_1.add("--context_type " + "ExcelLogXML" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("XMLPais", context.XMLPais);
			paraList_tRunJob_1.add("--context_type " + "XMLPais" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("SalidaCSV", context.SalidaCSV);
			paraList_tRunJob_1.add("--context_type " + "SalidaCSV" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_1.put("ExcelSKU", context.ExcelSKU);
			paraList_tRunJob_1.add("--context_type " + "ExcelSKU" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("XMLDatamart", context.XMLDatamart);
			paraList_tRunJob_1.add("--context_type " + "XMLDatamart" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExtelDatamart", context.ExtelDatamart);
			paraList_tRunJob_1.add("--context_type " + "ExtelDatamart" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("XMLGetEntitiesM_Informaciondeproceso", context.XMLGetEntitiesM_Informaciondeproceso);
			paraList_tRunJob_1.add("--context_type " + "XMLGetEntitiesM_Informaciondeproceso" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("CSVM_Informaciondeproceso", context.CSVM_Informaciondeproceso);
			paraList_tRunJob_1.add("--context_type " + "CSVM_Informaciondeproceso" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelM_Informaciondeproceso", context.ExcelM_Informaciondeproceso);
			paraList_tRunJob_1.add("--context_type " + "ExcelM_Informaciondeproceso" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("ExcelExtrasInformaciondeProceso", context.ExcelExtrasInformaciondeProceso);
			paraList_tRunJob_1.add("--context_type " + "ExcelExtrasInformaciondeProceso" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("TXTM_Informaciondeproceso", context.TXTM_Informaciondeproceso);
			paraList_tRunJob_1.add("--context_type " + "TXTM_Informaciondeproceso" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("EventoSKU_ExcelCarga", context.EventoSKU_ExcelCarga);
			paraList_tRunJob_1.add("--context_type " + "EventoSKU_ExcelCarga" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("BIZprocesoWorkflow", context.BIZprocesoWorkflow);
			paraList_tRunJob_1.add("--context_type " + "BIZprocesoWorkflow" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("BIZhost", context.BIZhost);
			paraList_tRunJob_1.add("--context_type " + "BIZhost" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("BIZhostOP", context.BIZhostOP);
			paraList_tRunJob_1.add("--context_type " + "BIZhostOP" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("BIZprocesoDDOP", context.BIZprocesoDDOP);
			paraList_tRunJob_1.add("--context_type " + "BIZprocesoDDOP" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("BIZprocesoDD", context.BIZprocesoDD);
			paraList_tRunJob_1.add("--context_type " + "BIZprocesoDD" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("BIZprocesoWorkflowOP", context.BIZprocesoWorkflowOP);
			paraList_tRunJob_1.add("--context_type " + "BIZprocesoWorkflowOP" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("EventoSKU_XMLtemp", context.EventoSKU_XMLtemp);
			paraList_tRunJob_1.add("--context_type " + "EventoSKU_XMLtemp" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("EventoSKU_CSVProductosActualizados", context.EventoSKU_CSVProductosActualizados);
			paraList_tRunJob_1.add("--context_type " + "EventoSKU_CSVProductosActualizados" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("Limite", context.Limite);
			paraList_tRunJob_1.add("--context_type " + "Limite" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("Aumento", context.Aumento);
			paraList_tRunJob_1.add("--context_type " + "Aumento" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("Inicial", context.Inicial);
			paraList_tRunJob_1.add("--context_type " + "Inicial" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("CantidadActual", context.CantidadActual);
			paraList_tRunJob_1.add("--context_type " + "CantidadActual" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("Final", context.Final);
			paraList_tRunJob_1.add("--context_type " + "Final" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("PrimeraEjecucion", context.PrimeraEjecucion);
			paraList_tRunJob_1.add("--context_type " + "PrimeraEjecucion" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_1.put("EventoSKU_ListaSKU", context.EventoSKU_ListaSKU);
			paraList_tRunJob_1.add("--context_type " + "EventoSKU_ListaSKU" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		falabella___middleware.actualizareventosku_hijo_0_3.ActualizarEventoSKU_Hijo childJob_tRunJob_1 = new falabella___middleware.actualizareventosku_hijo_0_3.ActualizarEventoSKU_Hijo();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Prod";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ActualizarEventoSKU_Padre ActualizarEventoSKU_PadreClass = new ActualizarEventoSKU_Padre();

        int exitCode = ActualizarEventoSKU_PadreClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ActualizarEventoSKU_Padre.class.getClassLoader().getResourceAsStream("falabella___middleware/actualizareventosku_padre_0_2/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("ExcelImportacion", "id_File");
				
                context.ExcelImportacion=(String) context.getProperty("ExcelImportacion");
				    context.setContextType("XMLOrigen", "id_File");
				
                context.XMLOrigen=(String) context.getProperty("XMLOrigen");
				    context.setContextType("XMLProductosCargados", "id_File");
				
                context.XMLProductosCargados=(String) context.getProperty("XMLProductosCargados");
				    context.setContextType("ExcelExportacion", "id_File");
				
                context.ExcelExportacion=(String) context.getProperty("ExcelExportacion");
				    context.setContextType("ExcelRechazados", "id_File");
				
                context.ExcelRechazados=(String) context.getProperty("ExcelRechazados");
				    context.setContextType("XMLDDRegistrosCargados", "id_File");
				
                context.XMLDDRegistrosCargados=(String) context.getProperty("XMLDDRegistrosCargados");
				    context.setContextType("XMLFlagFoto", "id_File");
				
                context.XMLFlagFoto=(String) context.getProperty("XMLFlagFoto");
				    context.setContextType("XMLProgramacion", "id_File");
				
                context.XMLProgramacion=(String) context.getProperty("XMLProgramacion");
				    context.setContextType("XMLTempAgrupado", "id_File");
				
                context.XMLTempAgrupado=(String) context.getProperty("XMLTempAgrupado");
				    context.setContextType("ExcelLogCreados", "id_File");
				
                context.ExcelLogCreados=(String) context.getProperty("ExcelLogCreados");
				    context.setContextType("ExcelLogFallidos", "id_File");
				
                context.ExcelLogFallidos=(String) context.getProperty("ExcelLogFallidos");
				    context.setContextType("ExcelLogXML", "id_File");
				
                context.ExcelLogXML=(String) context.getProperty("ExcelLogXML");
				    context.setContextType("XMLPais", "id_File");
				
                context.XMLPais=(String) context.getProperty("XMLPais");
				    context.setContextType("SalidaCSV", "id_Directory");
				
                context.SalidaCSV=(String) context.getProperty("SalidaCSV");
				    context.setContextType("ExcelSKU", "id_String");
				
                context.ExcelSKU=(String) context.getProperty("ExcelSKU");
				    context.setContextType("XMLDatamart", "id_File");
				
                context.XMLDatamart=(String) context.getProperty("XMLDatamart");
				    context.setContextType("ExtelDatamart", "id_String");
				
                context.ExtelDatamart=(String) context.getProperty("ExtelDatamart");
				    context.setContextType("XMLGetEntitiesM_Informaciondeproceso", "id_File");
				
                context.XMLGetEntitiesM_Informaciondeproceso=(String) context.getProperty("XMLGetEntitiesM_Informaciondeproceso");
				    context.setContextType("CSVM_Informaciondeproceso", "id_File");
				
                context.CSVM_Informaciondeproceso=(String) context.getProperty("CSVM_Informaciondeproceso");
				    context.setContextType("ExcelM_Informaciondeproceso", "id_File");
				
                context.ExcelM_Informaciondeproceso=(String) context.getProperty("ExcelM_Informaciondeproceso");
				    context.setContextType("ExcelExtrasInformaciondeProceso", "id_File");
				
                context.ExcelExtrasInformaciondeProceso=(String) context.getProperty("ExcelExtrasInformaciondeProceso");
				    context.setContextType("TXTM_Informaciondeproceso", "id_File");
				
                context.TXTM_Informaciondeproceso=(String) context.getProperty("TXTM_Informaciondeproceso");
				    context.setContextType("EventoSKU_ExcelCarga", "id_File");
				
                context.EventoSKU_ExcelCarga=(String) context.getProperty("EventoSKU_ExcelCarga");
				    context.setContextType("BIZprocesoWorkflow", "id_String");
				
                context.BIZprocesoWorkflow=(String) context.getProperty("BIZprocesoWorkflow");
				    context.setContextType("BIZhost", "id_String");
				
                context.BIZhost=(String) context.getProperty("BIZhost");
				    context.setContextType("BIZhostOP", "id_String");
				
                context.BIZhostOP=(String) context.getProperty("BIZhostOP");
				    context.setContextType("BIZprocesoDDOP", "id_String");
				
                context.BIZprocesoDDOP=(String) context.getProperty("BIZprocesoDDOP");
				    context.setContextType("BIZprocesoDD", "id_String");
				
                context.BIZprocesoDD=(String) context.getProperty("BIZprocesoDD");
				    context.setContextType("BIZprocesoWorkflowOP", "id_String");
				
                context.BIZprocesoWorkflowOP=(String) context.getProperty("BIZprocesoWorkflowOP");
				    context.setContextType("EventoSKU_XMLtemp", "id_File");
				
                context.EventoSKU_XMLtemp=(String) context.getProperty("EventoSKU_XMLtemp");
				    context.setContextType("EventoSKU_CSVProductosActualizados", "id_File");
				
                context.EventoSKU_CSVProductosActualizados=(String) context.getProperty("EventoSKU_CSVProductosActualizados");
				    context.setContextType("Limite", "id_Long");
				
             try{
                 context.Limite=routines.system.ParserUtils.parseTo_Long (context.getProperty("Limite"));
             }catch(NumberFormatException e){
                 context.Limite=null;
              }
				    context.setContextType("Aumento", "id_Long");
				
             try{
                 context.Aumento=routines.system.ParserUtils.parseTo_Long (context.getProperty("Aumento"));
             }catch(NumberFormatException e){
                 context.Aumento=null;
              }
				    context.setContextType("Inicial", "id_Long");
				
             try{
                 context.Inicial=routines.system.ParserUtils.parseTo_Long (context.getProperty("Inicial"));
             }catch(NumberFormatException e){
                 context.Inicial=null;
              }
				    context.setContextType("CantidadActual", "id_Long");
				
             try{
                 context.CantidadActual=routines.system.ParserUtils.parseTo_Long (context.getProperty("CantidadActual"));
             }catch(NumberFormatException e){
                 context.CantidadActual=null;
              }
				    context.setContextType("Final", "id_Long");
				
             try{
                 context.Final=routines.system.ParserUtils.parseTo_Long (context.getProperty("Final"));
             }catch(NumberFormatException e){
                 context.Final=null;
              }
				    context.setContextType("PrimeraEjecucion", "id_Boolean");
				
             try{
                 context.PrimeraEjecucion=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("PrimeraEjecucion"));
             }catch(NumberFormatException e){
                 context.PrimeraEjecucion=null;
              }
				    context.setContextType("EventoSKU_ListaSKU", "id_String");
				
                context.EventoSKU_ListaSKU=(String) context.getProperty("EventoSKU_ListaSKU");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ExcelImportacion")) {
                context.ExcelImportacion = (String) parentContextMap.get("ExcelImportacion");
            }if (parentContextMap.containsKey("XMLOrigen")) {
                context.XMLOrigen = (String) parentContextMap.get("XMLOrigen");
            }if (parentContextMap.containsKey("XMLProductosCargados")) {
                context.XMLProductosCargados = (String) parentContextMap.get("XMLProductosCargados");
            }if (parentContextMap.containsKey("ExcelExportacion")) {
                context.ExcelExportacion = (String) parentContextMap.get("ExcelExportacion");
            }if (parentContextMap.containsKey("ExcelRechazados")) {
                context.ExcelRechazados = (String) parentContextMap.get("ExcelRechazados");
            }if (parentContextMap.containsKey("XMLDDRegistrosCargados")) {
                context.XMLDDRegistrosCargados = (String) parentContextMap.get("XMLDDRegistrosCargados");
            }if (parentContextMap.containsKey("XMLFlagFoto")) {
                context.XMLFlagFoto = (String) parentContextMap.get("XMLFlagFoto");
            }if (parentContextMap.containsKey("XMLProgramacion")) {
                context.XMLProgramacion = (String) parentContextMap.get("XMLProgramacion");
            }if (parentContextMap.containsKey("XMLTempAgrupado")) {
                context.XMLTempAgrupado = (String) parentContextMap.get("XMLTempAgrupado");
            }if (parentContextMap.containsKey("ExcelLogCreados")) {
                context.ExcelLogCreados = (String) parentContextMap.get("ExcelLogCreados");
            }if (parentContextMap.containsKey("ExcelLogFallidos")) {
                context.ExcelLogFallidos = (String) parentContextMap.get("ExcelLogFallidos");
            }if (parentContextMap.containsKey("ExcelLogXML")) {
                context.ExcelLogXML = (String) parentContextMap.get("ExcelLogXML");
            }if (parentContextMap.containsKey("XMLPais")) {
                context.XMLPais = (String) parentContextMap.get("XMLPais");
            }if (parentContextMap.containsKey("SalidaCSV")) {
                context.SalidaCSV = (String) parentContextMap.get("SalidaCSV");
            }if (parentContextMap.containsKey("ExcelSKU")) {
                context.ExcelSKU = (String) parentContextMap.get("ExcelSKU");
            }if (parentContextMap.containsKey("XMLDatamart")) {
                context.XMLDatamart = (String) parentContextMap.get("XMLDatamart");
            }if (parentContextMap.containsKey("ExtelDatamart")) {
                context.ExtelDatamart = (String) parentContextMap.get("ExtelDatamart");
            }if (parentContextMap.containsKey("XMLGetEntitiesM_Informaciondeproceso")) {
                context.XMLGetEntitiesM_Informaciondeproceso = (String) parentContextMap.get("XMLGetEntitiesM_Informaciondeproceso");
            }if (parentContextMap.containsKey("CSVM_Informaciondeproceso")) {
                context.CSVM_Informaciondeproceso = (String) parentContextMap.get("CSVM_Informaciondeproceso");
            }if (parentContextMap.containsKey("ExcelM_Informaciondeproceso")) {
                context.ExcelM_Informaciondeproceso = (String) parentContextMap.get("ExcelM_Informaciondeproceso");
            }if (parentContextMap.containsKey("ExcelExtrasInformaciondeProceso")) {
                context.ExcelExtrasInformaciondeProceso = (String) parentContextMap.get("ExcelExtrasInformaciondeProceso");
            }if (parentContextMap.containsKey("TXTM_Informaciondeproceso")) {
                context.TXTM_Informaciondeproceso = (String) parentContextMap.get("TXTM_Informaciondeproceso");
            }if (parentContextMap.containsKey("EventoSKU_ExcelCarga")) {
                context.EventoSKU_ExcelCarga = (String) parentContextMap.get("EventoSKU_ExcelCarga");
            }if (parentContextMap.containsKey("BIZprocesoWorkflow")) {
                context.BIZprocesoWorkflow = (String) parentContextMap.get("BIZprocesoWorkflow");
            }if (parentContextMap.containsKey("BIZhost")) {
                context.BIZhost = (String) parentContextMap.get("BIZhost");
            }if (parentContextMap.containsKey("BIZhostOP")) {
                context.BIZhostOP = (String) parentContextMap.get("BIZhostOP");
            }if (parentContextMap.containsKey("BIZprocesoDDOP")) {
                context.BIZprocesoDDOP = (String) parentContextMap.get("BIZprocesoDDOP");
            }if (parentContextMap.containsKey("BIZprocesoDD")) {
                context.BIZprocesoDD = (String) parentContextMap.get("BIZprocesoDD");
            }if (parentContextMap.containsKey("BIZprocesoWorkflowOP")) {
                context.BIZprocesoWorkflowOP = (String) parentContextMap.get("BIZprocesoWorkflowOP");
            }if (parentContextMap.containsKey("EventoSKU_XMLtemp")) {
                context.EventoSKU_XMLtemp = (String) parentContextMap.get("EventoSKU_XMLtemp");
            }if (parentContextMap.containsKey("EventoSKU_CSVProductosActualizados")) {
                context.EventoSKU_CSVProductosActualizados = (String) parentContextMap.get("EventoSKU_CSVProductosActualizados");
            }if (parentContextMap.containsKey("Limite")) {
                context.Limite = (Long) parentContextMap.get("Limite");
            }if (parentContextMap.containsKey("Aumento")) {
                context.Aumento = (Long) parentContextMap.get("Aumento");
            }if (parentContextMap.containsKey("Inicial")) {
                context.Inicial = (Long) parentContextMap.get("Inicial");
            }if (parentContextMap.containsKey("CantidadActual")) {
                context.CantidadActual = (Long) parentContextMap.get("CantidadActual");
            }if (parentContextMap.containsKey("Final")) {
                context.Final = (Long) parentContextMap.get("Final");
            }if (parentContextMap.containsKey("PrimeraEjecucion")) {
                context.PrimeraEjecucion = (Boolean) parentContextMap.get("PrimeraEjecucion");
            }if (parentContextMap.containsKey("EventoSKU_ListaSKU")) {
                context.EventoSKU_ListaSKU = (String) parentContextMap.get("EventoSKU_ListaSKU");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ActualizarEventoSKU_Padre");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     109589 characters generated by Talend Open Studio for Data Integration 
 *     on the 4 de abril de 2019 16:19:33 CLST
 ************************************************************************************************/